package net.blueberrymc.world.level.block.state.properties;

import net.blueberrymc.world.level.block.BlockFace;

import java.util.function.Predicate;

public class BlockStateProperties {

    public static final BooleanProperty ATTACHED = BooleanProperty.create("attached");
    public static final BooleanProperty BOTTOM = BooleanProperty.create("bottom");
    public static final BooleanProperty CONDITIONAL = BooleanProperty.create("conditional");
    public static final BooleanProperty DISARMED = BooleanProperty.create("disarmed");
    public static final BooleanProperty DRAG = BooleanProperty.create("drag");
    public static final BooleanProperty ENABLED = BooleanProperty.create("enabled");
    public static final BooleanProperty EXTENDED = BooleanProperty.create("extended");
    public static final BooleanProperty EYE = BooleanProperty.create("eye");
    public static final BooleanProperty FALLING = BooleanProperty.create("falling");
    public static final BooleanProperty HANGING = BooleanProperty.create("hanging");
    public static final BooleanProperty HAS_BOTTLE_0 = BooleanProperty.create("has_bottle_0");
    public static final BooleanProperty HAS_BOTTLE_1 = BooleanProperty.create("has_bottle_1");
    public static final BooleanProperty HAS_BOTTLE_2 = BooleanProperty.create("has_bottle_2");
    public static final BooleanProperty HAS_RECORD = BooleanProperty.create("has_record");
    public static final BooleanProperty HAS_BOOK = BooleanProperty.create("has_book");
    public static final BooleanProperty INVERTED = BooleanProperty.create("inverted");
    public static final BooleanProperty IN_WALL = BooleanProperty.create("in_wall");
    public static final BooleanProperty LIT = BooleanProperty.create("lit");
    public static final BooleanProperty LOCKED = BooleanProperty.create("locked");
    public static final BooleanProperty OCCUPIED = BooleanProperty.create("occupied");
    public static final BooleanProperty OPEN = BooleanProperty.create("open");
    public static final BooleanProperty PERSISTENT = BooleanProperty.create("persistent");
    public static final BooleanProperty POWERED = BooleanProperty.create("powered");
    public static final BooleanProperty SHORT = BooleanProperty.create("short");
    public static final BooleanProperty SIGNAL_FIRE = BooleanProperty.create("signal_fire");
    public static final BooleanProperty SNOWY = BooleanProperty.create("snowy");
    public static final BooleanProperty TRIGGERED = BooleanProperty.create("triggered");
    public static final BooleanProperty UNSTABLE = BooleanProperty.create("unstable");
    public static final BooleanProperty WATERLOGGED = BooleanProperty.create("waterlogged");
    public static final BooleanProperty VINE_END = BooleanProperty.create("vine_end");
    public static final BooleanProperty BERRIES = BooleanProperty.create("berries");
    public static final BooleanProperty BLOOM = BooleanProperty.create("bloom");
    public static final BooleanProperty SHRIEKING = BooleanProperty.create("shrieking");
    public static final BooleanProperty CAN_SUMMON = BooleanProperty.create("can_summon");
    public static final BooleanProperty UP = BooleanProperty.create("up");
    public static final BooleanProperty DOWN = BooleanProperty.create("down");
    public static final BooleanProperty NORTH = BooleanProperty.create("north");
    public static final BooleanProperty EAST = BooleanProperty.create("east");
    public static final BooleanProperty SOUTH = BooleanProperty.create("south");
    public static final BooleanProperty WEST = BooleanProperty.create("west");
    public static final DirectionProperty FACING = DirectionProperty.create("facing", BlockFace.NORTH, BlockFace.EAST, BlockFace.SOUTH, BlockFace.WEST, BlockFace.UP, BlockFace.DOWN);
    public static final DirectionProperty FACING_HOPPER = DirectionProperty.create("facing", face -> face != BlockFace.UP);
    public static final DirectionProperty HORIZONTAL_FACING = DirectionProperty.create("facing", BlockFace.Plane.HORIZONTAL);
    public static final int MAX_AGE_1 = 1;
    public static final int MAX_AGE_2 = 2;
    public static final int MAX_AGE_3 = 3;
    public static final int MAX_AGE_4 = 4;
    public static final int MAX_AGE_5 = 5;
    public static final int MAX_AGE_7 = 7;
    public static final int MAX_AGE_15 = 15;
    public static final int MAX_AGE_25 = 25;
    public static final IntegerProperty AGE_1 = IntegerProperty.create("age", 0, MAX_AGE_1);
    public static final IntegerProperty AGE_2 = IntegerProperty.create("age", 0, MAX_AGE_2);
    public static final IntegerProperty AGE_3 = IntegerProperty.create("age", 0, MAX_AGE_3);
    public static final IntegerProperty AGE_4 = IntegerProperty.create("age", 0, MAX_AGE_4);
    public static final IntegerProperty AGE_5 = IntegerProperty.create("age", 0, MAX_AGE_5);
    public static final IntegerProperty AGE_7 = IntegerProperty.create("age", 0, MAX_AGE_7);
    public static final IntegerProperty AGE_15 = IntegerProperty.create("age", 0, MAX_AGE_15);
    public static final IntegerProperty AGE_25 = IntegerProperty.create("age", 0, MAX_AGE_25);
    public static final IntegerProperty BITES = IntegerProperty.create("bites", 0, 6);
    public static final IntegerProperty CANDLES = IntegerProperty.create("candles", 1, 4);
    public static final IntegerProperty DELAY = IntegerProperty.create("delay", 1, 4);
    public static final int MAX_DISTANCE = 7;
    public static final IntegerProperty DISTANCE = IntegerProperty.create("distance", 1, MAX_DISTANCE);
    public static final IntegerProperty EGGS = IntegerProperty.create("eggs", 1, 4);
    public static final IntegerProperty HATCH = IntegerProperty.create("hatch", 0, 2);
    public static final IntegerProperty LAYERS = IntegerProperty.create("layers", 1, 8);
    public static final int MIN_LEVEL = 0;
    public static final int MIN_LEVEL_CAULDRON = 1;
    public static final int MAX_LEVEL_3 = 3;
    public static final int MAX_LEVEL_8 = 8;
    public static final IntegerProperty LEVEL_CAULDRON = IntegerProperty.create("level", MIN_LEVEL_CAULDRON, MAX_LEVEL_3);
    public static final IntegerProperty LEVEL_COMPOSTER = IntegerProperty.create("level", MIN_LEVEL, MAX_LEVEL_8);
    public static final IntegerProperty LEVEL_FLOWING = IntegerProperty.create("level", MIN_LEVEL_CAULDRON, MAX_LEVEL_8);
    public static final IntegerProperty LEVEL_HONEY = IntegerProperty.create("honey_level", MIN_LEVEL, 5);
    public static final int MAX_LEVEL_15 = 15;
    public static final IntegerProperty LEVEL = IntegerProperty.create("level", MIN_LEVEL, MAX_LEVEL_15);
    public static final IntegerProperty MOISTURE = IntegerProperty.create("moisture", 0, 7);
    public static final IntegerProperty NOTE = IntegerProperty.create("note", 0, 24);
    public static final IntegerProperty PICKLES = IntegerProperty.create("pickles", 1, 4);
    public static final IntegerProperty POWER = IntegerProperty.create("power", 0, 15);
    public static final IntegerProperty STAGE = IntegerProperty.create("stage", 0, 1);
    public static final int STABILITY_MAX_DISTANCE = 7;
    public static final IntegerProperty STABILITY_DISTANCE = IntegerProperty.create("distance", 0, STABILITY_MAX_DISTANCE);
    public static final int MIN_RESPAWN_ANCHOR_CHARGES = 0;
    public static final int MAX_RESPAWN_ANCHOR_CHARGES = 4;
    public static final IntegerProperty RESPAWN_ANCHOR_CHARGES = IntegerProperty.create("charges", MIN_RESPAWN_ANCHOR_CHARGES, MAX_RESPAWN_ANCHOR_CHARGES);
    public static final int MAX_ROTATIONS_16 = 15;
    public static final IntegerProperty ROTATION_16 = IntegerProperty.create("rotation", 0, MAX_ROTATIONS_16);
    public static final DirectionProperty VERTICAL_DIRECTION = DirectionProperty.create("vertical_direction", BlockFace.UP, BlockFace.DOWN);
}
