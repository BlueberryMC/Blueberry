From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: acrylic-style <me@acrylicstyle.xyz>
Date: Fri, 16 Jul 2021 00:34:19 +0900
Subject: [PATCH] Implement debug packets


diff --git a/src/main/java/net/minecraft/network/protocol/game/DebugPackets.java b/src/main/java/net/minecraft/network/protocol/game/DebugPackets.java
index 0e3b543ffac88d08a920774fa76d7efb71530e60..1714da70daa50ef9a1e18b01a3a6a6613a61f89e 100644
--- a/src/main/java/net/minecraft/network/protocol/game/DebugPackets.java
+++ b/src/main/java/net/minecraft/network/protocol/game/DebugPackets.java
@@ -8,15 +8,23 @@ import java.util.Map;
 import java.util.Optional;
 import java.util.UUID;
 import java.util.Map.Entry;
+import java.util.stream.Collectors;
 import javax.annotation.Nullable;
+import io.netty.buffer.Unpooled; // Blueberry
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.GlobalPos;
 import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.network.FriendlyByteBuf; // Blueberry
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.common.ClientboundCustomPayloadPacket;
+import net.minecraft.network.protocol.common.custom.BeeDebugPayload;
 import net.minecraft.network.protocol.common.custom.CustomPacketPayload;
+import net.minecraft.network.protocol.common.custom.GameEventDebugPayload;
 import net.minecraft.network.protocol.common.custom.GameTestAddMarkerDebugPayload;
 import net.minecraft.network.protocol.common.custom.GameTestClearMarkersDebugPayload;
+import net.minecraft.network.protocol.common.custom.GoalDebugPayload;
+import net.minecraft.network.protocol.common.custom.NeighborUpdatesDebugPayload;
+import net.minecraft.network.protocol.common.custom.PathfindingDebugPayload;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.Nameable;
@@ -73,17 +81,30 @@ public class DebugPackets {
     private static void sendVillageSectionsPacket(ServerLevel serverLevel, BlockPos blockPos) {
     }
 
-    public static void sendPathFindingPacket(Level level, Mob mob, @Nullable Path path, float f) {
+    // Blueberry start - implement debug packets
+    public static void sendPathFindingPacket(Level level, Mob mob, @Nullable Path path, float pathMaxDist) {
+        if (!(level instanceof ServerLevel) || path == null) return;
+        if (!net.blueberrymc.common.bml.InternalBlueberryModConfig.Debug.enableDebugPackets) return;
+        sendPacketToAllPlayers((ServerLevel) level, new PathfindingDebugPayload(mob.getId(), path, pathMaxDist));
     }
 
     public static void sendNeighborsUpdatePacket(Level level, BlockPos blockPos) {
+        if (!(level instanceof ServerLevel)) return;
+        if (!net.blueberrymc.common.bml.InternalBlueberryModConfig.Debug.enableDebugPackets) return;
+        sendPacketToAllPlayers((ServerLevel) level, new NeighborUpdatesDebugPayload(level.getGameTime(), blockPos));
     }
 
     public static void sendStructurePacket(WorldGenLevel worldGenLevel, StructureStart structureStart) {
+        // ???
     }
 
     public static void sendGoalSelector(Level level, Mob mob, GoalSelector goalSelector) {
+        if (!(level instanceof ServerLevel)) return;
+        if (!net.blueberrymc.common.bml.InternalBlueberryModConfig.Debug.enableDebugPackets) return;
+        var list = goalSelector.getAvailableGoals().stream().map(goal -> new GoalDebugPayload.DebugGoal(goal.getPriority(), goal.isRunning(), goal.getGoal().getClass().getSimpleName())).toList();
+        sendPacketToAllPlayers((ServerLevel) level, new GoalDebugPayload(mob.getId(), mob.blockPosition(), list));
     }
+    // Blueberry end - implement debug packets
 
     public static void sendRaids(ServerLevel serverLevel, Collection<Raid> collection) {
     }
@@ -91,11 +112,32 @@ public class DebugPackets {
     public static void sendEntityBrain(LivingEntity livingEntity) {
     }
 
+    // Blueberry start - implement debug packets
     public static void sendBeeInfo(Bee bee) {
+        if (!(bee.level() instanceof ServerLevel)) return;
+        if (!net.blueberrymc.common.bml.InternalBlueberryModConfig.Debug.enableDebugPackets) return;
+        sendPacketToAllPlayers((ServerLevel) bee.level(), new BeeDebugPayload(new BeeDebugPayload.BeeInfo(
+                bee.getUUID(),
+                bee.getId(),
+                new Vec3(bee.getX(), bee.getY(), bee.getZ()),
+                bee.getNavigation().getPath(),
+                bee.getHivePos(),
+                bee.getSavedFlowerPos(),
+                bee.getTravellingTicks(),
+                bee.getGoalSelector().getRunningGoals().map(g -> g.getGoal().getClass().getSimpleName()).collect(Collectors.toSet()),
+                bee.getBlacklistedHives()
+        )));
     }
 
     public static void sendGameEventInfo(Level level, GameEvent gameEvent, Vec3 vec3) {
+        if (!(level instanceof ServerLevel)) return;
+        if (!net.blueberrymc.common.bml.InternalBlueberryModConfig.Debug.enableDebugPackets) return;
+        sendPacketToAllPlayers((ServerLevel) level, new GameEventDebugPayload(
+                BuiltInRegistries.GAME_EVENT.getResourceKey(gameEvent).orElseThrow(),
+                vec3
+        ));
     }
+    // Blueberry end - implement debug packets
 
     public static void sendGameEventListenerInfo(Level level, GameEventListener gameEventListener) {
     }
@@ -175,4 +217,4 @@ public class DebugPackets {
         }
 
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/PathFinder.java b/src/main/java/net/minecraft/world/level/pathfinder/PathFinder.java
index 1c4f45995289a8ecd155fb2039f9bbedf50c7277..6c658f65ce3beec94f01b46f3deb8fb9759e68c6 100644
--- a/src/main/java/net/minecraft/world/level/pathfinder/PathFinder.java
+++ b/src/main/java/net/minecraft/world/level/pathfinder/PathFinder.java
@@ -105,7 +105,12 @@ public class PathFinder {
 
         Optional<Path> optional = !set3.isEmpty() ? set3.stream().map((target) -> this.reconstructPath(target.getBestNode(), (BlockPos)map.get(target), true)).min(Comparator.comparingInt(Path::getNodeCount)) : set.stream().map((target) -> this.reconstructPath(target.getBestNode(), (BlockPos)map.get(target), false)).min(Comparator.comparingDouble(Path::getDistToTarget).thenComparingInt(Path::getNodeCount));
         profilerFiller.pop();
-        return optional.isEmpty() ? null : (Path)optional.get();
+        // Blueberry start - implement debug packets
+        if (optional.isEmpty()) return null;
+        Path path = optional.get();
+        path.setDebug(openSet.getHeap(), set2.toArray(new Node[0]), set3);
+        return path;
+        // Blueberry end - implement debug packets
     }
 
     protected float distance(Node node, Node node2) {
@@ -136,4 +141,4 @@ public class PathFinder {
 
         return new Path(list, blockPos, flag);
     }
-}
\ No newline at end of file
+}
