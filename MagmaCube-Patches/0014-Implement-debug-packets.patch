From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: acrylic-style <me@acrylicstyle.xyz>
Date: Fri, 16 Jul 2021 00:34:19 +0900
Subject: [PATCH] Implement debug packets


diff --git a/src/main/java/net/minecraft/network/protocol/game/DebugPackets.java b/src/main/java/net/minecraft/network/protocol/game/DebugPackets.java
index d5a9bfa72d157f575cd4441455f340303f4ae96d..e8b7657f88d7c078c7c92a7f83384ccc12e879bc 100644
--- a/src/main/java/net/minecraft/network/protocol/game/DebugPackets.java
+++ b/src/main/java/net/minecraft/network/protocol/game/DebugPackets.java
@@ -91,8 +91,19 @@ public class DebugPackets {
     private static void sendVillageSectionsPacket(ServerLevel serverLevel, BlockPos blockPos) {
     }
 
-    public static void sendPathFindingPacket(Level level, Mob mob, @Nullable Path path, float f) {
+    // Blueberry start - implement debug packets
+    public static void sendPathFindingPacket(Level level, Mob mob, @Nullable Path path, float pathMaxDist) {
+        if (!(level instanceof ServerLevel) || path == null) return;
+        if (!net.blueberrymc.common.bml.InternalBlueberryModConfig.Debug.enableDebugPackets) return;
+        FriendlyByteBuf friendlyByteBuf = new FriendlyByteBuf(Unpooled.buffer());
+        friendlyByteBuf.writeInt(mob.getId());
+        friendlyByteBuf.writeFloat(pathMaxDist);
+        int before = friendlyByteBuf.readableBytes();
+        path.writeToStream(friendlyByteBuf);
+        if (before == friendlyByteBuf.readableBytes()) return;
+        sendPacketToAllPlayers((ServerLevel) level, friendlyByteBuf, ClientboundCustomPayloadPacket.DEBUG_PATHFINDING_PACKET);
     }
+    // Blueberry end - implement debug packets
 
     public static void sendNeighborsUpdatePacket(Level level, BlockPos blockPos) {
     }
@@ -100,11 +111,23 @@ public class DebugPackets {
     public static void sendStructurePacket(WorldGenLevel worldGenLevel, StructureStart structureStart) {
     }
 
+    // Blueberry start - implement debug packets
     public static void sendGoalSelector(Level level, Mob mob, GoalSelector goalSelector) {
         if (level instanceof ServerLevel) {
-            ;
+            if (!net.blueberrymc.common.bml.InternalBlueberryModConfig.Debug.enableDebugPackets) return;
+            FriendlyByteBuf friendlyByteBuf = new FriendlyByteBuf(Unpooled.buffer());
+            friendlyByteBuf.writeBlockPos(mob.blockPosition());
+            friendlyByteBuf.writeInt(mob.getId());
+            friendlyByteBuf.writeInt(goalSelector.getAvailableGoals().size());
+            for (net.minecraft.world.entity.ai.goal.WrappedGoal goal : goalSelector.getAvailableGoals()) {
+                friendlyByteBuf.writeInt(goal.getPriority());
+                friendlyByteBuf.writeBoolean(goal.isRunning());
+                friendlyByteBuf.writeUtf(goal.getGoal().getClass().getSimpleName(), 255);
+            }
+            sendPacketToAllPlayers((ServerLevel) level, friendlyByteBuf, ClientboundCustomPayloadPacket.DEBUG_GOAL_SELECTOR);
         }
     }
+    // Blueberry end - implement debug packets
 
     public static void sendRaids(ServerLevel serverLevel, Collection<Raid> collection) {
     }
@@ -112,8 +135,38 @@ public class DebugPackets {
     public static void sendEntityBrain(LivingEntity livingEntity) {
     }
 
+    // Blueberry start - implement debug packets
     public static void sendBeeInfo(Bee bee) {
+        /*
+        if (!net.blueberrymc.common.bml.InternalBlueberryModConfig.Debug.enableDebugPackets) return;
+        if (bee.level instanceof ServerLevel) {
+            FriendlyByteBuf friendlyByteBuf = new FriendlyByteBuf(Unpooled.buffer());
+            friendlyByteBuf.writeDouble(bee.getX());
+            friendlyByteBuf.writeDouble(bee.getY());
+            friendlyByteBuf.writeDouble(bee.getZ());
+            friendlyByteBuf.writeUUID(bee.getUUID());
+            friendlyByteBuf.writeInt(bee.getId());
+            BlockPos hivePos = bee.getHivePos();
+            friendlyByteBuf.writeBoolean(hivePos != null);
+            if (hivePos != null) friendlyByteBuf.writeBlockPos(hivePos);
+            BlockPos flowerPos = bee.getSavedFlowerPos();
+            friendlyByteBuf.writeBoolean(flowerPos != null);
+            if (flowerPos != null) friendlyByteBuf.writeBlockPos(flowerPos);
+            friendlyByteBuf.writeInt(bee.getTravellingTicks());
+            Path path = bee.getNavigation().getPath();
+            friendlyByteBuf.writeBoolean(path != null);
+            if (path != null) path.writeToStream(friendlyByteBuf);
+            List<net.minecraft.world.entity.ai.goal.WrappedGoal> runningGoals = bee.getGoalSelector().getRunningGoals().collect(Collectors.toList());
+            friendlyByteBuf.writeInt(runningGoals.size());
+            for (net.minecraft.world.entity.ai.goal.WrappedGoal goal : runningGoals) friendlyByteBuf.writeUtf(goal.getGoal().getClass().getSimpleName());
+            List<BlockPos> blacklistedHives = bee.getBlacklistedHives();
+            friendlyByteBuf.writeInt(blacklistedHives.size());
+            for (BlockPos hive : blacklistedHives) friendlyByteBuf.writeBlockPos(hive);
+            sendPacketToAllPlayers((ServerLevel) bee.level, friendlyByteBuf, ClientboundCustomPayloadPacket.DEBUG_BEE);
+        }
+        */
     }
+    // Blueberry end - implement debug packets
 
     public static void sendGameEventInfo(Level level, GameEvent gameEvent, Vec3 vec3) {
     }
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/PathFinder.java b/src/main/java/net/minecraft/world/level/pathfinder/PathFinder.java
index 19b0bc2eda93bbfe8da02d5da620dcd66efc7e23..e22aa7e8751c71d8e3758f25d6bf024392992e67 100644
--- a/src/main/java/net/minecraft/world/level/pathfinder/PathFinder.java
+++ b/src/main/java/net/minecraft/world/level/pathfinder/PathFinder.java
@@ -105,7 +105,12 @@ public class PathFinder {
 
         Optional<Path> optional = !set3.isEmpty() ? set3.stream().map((target) -> this.reconstructPath(target.getBestNode(), (BlockPos)map.get(target), true)).min(Comparator.comparingInt(Path::getNodeCount)) : set.stream().map((target) -> this.reconstructPath(target.getBestNode(), (BlockPos)map.get(target), false)).min(Comparator.comparingDouble(Path::getDistToTarget).thenComparingInt(Path::getNodeCount));
         profilerFiller.pop();
-        return !optional.isPresent() ? null : (Path)optional.get();
+        // Blueberry start - implement debug packets
+        if (optional.isEmpty()) return null;
+        Path path = optional.get();
+        path.setDebug(openSet.getHeap(), set2.toArray(new Node[0]), set3);
+        return path;
+        // Blueberry end - implement debug packets
     }
 
     protected float distance(Node node, Node node2) {
