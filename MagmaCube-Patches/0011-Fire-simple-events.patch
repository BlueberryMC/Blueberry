From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: acrylic-style <me@acrylicstyle.xyz>
Date: Fri, 5 Mar 2021 21:38:13 +0900
Subject: [PATCH] Fire simple events


diff --git a/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java b/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
index da5c2a3545903d9497e41cf28c91ce874c6f12c5..c329e5ac475502f9561b8fb75c4c3092844af002 100644
--- a/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
+++ b/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
@@ -2349,6 +2349,13 @@ public class ClientPacketListener implements TickablePacketListener, ClientGameP
     }
 
     public void sendChat(String s) {
+        // Blueberry start - fire ClientLocalPlayerChatEvent
+        var event = new net.blueberrymc.client.event.player.ClientLocalPlayerChatEvent(s);
+        if (!event.callEvent()) {
+            return;
+        }
+        s = event.getMessage();
+        // Blueberry end - fire ClientLocalPlayerChatEvent
         Instant instant = Instant.now();
         long l = Crypt.SaltSupplier.getLong();
         LastSeenMessagesTracker.Update update = this.lastSeenMessages.generateAndApplyUpdate();
diff --git a/src/main/java/net/minecraft/network/Connection.java b/src/main/java/net/minecraft/network/Connection.java
index 55152736b714086e19c564ba44ea3ae426de9268..5d8d4614fcf361c8386dab39028ea7c4d8de8471 100644
--- a/src/main/java/net/minecraft/network/Connection.java
+++ b/src/main/java/net/minecraft/network/Connection.java
@@ -88,6 +88,7 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
             LOGGER.error(LogUtils.FATAL_MARKER, "Failed to change protocol to handshake", var3);
         }
 
+        new net.blueberrymc.common.event.network.ConnectionInitEvent(this.channel, this.receiving).callEvent(); // Blueberry
     }
 
     public void setProtocol(ConnectionProtocol connectionProtocol) {
@@ -380,6 +381,7 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
             }
         }
 
+        new net.blueberrymc.common.event.network.ConnectionSetupCompressionEvent(this.channel, this.receiving, i).callEvent(); // Blueberry
     }
 
     public void handleDisconnection() {
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 372f46bedcae2d72b59c3c314069b74113667354..9eed51527803c06ed3b40f4cd457bae50347997a 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -204,6 +204,7 @@ public abstract class PlayerList {
         this.broadcastAll(ClientboundPlayerInfoUpdatePacket.createPlayerInitializing(List.of(serverPlayer)));
         this.sendLevelInfo(serverPlayer, serverLevel2);
         serverLevel2.addNewPlayer(serverPlayer);
+        new net.blueberrymc.common.event.player.PlayerJoinEvent(serverPlayer).callEvent(); // Blueberry
         this.server.getCustomBossEvents().onPlayerConnect(serverPlayer);
         this.server.getServerResourcePack().ifPresent((serverResourcePackInfo) -> serverPlayer.sendTexturePack(serverResourcePackInfo.url(), serverResourcePackInfo.hash(), serverResourcePackInfo.isRequired(), serverResourcePackInfo.prompt()));
 
diff --git a/src/main/java/net/minecraft/world/level/biome/Biome.java b/src/main/java/net/minecraft/world/level/biome/Biome.java
index 3111cec4b7f9b2ce5634cd83c2f04b29b25368a4..da84704b11ff81ae99a51cc325abb878c97c8a05 100644
--- a/src/main/java/net/minecraft/world/level/biome/Biome.java
+++ b/src/main/java/net/minecraft/world/level/biome/Biome.java
@@ -283,7 +283,8 @@ public final class Biome {
 
         public Biome build() {
             if (this.temperature != null && this.downfall != null && this.specialEffects != null && this.mobSpawnSettings != null && this.generationSettings != null) {
-                return new Biome(new Biome.ClimateSettings(this.hasPrecipitation, this.temperature, this.temperatureModifier, this.downfall), this.specialEffects, this.generationSettings, this.mobSpawnSettings);
+                // Blueberry - call BiomeInitEvent
+                return net.blueberrymc.common.bml.event.Event.callEvent(new net.blueberrymc.common.event.biome.BiomeInitEvent(this, () -> new Biome(new Biome.ClimateSettings(this.hasPrecipitation, this.temperature, this.temperatureModifier, this.downfall), this.specialEffects, this.generationSettings, this.mobSpawnSettings))).getBiome().get();
             } else {
                 throw new IllegalStateException("You are missing parameters to build a proper biome\n" + this);
             }
diff --git a/src/main/java/net/minecraft/world/level/biome/BiomeGenerationSettings.java b/src/main/java/net/minecraft/world/level/biome/BiomeGenerationSettings.java
index 2cb28b2037ab3e8eb6bf0980fecf1f7930576b31..952e654cd25a6dd1a8aaca140304cc991f4839b4 100644
--- a/src/main/java/net/minecraft/world/level/biome/BiomeGenerationSettings.java
+++ b/src/main/java/net/minecraft/world/level/biome/BiomeGenerationSettings.java
@@ -108,7 +108,8 @@ public class BiomeGenerationSettings {
         }
 
         public BiomeGenerationSettings build() {
-            return new BiomeGenerationSettings(this.carvers.entrySet().stream().collect(ImmutableMap.toImmutableMap(Entry::getKey, (entry) -> HolderSet.direct(entry.getValue()))), this.features.stream().map(HolderSet::direct).collect(ImmutableList.toImmutableList()));
+            // Blueberry - call BiomeGenerationSettingsInitEvent
+            return net.blueberrymc.common.bml.event.Event.callEvent(new net.blueberrymc.common.event.biome.BiomeGenerationSettingsInitEvent(this, () -> new BiomeGenerationSettings(this.carvers.entrySet().stream().collect(ImmutableMap.toImmutableMap(Entry::getKey, (entry) -> HolderSet.direct(entry.getValue()))), this.features.stream().map(HolderSet::direct).collect(ImmutableList.toImmutableList())))).getBiomeGenerationSettings().get();
         }
     }
 }
\ No newline at end of file
