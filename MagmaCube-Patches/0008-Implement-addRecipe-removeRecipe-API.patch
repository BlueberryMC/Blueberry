From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: acrylic-style <me@acrylicstyle.xyz>
Date: Thu, 4 Mar 2021 22:06:05 +0900
Subject: [PATCH] Implement addRecipe/removeRecipe API


diff --git a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
index 60142dfb9590f291a29078c9085d8bf033898a80..6494ddd928bc3ee81d24dabea017df5053a76aea 100644
--- a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
+++ b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
@@ -32,10 +32,10 @@ import net.minecraft.world.level.Level;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class RecipeManager extends SimpleJsonResourceReloadListener {
+public class RecipeManager extends SimpleJsonResourceReloadListener implements net.blueberrymc.world.item.crafting.BlueberryRecipeManager { // Blueberry
     private static final Gson GSON = (new GsonBuilder()).setPrettyPrinting().disableHtmlEscaping().create();
     private static final Logger LOGGER = LogManager.getLogger();
-    private Map<RecipeType<?>, Map<ResourceLocation, Recipe<?>>> recipes = ImmutableMap.of();
+    private Map<RecipeType<?>, Map<ResourceLocation, Recipe<?>>> recipes = Maps.newHashMap(); // Blueberry - use HashMap instead
     private Map<ResourceLocation, Recipe<?>> byName = ImmutableMap.of();
     private boolean hasErrors;
 
@@ -60,8 +60,9 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
             }
         }
 
-        this.recipes = map2.entrySet().stream().collect(ImmutableMap.toImmutableMap(Entry::getKey, (entryx) -> ((Builder)entryx.getValue()).build()));
+        this.recipes = map2.entrySet().stream().collect(Collectors.toMap(Entry::getKey, (entryx) -> entryx.getValue().build(), (a, b) -> a)); // Blueberry - use normal map
         this.byName = builder.build();
+        net.blueberrymc.world.item.crafting.RecipeBuilder.getRecipes().forEach((id, recipe) -> addRecipe(recipe)); // Blueberry - add recipes now
         LOGGER.info("Loaded {} recipes", map2.size());
     }
 
@@ -133,4 +134,29 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
         this.recipes = ImmutableMap.copyOf(map);
         this.byName = builder.build();
     }
+
+    // Blueberry start - implement addRecipe/removeRecipe
+    @Override
+    public void addRecipe(Recipe<?> recipe) {
+        if (!net.blueberrymc.world.item.crafting.RecipeBuilder.knownRecipeManagers.contains(this))
+            net.blueberrymc.world.item.crafting.RecipeBuilder.knownRecipeManagers.add(this);
+        Map<ResourceLocation, Recipe<?>> map = this.recipes.get(recipe.getType());
+        boolean doAdd = false;
+        if (map instanceof ImmutableMap) {
+            map = new java.util.HashMap<>(map);
+            doAdd = true;
+        }
+        if (map.containsKey(recipe.getId())) {
+            throw new IllegalStateException("Duplicate recipe ignored with ID " + recipe.getId());
+        } else {
+            map.put(recipe.getId(), recipe);
+            if (doAdd) this.recipes.put(recipe.getType(), map);
+        }
+    }
+
+    @Override
+    public void removeRecipe(RecipeType<?> type, ResourceLocation id) {
+        this.recipes.get(type).remove(id);
+    }
+    // Blueberry end - implement addRecipe/removeRecipe
 }
\ No newline at end of file
