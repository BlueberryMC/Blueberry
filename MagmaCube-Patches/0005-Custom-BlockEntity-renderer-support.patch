From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: acrylic-style <me@acrylicstyle.xyz>
Date: Sun, 28 Feb 2021 16:33:41 +0900
Subject: [PATCH] Custom BlockEntity renderer support


diff --git a/src/main/java/net/blueberrymc/client/BlueberryClientImpl.java b/src/main/java/net/blueberrymc/client/BlueberryClientImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..82f560b47ec3def0c2ddf248a4005dfb28538ded
--- /dev/null
+++ b/src/main/java/net/blueberrymc/client/BlueberryClientImpl.java
@@ -0,0 +1,21 @@
+package net.blueberrymc.client;
+
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.screens.MenuScreens;
+import net.minecraft.client.gui.screens.Screen;
+import net.minecraft.client.gui.screens.inventory.MenuAccess;
+import net.minecraft.client.renderer.blockentity.BlockEntityRenderer;
+import net.minecraft.world.inventory.AbstractContainerMenu;
+import net.minecraft.world.inventory.MenuType;
+import net.minecraft.world.level.block.entity.BlockEntityType;
+import org.jetbrains.annotations.NotNull;
+
+public class BlueberryClientImpl extends BlueberryClient {
+    public void registerSpecialBlockEntityRenderer(@NotNull BlockEntityType<?> blockEntityType, @NotNull BlockEntityRenderer<?> blockEntityRenderer) {
+        Minecraft.getInstance().getBlockEntityRenderDispatcher().registerSpecialRenderer(blockEntityType, blockEntityRenderer);
+    }
+
+    public <M extends AbstractContainerMenu, U extends Screen & MenuAccess<M>> void registerMenuScreensFactory(@NotNull MenuType<? extends M> menuType, @NotNull ScreenConstructor<M, U> screenConstructor) {
+        MenuScreens.register(menuType, screenConstructor::create);
+    }
+}
diff --git a/src/main/java/net/blueberrymc/server/BlueberryServerImpl.java b/src/main/java/net/blueberrymc/server/BlueberryServerImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..7b1e2686690e9d7df32131010891223b24eb568f
--- /dev/null
+++ b/src/main/java/net/blueberrymc/server/BlueberryServerImpl.java
@@ -0,0 +1,4 @@
+package net.blueberrymc.server;
+
+public class BlueberryServerImpl extends BlueberryServer {
+}
diff --git a/src/main/java/net/minecraft/client/Minecraft.java b/src/main/java/net/minecraft/client/Minecraft.java
index 312c86961f81a4ba5c55701ce81bb2253b85fff7..02d569fc4fa676c85998a3fcb14fb2d1376aa84a 100644
--- a/src/main/java/net/minecraft/client/Minecraft.java
+++ b/src/main/java/net/minecraft/client/Minecraft.java
@@ -487,6 +487,7 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
         this.blockEntityRenderDispatcher = new BlockEntityRenderDispatcher(this.font, this.entityModels, this::getBlockRenderer);
         this.resourceManager.registerReloadListener(this.blockEntityRenderDispatcher);
         BlockEntityWithoutLevelRenderer blockEntityWithoutLevelRenderer = new BlockEntityWithoutLevelRenderer(this.blockEntityRenderDispatcher, this.entityModels);
+        BlockEntityWithoutLevelRenderer.instance = blockEntityWithoutLevelRenderer; // Blueberry
         this.resourceManager.registerReloadListener(blockEntityWithoutLevelRenderer);
         this.itemRenderer = new ItemRenderer(this.textureManager, this.modelManager, this.itemColors, blockEntityWithoutLevelRenderer);
         this.entityRenderDispatcher = new EntityRenderDispatcher(this.textureManager, this.itemRenderer, this.font, this.options, this.entityModels);
diff --git a/src/main/java/net/minecraft/client/main/Main.java b/src/main/java/net/minecraft/client/main/Main.java
index f3291e31d67ca25efb57b0e37e49878effb54875..6c3fa93c773e85a3aa7dd6940c3f81a4826712d9 100644
--- a/src/main/java/net/minecraft/client/main/Main.java
+++ b/src/main/java/net/minecraft/client/main/Main.java
@@ -87,7 +87,7 @@ public class Main {
             System.out.println("Completely ignored arguments: " + list);
         }
         File file = parseArgument(optionSet, optionSpec4); // Blueberry - moved from below
-        net.blueberrymc.common.Blueberry.bootstrap(net.blueberrymc.common.Side.CLIENT, file);
+        net.blueberrymc.common.Blueberry.bootstrap(net.blueberrymc.common.Side.CLIENT, file, new net.blueberrymc.client.BlueberryClientImpl()); // Blueberry
 
         String s = parseArgument(optionSet, optionSpec7);
         Proxy proxy = Proxy.NO_PROXY;
diff --git a/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java b/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java
index 35c862ea64f1a918f0ae211003f233ed130259e7..b9fdf06340f3f0b7062de486d19fcad3ee89662f 100644
--- a/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java
@@ -56,6 +56,7 @@ import org.apache.commons.lang3.StringUtils;
 public class BlockEntityWithoutLevelRenderer implements ResourceManagerReloadListener {
     private static final ShulkerBoxBlockEntity[] SHULKER_BOXES = (ShulkerBoxBlockEntity[])Arrays.stream(DyeColor.values()).sorted(Comparator.comparingInt(DyeColor::getId)).map((dyeColor) -> new ShulkerBoxBlockEntity(dyeColor, BlockPos.ZERO, Blocks.SHULKER_BOX.defaultBlockState())).toArray((i) -> new ShulkerBoxBlockEntity[i]);
     private static final ShulkerBoxBlockEntity DEFAULT_SHULKER_BOX = new ShulkerBoxBlockEntity(BlockPos.ZERO, Blocks.SHULKER_BOX.defaultBlockState());
+    public static BlockEntityWithoutLevelRenderer instance; // Blueberry
     private final ChestBlockEntity chest = new ChestBlockEntity(BlockPos.ZERO, Blocks.CHEST.defaultBlockState());
     private final ChestBlockEntity trappedChest = new TrappedChestBlockEntity(BlockPos.ZERO, Blocks.TRAPPED_CHEST.defaultBlockState());
     private final EnderChestBlockEntity enderChest = new EnderChestBlockEntity(BlockPos.ZERO, Blocks.ENDER_CHEST.defaultBlockState());
diff --git a/src/main/java/net/minecraft/client/renderer/block/BlockRenderDispatcher.java b/src/main/java/net/minecraft/client/renderer/block/BlockRenderDispatcher.java
index 6d39319fc7d7cbca7aa0516ba4c15f920909cd28..63afe78a13fbc0ab1d07c45566b7d6328c9f7f85 100644
--- a/src/main/java/net/minecraft/client/renderer/block/BlockRenderDispatcher.java
+++ b/src/main/java/net/minecraft/client/renderer/block/BlockRenderDispatcher.java
@@ -94,7 +94,10 @@ public class BlockRenderDispatcher implements ResourceManagerReloadListener {
                 this.modelRenderer.renderModel(poseStack.last(), multiBufferSource.getBuffer(ItemBlockRenderTypes.getRenderType(blockState, false)), blockState, bakedModel, f, f2, f3, i, i2);
                 break;
             case ENTITYBLOCK_ANIMATED:
-                this.blockEntityRenderer.renderByItem(new ItemStack(blockState.getBlock()), ItemTransforms.TransformType.NONE, poseStack, multiBufferSource, i, i2);
+                // Blueberry start
+                ItemStack stack = new ItemStack(blockState.getBlock());
+                stack.getItem().getRenderer().renderByItem(stack, ItemTransforms.TransformType.NONE, poseStack, multiBufferSource, i, i2);
+                // Blueberry end
             }
 
         }
diff --git a/src/main/java/net/minecraft/client/renderer/blockentity/BlockEntityRenderDispatcher.java b/src/main/java/net/minecraft/client/renderer/blockentity/BlockEntityRenderDispatcher.java
index 5acafe7d71e6427a48d301fac25f8f387449c04a..346f9ec2d795792c51b3adf9e83fe3b137abf2fd 100644
--- a/src/main/java/net/minecraft/client/renderer/blockentity/BlockEntityRenderDispatcher.java
+++ b/src/main/java/net/minecraft/client/renderer/blockentity/BlockEntityRenderDispatcher.java
@@ -22,7 +22,7 @@ import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.entity.BlockEntityType;
 import net.minecraft.world.phys.HitResult;
 
-public class BlockEntityRenderDispatcher implements ResourceManagerReloadListener {
+public class BlockEntityRenderDispatcher implements ResourceManagerReloadListener, net.blueberrymc.client.renderer.blockentity.MinecraftBlockEntityRenderDispatcher { // Blueberry - implement MinecraftBlockEntityRenderDispatcher
     private Map<BlockEntityType<?>, BlockEntityRenderer<?>> renderers = ImmutableMap.of();
     private final Font font;
     private final EntityModelSet entityModelSet;
@@ -107,4 +107,11 @@ public class BlockEntityRenderDispatcher implements ResourceManagerReloadListene
         BlockEntityRendererProvider.Context context = new BlockEntityRendererProvider.Context(this, (BlockRenderDispatcher)this.blockRenderDispatcher.get(), this.entityModelSet, this.font);
         this.renderers = BlockEntityRenderers.createEntityRenderers(context);
     }
+
+    // Blueberry start
+    @Override
+    public final void registerSpecialRenderer(BlockEntityType<?> blockEntityType, BlockEntityRenderer<?> blockEntityRenderer) {
+        this.renderers.put(blockEntityType, blockEntityRenderer);
+    }
+    // Blueberry end
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/renderer/blockentity/BlockEntityRenderers.java b/src/main/java/net/minecraft/client/renderer/blockentity/BlockEntityRenderers.java
index 3cf56c913cd1d1c2a348dd659099e8bac9091cee..ed76d548f191bf2cd0ddb50c1fc664bcec3aa5c4 100644
--- a/src/main/java/net/minecraft/client/renderer/blockentity/BlockEntityRenderers.java
+++ b/src/main/java/net/minecraft/client/renderer/blockentity/BlockEntityRenderers.java
@@ -11,6 +11,7 @@ import net.minecraft.world.level.block.entity.BlockEntityType;
 public class BlockEntityRenderers {
     private static final Map<BlockEntityType<?>, BlockEntityRendererProvider<?>> PROVIDERS = Maps.newHashMap();
 
+    // Blueberry - private -> public
     private static <T extends BlockEntity> void register(BlockEntityType<? extends T> blockEntityType, BlockEntityRendererProvider<T> blockEntityRendererProvider) {
         PROVIDERS.put(blockEntityType, blockEntityRendererProvider);
     }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/ItemRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/ItemRenderer.java
index f0bb4ef4821ee4730c6ac9131ce739e33d796a29..6ddfe3a0efb8f174451e3344178b2b2b9bc067f2 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/ItemRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/ItemRenderer.java
@@ -152,7 +152,7 @@ public class ItemRenderer implements ResourceManagerReloadListener {
 
                 this.renderModelLists(bakedModel, itemStack, i, i2, poseStack, vertexConsumer);
             } else {
-                this.blockEntityRenderer.renderByItem(itemStack, transformType, poseStack, multiBufferSource, i, i2);
+                itemStack.getItem().getRenderer().renderByItem(itemStack, transformType, poseStack, multiBufferSource, i, i2); // Blueberry
             }
 
             poseStack.popPose();
diff --git a/src/main/java/net/minecraft/client/renderer/texture/TextureAtlas.java b/src/main/java/net/minecraft/client/renderer/texture/TextureAtlas.java
index 291459ecdad6fdc3edeecef7564d4c2b2f7e0ba9..f52b4f1a70eb03751916d0e504955d1eb65c27f6 100644
--- a/src/main/java/net/minecraft/client/renderer/texture/TextureAtlas.java
+++ b/src/main/java/net/minecraft/client/renderer/texture/TextureAtlas.java
@@ -94,6 +94,7 @@ public class TextureAtlas extends AbstractTexture implements Tickable {
         int i3 = Integer.MAX_VALUE;
         int i4 = 1 << i;
         profilerFiller.popPush("extracting_frames");
+        net.blueberrymc.client.event.ClientEventFactory.callPreTextureStitchEvent(this, set); // Blueberry
 
         for(TextureAtlasSprite.Info info : this.getBasicSpriteInfos(resourceManager, set)) {
             i3 = Math.min(i3, Math.min(info.width(), info.height()));
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundOpenScreenPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundOpenScreenPacket.java
index 5562fa813e90488cdd3fc6119f8920740acd55b5..78111364866d132e2cc317dfa0c8d4d05ef50f21 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundOpenScreenPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundOpenScreenPacket.java
@@ -43,6 +43,8 @@ public class ClientboundOpenScreenPacket implements Packet<ClientGamePacketListe
         return Registry.MENU.byId(this.type);
     }
 
+    public int getRawType() { return this.type; } // Blueberry
+
     public Component getTitle() {
         return this.title;
     }
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index 68ddc80609d0c8ad85aa41ad964e2ede1f759985..573012b3f4f2e365ae423a72f3ab5f4e6ce66aba 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -84,7 +84,7 @@ public class Main {
                 return;
             }
             File file = new File((String)optionSet.valueOf(optionSpec10)); // Blueberry - moved from below
-            net.blueberrymc.common.Blueberry.bootstrap(net.blueberrymc.common.Side.SERVER, file); // Blueberry
+            net.blueberrymc.common.Blueberry.bootstrap(net.blueberrymc.common.Side.SERVER, file, new net.blueberrymc.server.BlueberryServerImpl()); // Blueberry
 
             CrashReport.preload();
             if (optionSet.has(optionSpec14)) {
diff --git a/src/main/java/net/minecraft/world/inventory/MenuType.java b/src/main/java/net/minecraft/world/inventory/MenuType.java
index a8211550fcb15fe84c6fed4d68d7f82c0cc259bd..a007ee11e08806890aca8add198972c731e67601 100644
--- a/src/main/java/net/minecraft/world/inventory/MenuType.java
+++ b/src/main/java/net/minecraft/world/inventory/MenuType.java
@@ -34,7 +34,8 @@ public class MenuType<T extends AbstractContainerMenu> {
         return Registry.register(Registry.MENU, s, new MenuType<>(menuSupplier));
     }
 
-    private MenuType(MenuType.MenuSupplier<T> menuSupplier) {
+    // Blueberry - private -> public
+    public MenuType(MenuType.MenuSupplier<T> menuSupplier) {
         this.constructor = menuSupplier;
     }
 
@@ -42,6 +43,7 @@ public class MenuType<T extends AbstractContainerMenu> {
         return this.constructor.create(i, inventory);
     }
 
+    public // Blueberry
     interface MenuSupplier<T extends AbstractContainerMenu> {
         T create(int var1, Inventory var2);
     }
diff --git a/src/main/java/net/minecraft/world/item/Item.java b/src/main/java/net/minecraft/world/item/Item.java
index 159f2f3a86a3e5b60e2ab7501286191e5fe4a2ee..741c16dda4310988fa3ba5f15a056c264f5f4928 100644
--- a/src/main/java/net/minecraft/world/item/Item.java
+++ b/src/main/java/net/minecraft/world/item/Item.java
@@ -95,6 +95,7 @@ public class Item implements ItemLike {
             }
         }
 
+        this.renderer = properties.renderer; // Blueberry
     }
 
     public void onUseTick(Level level, LivingEntity livingEntity, ItemStack itemStack, int i) {
@@ -373,6 +374,15 @@ public class Item implements ItemLike {
         return true;
     }
 
+    // Blueberry start
+    private final java.util.function.Supplier<net.minecraft.client.renderer.BlockEntityWithoutLevelRenderer> renderer;
+
+    public final net.minecraft.client.renderer.BlockEntityWithoutLevelRenderer getRenderer() {
+        net.minecraft.client.renderer.BlockEntityWithoutLevelRenderer renderer = this.renderer != null ? this.renderer.get() : null;
+        return renderer != null ? renderer : net.minecraft.client.renderer.BlockEntityWithoutLevelRenderer.instance;
+    }
+    // Blueberry end
+
     public static class Properties {
         int maxStackSize = 64;
         int maxDamage;
@@ -384,6 +394,7 @@ public class Item implements ItemLike {
         @Nullable
         FoodProperties foodProperties;
         boolean isFireResistant;
+        java.util.function.Supplier<net.minecraft.client.renderer.BlockEntityWithoutLevelRenderer> renderer; // Blueberry
 
         public Item.Properties food(FoodProperties foodProperties) {
             this.foodProperties = foodProperties;
@@ -428,5 +439,12 @@ public class Item implements ItemLike {
             this.isFireResistant = true;
             return this;
         }
+
+        // Blueberry start
+        public Item.Properties renderer(java.util.function.Supplier<net.minecraft.client.renderer.BlockEntityWithoutLevelRenderer> renderer) {
+            this.renderer = renderer;
+            return this;
+        }
+        // Blueberry end
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BlockEntityType.java b/src/main/java/net/minecraft/world/level/block/entity/BlockEntityType.java
index a9faf85753347d14ebb59d46201696423501fd69..ff4af87064aebf1f3dbe791aed8d67cec5598b46 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BlockEntityType.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BlockEntityType.java
@@ -93,6 +93,7 @@ public class BlockEntityType<T extends BlockEntity> {
     }
 
     @FunctionalInterface
+    public // Blueberry
     interface BlockEntitySupplier<T extends BlockEntity> {
         T create(BlockPos var1, BlockState var2);
     }
