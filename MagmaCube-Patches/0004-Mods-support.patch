From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: acrylic-style <me@acrylicstyle.xyz>
Date: Thu, 14 Jan 2021 01:44:46 +0900
Subject: [PATCH] Mods support


diff --git a/src/main/java/com/mojang/blaze3d/platform/Window.java b/src/main/java/com/mojang/blaze3d/platform/Window.java
index b9da64ff83ecc1e8dbce379455e83583bce79671..2cf67b8e8e28485089052fe0e7f7f400e4e2c2a9 100644
--- a/src/main/java/com/mojang/blaze3d/platform/Window.java
+++ b/src/main/java/com/mojang/blaze3d/platform/Window.java
@@ -81,7 +81,7 @@ public final class Window implements AutoCloseable {
         GLFW.glfwWindowHint(139267, 2);
         GLFW.glfwWindowHint(139272, 204801);
         GLFW.glfwWindowHint(139270, 1);
-        this.window = GLFW.glfwCreateWindow(this.width, this.height, s2, this.fullscreen && monitor != null ? monitor.getMonitor() : 0L, 0L);
+        this.window = net.blueberrymc.client.EarlyLoadingScreen.getInstance().acquireWindowOrGet(() -> GLFW.glfwCreateWindow(this.width, this.height, s2, this.fullscreen && monitor != null ? monitor.getMonitor() : 0L, 0L));
         if (monitor != null) {
             VideoMode videoMode = monitor.getPreferredVidMode(this.fullscreen ? this.preferredFullscreenVideoMode : Optional.empty());
             this.windowedX = this.x = monitor.getX() + videoMode.getWidth() / 2 - this.width / 2;
diff --git a/src/main/java/net/blueberrymc/client/BlueberryClientImpl.java b/src/main/java/net/blueberrymc/client/BlueberryClientImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..82f560b47ec3def0c2ddf248a4005dfb28538ded
--- /dev/null
+++ b/src/main/java/net/blueberrymc/client/BlueberryClientImpl.java
@@ -0,0 +1,21 @@
+package net.blueberrymc.client;
+
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.screens.MenuScreens;
+import net.minecraft.client.gui.screens.Screen;
+import net.minecraft.client.gui.screens.inventory.MenuAccess;
+import net.minecraft.client.renderer.blockentity.BlockEntityRenderer;
+import net.minecraft.world.inventory.AbstractContainerMenu;
+import net.minecraft.world.inventory.MenuType;
+import net.minecraft.world.level.block.entity.BlockEntityType;
+import org.jetbrains.annotations.NotNull;
+
+public class BlueberryClientImpl extends BlueberryClient {
+    public void registerSpecialBlockEntityRenderer(@NotNull BlockEntityType<?> blockEntityType, @NotNull BlockEntityRenderer<?> blockEntityRenderer) {
+        Minecraft.getInstance().getBlockEntityRenderDispatcher().registerSpecialRenderer(blockEntityType, blockEntityRenderer);
+    }
+
+    public <M extends AbstractContainerMenu, U extends Screen & MenuAccess<M>> void registerMenuScreensFactory(@NotNull MenuType<? extends M> menuType, @NotNull ScreenConstructor<M, U> screenConstructor) {
+        MenuScreens.register(menuType, screenConstructor::create);
+    }
+}
diff --git a/src/main/java/net/blueberrymc/server/BlueberryServerImpl.java b/src/main/java/net/blueberrymc/server/BlueberryServerImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..7b1e2686690e9d7df32131010891223b24eb568f
--- /dev/null
+++ b/src/main/java/net/blueberrymc/server/BlueberryServerImpl.java
@@ -0,0 +1,4 @@
+package net.blueberrymc.server;
+
+public class BlueberryServerImpl extends BlueberryServer {
+}
diff --git a/src/main/java/net/minecraft/CrashReport.java b/src/main/java/net/minecraft/CrashReport.java
index 18d790873a57c1a38abca9874d170eee7d4abfd4..c330c712b76b836eb964d62914095364318900fd 100644
--- a/src/main/java/net/minecraft/CrashReport.java
+++ b/src/main/java/net/minecraft/CrashReport.java
@@ -227,6 +227,6 @@ public class CrashReport {
 
     public static void preload() {
         MemoryReserve.allocate();
-        (new CrashReport("Don't panic!", new Throwable())).getFriendlyReport();
+        LOGGER.info((new CrashReport("Don't panic!", new Throwable())).getFriendlyReport()); // Blueberry
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/SystemReport.java b/src/main/java/net/minecraft/SystemReport.java
index d407afcacaad89de4836abdc8a975f73570614ef..e87e91bc99e99b69b7f319f3bf3f4d2fc55beaef 100644
--- a/src/main/java/net/minecraft/SystemReport.java
+++ b/src/main/java/net/minecraft/SystemReport.java
@@ -49,6 +49,26 @@ public class SystemReport {
             List<String> list = Util.getVmArguments().collect(Collectors.toList());
             return String.format(Locale.ROOT, "%d total; %s", list.size(), String.join(" ", list));
         }));
+        // Blueberry start
+        this.setDetail("Blueberry Version", net.blueberrymc.common.util.Versioning.getVersion().getFullyQualifiedVersion());
+        this.setDetail("Blueberry commit", net.blueberrymc.common.util.Versioning.getVersion().getCommit());
+        // TODO: we need better layout
+        this.setDetail("Mods", () -> {
+            StringBuilder sb = new StringBuilder("\n");
+            sb.append("      Status:\n");
+            sb.append("        L = Loaded\n");
+            sb.append("        P = Pre Init\n");
+            sb.append("        I = Init\n");
+            sb.append("        J = Post Init\n");
+            sb.append("        A = Available\n");
+            sb.append("        E = Errored\n");
+            sb.append("        U = Unloaded\n");
+            for (net.blueberrymc.common.bml.BlueberryMod mod : net.blueberrymc.common.Blueberry.getModLoader().getLoadedMods()) {
+                sb.append("      ").append(mod.getName()).append(" (").append(mod.getDescription().getModId()).append(") [").append(mod.getDescription().getVersion()).append("] - ").append(mod.getStateList().toString()).append("\n");
+            }
+            return sb.toString();
+        });
+        // Blueberry end
     }
 
     public void setDetail(String s, String s2) {
diff --git a/src/main/java/net/minecraft/client/Minecraft.java b/src/main/java/net/minecraft/client/Minecraft.java
index 695dbb5f052dbd92b9c97bddb867b07deb7e8efd..d2c229a4e6489d9a5b960db1875b06c096733974 100644
--- a/src/main/java/net/minecraft/client/Minecraft.java
+++ b/src/main/java/net/minecraft/client/Minecraft.java
@@ -454,7 +454,9 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
         this.mainRenderTarget = new MainTarget(this.window.getWidth(), this.window.getHeight());
         this.mainRenderTarget.setClearColor(0.0F, 0.0F, 0.0F, 0.0F);
         this.mainRenderTarget.clear(ON_OSX);
+        net.blueberrymc.client.EarlyLoadingScreen.getInstance().startRender(false); // Blueberry
         this.resourceManager = new ReloadableResourceManager(PackType.CLIENT_RESOURCES);
+        net.blueberrymc.common.Blueberry.getModLoader().callPreInit(); // Blueberry
         this.resourcePackRepository.reload();
         this.options.loadSelectedResourcePacks(this.resourcePackRepository);
         this.languageManager = new LanguageManager(this.options.languageCode);
@@ -470,6 +472,7 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
         this.splashManager = new SplashManager(this.user);
         this.resourceManager.registerReloadListener(this.splashManager);
         this.musicManager = new MusicManager(this);
+        net.blueberrymc.client.EarlyLoadingScreen.getInstance().blockUntilFinish(); // Blueberry
         this.fontManager = new FontManager(this.textureManager);
         this.font = this.fontManager.createFont();
         this.fontFilterFishy = this.fontManager.createFontFilterFishy();
@@ -489,6 +492,7 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
         this.blockEntityRenderDispatcher = new BlockEntityRenderDispatcher(this.font, this.entityModels, this::getBlockRenderer, this::getItemRenderer, this::getEntityRenderDispatcher);
         this.resourceManager.registerReloadListener(this.blockEntityRenderDispatcher);
         BlockEntityWithoutLevelRenderer blockEntityWithoutLevelRenderer = new BlockEntityWithoutLevelRenderer(this.blockEntityRenderDispatcher, this.entityModels);
+        BlockEntityWithoutLevelRenderer.instance = blockEntityWithoutLevelRenderer; // Blueberry
         this.resourceManager.registerReloadListener(blockEntityWithoutLevelRenderer);
         this.itemRenderer = new ItemRenderer(this, this.textureManager, this.modelManager, this.itemColors, blockEntityWithoutLevelRenderer);
         this.resourceManager.registerReloadListener(this.itemRenderer);
@@ -548,6 +552,7 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
         this.reportingContext = ReportingContext.create(ReportEnvironment.local(), this.userApiService);
         LoadingOverlay.registerTextures(this);
         List<PackResources> list = this.resourcePackRepository.openAllSelected();
+        net.blueberrymc.common.Blueberry.getModLoader().callInit(); // Blueberry
         this.reloadStateTracker.startReload(ResourceLoadStateTracker.ReloadReason.INITIAL, list);
         ReloadInstance reloadInstance = this.resourceManager.createReload(Util.backgroundExecutor(), this, RESOURCE_RELOAD_INITIAL_TASK, list);
         GameLoadTimesEvent.INSTANCE.beginStep(TelemetryProperty.LOAD_TIME_LOADING_OVERLAY_MS);
@@ -561,6 +566,7 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
             }), false));
         this.quickPlayLog = QuickPlayLog.of(gameConfig.quickPlay.path());
         if (this.shouldShowBanNotice()) {
+            this.setScreen(new net.blueberrymc.common.bml.client.gui.screens.ModLoadingProblemScreen(() -> { // Blueberry
             this.setScreen(BanNoticeScreen.create((flag) -> {
                 if (flag) {
                     Util.getPlatform().openUri("https://aka.ms/mcjavamoderation");
@@ -568,6 +574,7 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
 
                 this.setInitialScreen(realmsClient, reloadInstance, gameConfig.quickPlay);
             }, this.multiplayerBan()));
+            })); // Blueberry
         } else {
             this.setInitialScreen(realmsClient, reloadInstance, gameConfig.quickPlay);
         }
@@ -586,7 +593,7 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
         } else if (this.options.onboardAccessibility) {
             this.setScreen(new AccessibilityOnboardingScreen(this.options));
         } else {
-            this.setScreen(new TitleScreen(true));
+            this.setScreen(new net.blueberrymc.common.bml.client.gui.screens.ModLoadingProblemScreen(new TitleScreen())); // Blueberry
         }
 
     }
@@ -780,9 +787,10 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
     }
 
     public static void crash(CrashReport crashReport) {
-        File crashReportsDir = new File(getInstance().gameDirectory, "crash-reports");
+        File crashReportsDir = new File(instance == null ? new File(".") : getInstance().gameDirectory, "crash-reports"); // Blueberry
         File crashReportFile = new File(crashReportsDir, "crash-" + Util.getFilenameFormattedDateTime() + "-client.txt");
         Bootstrap.realStdoutPrintln(crashReport.getFriendlyReport());
+        net.blueberrymc.common.util.DiscordRPCTaskExecutor.shutdownNow(); // Blueberry
         if (crashReport.getSaveFile() != null) {
             Bootstrap.realStdoutPrintln("#@!@# Game crashed! Crash report saved to: #@!@# " + crashReport.getSaveFile());
             System.exit(-1);
@@ -939,6 +947,7 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
         }
 
         BufferUploader.reset();
+        net.blueberrymc.client.event.ClientEventFactory.callScreenChangedEvent(this.screen); // Blueberry
         if (screen != null) {
             this.mouseHandler.releaseMouse();
             KeyMapping.releaseAll();
@@ -954,6 +963,7 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
 
     public void setOverlay(@Nullable Overlay overlay) {
         this.overlay = overlay;
+        net.blueberrymc.client.event.ClientEventFactory.callOverlayChangedEvent(overlay); // Blueberry
     }
 
     public void destroy() {
@@ -978,6 +988,7 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
                 this.screen.removed();
             }
 
+            net.blueberrymc.common.Blueberry.shutdown();
             this.close();
         } finally {
             Util.timeSource = System::nanoTime;
@@ -1772,6 +1783,10 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
             this.pendingConnection.tick();
         }
 
+        // Blueberry start
+        this.profiler.popPush("blueberryClientScheduler");
+        net.blueberrymc.common.Blueberry.getUtil().getClientScheduler().tick();
+        // Blueberry end
         this.profiler.popPush("keyboard");
         this.keyboardHandler.tick();
         this.profiler.pop();
@@ -2758,4 +2773,4 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
 
         public abstract boolean isChatAllowed(boolean var1);
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/gui/components/ChatComponent.java b/src/main/java/net/minecraft/client/gui/components/ChatComponent.java
index b4f13bce60a49df5f721cfc7346baade88690ab6..57e814e56b258d88d4bcfc1b7e9db36727f04347 100644
--- a/src/main/java/net/minecraft/client/gui/components/ChatComponent.java
+++ b/src/main/java/net/minecraft/client/gui/components/ChatComponent.java
@@ -442,15 +442,27 @@ public class ChatComponent {
     }
 
     public static int getWidth(double d) {
+        // Blueberry start
+        int width = 320;
+        if (net.blueberrymc.common.bml.InternalBlueberryModConfig.Misc.ChatSettings.extendedWidth && Minecraft.getInstance().getWindow() != null) {
+            width = Minecraft.getInstance().getWindow().getWidth() / 2 - 8;
+        }
+        // Blueberry end
         int i = 320;
         int i2 = 40;
-        return Mth.floor(d * 280.0D + 40.0D);
+        return Mth.floor(d * width); // Blueberry
     }
 
     public static int getHeight(double d) {
+        // Blueberry start
+        int height = 180;
+        if (net.blueberrymc.common.bml.InternalBlueberryModConfig.Misc.ChatSettings.extendedHeight && Minecraft.getInstance().getWindow() != null) {
+            height = Minecraft.getInstance().getWindow().getHeight() / 2 - 40;
+        }
+        // Blueberry end
         int i = 180;
         int i2 = 20;
-        return Mth.floor(d * 160.0D + 20.0D);
+        return Mth.floor(d * height); // Blueberry
     }
 
     public static double defaultUnfocusedPct() {
diff --git a/src/main/java/net/minecraft/client/gui/components/DebugScreenOverlay.java b/src/main/java/net/minecraft/client/gui/components/DebugScreenOverlay.java
index 65bdeb11abdbfe2e6578161a8329dbbbcf9d41e4..71d754d78b307bc6d3fbaf84cddd6c6811385c03 100644
--- a/src/main/java/net/minecraft/client/gui/components/DebugScreenOverlay.java
+++ b/src/main/java/net/minecraft/client/gui/components/DebugScreenOverlay.java
@@ -62,6 +62,7 @@ import net.minecraft.world.level.levelgen.RandomState;
 import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.HitResult;
+import net.blueberrymc.common.Blueberry; // Blueberry
 
 public class DebugScreenOverlay {
     private static final int COLOR_GREY = 14737632;
@@ -348,6 +349,12 @@ public class DebugScreenOverlay {
         long l3 = Runtime.getRuntime().freeMemory();
         long l4 = l2 - l3;
         List<String> list = Lists.newArrayList(new String[]{String.format(Locale.ROOT, "Java: %s %dbit", System.getProperty("java.version"), this.minecraft.is64Bit() ? 64 : 32), String.format(Locale.ROOT, "Mem: % 2d%% %03d/%03dMB", l4 * 100L / l, bytesToMegabytes(l4), bytesToMegabytes(l)), String.format(Locale.ROOT, "Allocation rate: %03dMB /s", bytesToMegabytes(this.allocationRateCalculator.bytesAllocatedPerSecond(l4))), String.format(Locale.ROOT, "Allocated: % 2d%% %03dMB", l2 * 100L / l, bytesToMegabytes(l2)), "", String.format(Locale.ROOT, "CPU: %s", GlUtil.getCpuInfo()), "", String.format(Locale.ROOT, "Display: %dx%d (%s)", Minecraft.getInstance().getWindow().getWidth(), Minecraft.getInstance().getWindow().getHeight(), GlUtil.getVendor()), GlUtil.getRenderer(), GlUtil.getOpenGLVersion()});
+        // Blueberry start
+        list.add("");
+        list.add("MagmaCube " + Blueberry.getVersion().getShortMagmaCubeCommit());
+        list.add("Blueberry " + Blueberry.getVersion().getFullyQualifiedVersion());
+        list.add(Blueberry.getModLoader().getLoadedMods().size() + " mods loaded, " + Blueberry.getModLoader().getActiveMods().size() + " mods active");
+        // Blueberry end
         if (this.minecraft.showOnlyReducedInfo()) {
             return list;
         } else {
@@ -528,4 +535,4 @@ public class DebugScreenOverlay {
             return l;
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/gui/font/FontManager.java b/src/main/java/net/minecraft/client/gui/font/FontManager.java
index efc36b080d2cccb9c744351e59956b29981360d4..aee7c6eb66b8c86c16ea8f901567306abe6be24d 100644
--- a/src/main/java/net/minecraft/client/gui/font/FontManager.java
+++ b/src/main/java/net/minecraft/client/gui/font/FontManager.java
@@ -162,6 +162,7 @@ public class FontManager implements PreparableReloadListener, AutoCloseable {
         if (!this.fontSets.containsKey(this.getActualId(Minecraft.DEFAULT_FONT))) {
             throw new IllegalStateException("Default font failed to load");
         }
+        net.minecraft.client.gui.screens.LoadingOverlay.isFontReady = true; // Blueberry
     }
 
     private static List<Pair<FontManager.BuilderId, GlyphProviderDefinition>> loadResourceStack(List<Resource> list, ResourceLocation resourceLocation) {
diff --git a/src/main/java/net/minecraft/client/gui/screens/LoadingOverlay.java b/src/main/java/net/minecraft/client/gui/screens/LoadingOverlay.java
index 521a5d90d5cb22c1b81858ed4b4022d7284463d5..d53f7158eebca5e860bafdb509ed482c5f2a556c 100644
--- a/src/main/java/net/minecraft/client/gui/screens/LoadingOverlay.java
+++ b/src/main/java/net/minecraft/client/gui/screens/LoadingOverlay.java
@@ -25,6 +25,7 @@ import net.minecraft.util.FastColor;
 import net.minecraft.util.Mth;
 
 public class LoadingOverlay extends Overlay {
+    public static boolean isFontReady = false; // Blueberry
     static final ResourceLocation MOJANG_STUDIOS_LOGO_LOCATION = new ResourceLocation("textures/gui/title/mojangstudios.png");
     private static final int LOGO_BACKGROUND_COLOR = FastColor.ARGB32.color(255, 239, 50, 61);
     private static final int LOGO_BACKGROUND_COLOR_DARK = FastColor.ARGB32.color(255, 0, 0, 0);
@@ -116,6 +117,7 @@ public class LoadingOverlay extends Overlay {
         RenderSystem.depthMask(true);
         RenderSystem.enableDepthTest();
         int i12 = (int)((double)guiGraphics.guiHeight() * 0.8325D);
+        net.blueberrymc.client.EarlyLoadingScreen.getInstance().renderMessagesFromGUI(guiGraphics); // Blueberry
         float f10 = this.reload.getActualProgress();
         this.currentProgress = Mth.clamp(this.currentProgress * 0.95F + f10 * 0.050000012F, 0.0F, 1.0F);
         if (f2 < 1.0F) {
@@ -123,6 +125,7 @@ public class LoadingOverlay extends Overlay {
         }
 
         if (f2 >= 2.0F) {
+            net.blueberrymc.common.Blueberry.getModLoader().callPostInit(); // Blueberry
             this.minecraft.setOverlay((Overlay)null);
         }
 
@@ -136,6 +139,7 @@ public class LoadingOverlay extends Overlay {
 
             this.fadeOutStart = Util.getMillis();
             if (this.minecraft.screen != null) {
+                if (this.minecraft.screen instanceof net.blueberrymc.common.bml.client.gui.screens.ModLoadingProblemScreen) ((net.blueberrymc.common.bml.client.gui.screens.ModLoadingProblemScreen) minecraft.screen).refresh(); // Blueberry
                 this.minecraft.screen.init(this.minecraft, guiGraphics.guiWidth(), guiGraphics.guiHeight());
             }
         }
@@ -197,4 +201,4 @@ public class LoadingOverlay extends Overlay {
             }
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/gui/screens/PauseScreen.java b/src/main/java/net/minecraft/client/gui/screens/PauseScreen.java
index 43982f04fcbd2465a6977c7e4cf6171a063718e2..aa038c468e4b52e6902268c5dacf1e478252a2e5 100644
--- a/src/main/java/net/minecraft/client/gui/screens/PauseScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/PauseScreen.java
@@ -80,6 +80,7 @@ public class PauseScreen extends Screen {
         gridLayout.arrangeElements();
         FrameLayout.alignInRectangle(gridLayout, 0, 0, this.width, this.height, 0.5F, 0.25F);
         gridLayout.visitWidgets(this::addRenderableWidget);
+        this.addRenderableWidget(Button.builder(net.blueberrymc.common.resources.BlueberryText.text("blueberry", "gui.screens.mods"), (buttonx) -> net.blueberrymc.client.gui.screens.ModListScreen.switchToModListScreen()).bounds(this.width / 2 - 102, this.height / 4 + 144 - 16, 204, 20).build()); // Blueberry (TODO)
     }
 
     private void onDisconnect() {
diff --git a/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java b/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java
index f2d82c4cae6215e16563c2542853a26bc22117dc..bfc10af4b319dd1cd34b5b5060eeae74a6ae26ea 100644
--- a/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java
@@ -10,6 +10,9 @@ import java.util.Objects;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
 import javax.annotation.Nullable;
+
+import net.blueberrymc.client.gui.screens.ModListScreen;
+import net.blueberrymc.common.resources.BlueberryText;
 import net.minecraft.SharedConstants;
 import net.minecraft.Util;
 import net.minecraft.client.Minecraft;
@@ -143,7 +146,10 @@ public class TitleScreen extends Screen {
             Screen screen = (Screen)(this.minecraft.options.skipMultiplayerWarning ? new JoinMultiplayerScreen(this) : new SafetyScreen(this));
             this.minecraft.setScreen(screen);
         }).bounds(this.width / 2 - 100, i + i2 * 1, 200, 20).tooltip(tooltip).build())).active = flag;
-        (this.addRenderableWidget(Button.builder(Component.translatable("menu.online"), (button) -> this.realmsButtonClicked()).bounds(this.width / 2 - 100, i + i2 * 2, 200, 20).tooltip(tooltip).build())).active = flag;
+        // Blueberry start
+        (this.addRenderableWidget(Button.builder(BlueberryText.text("blueberry", "gui.screens.mods"), (button) -> ModListScreen.switchToModListScreen()).bounds(this.width / 2 - 100, i + i2 * 2, 98, 20).tooltip(tooltip).build())).active = flag;
+        (this.addRenderableWidget(Button.builder(Component.translatable("menu.online"), (button) -> this.realmsButtonClicked()).bounds(this.width / 2 + 2, i + i2 * 2, 98, 20).tooltip(tooltip).build())).active = flag;
+        // Blueberry end
     }
 
     @Nullable
@@ -274,8 +280,12 @@ public class TitleScreen extends Screen {
                 s = s + I18n.get("menu.modded");
             }
 
-            guiGraphics.drawString(this.font, s, 2, this.height - 10, 16777215 | i3);
-            guiGraphics.drawString(this.font, "MagmaCube " + ((net.minecraft.DetectedVersion) SharedConstants.getCurrentVersion()).magmaCubeVersion, 2, this.height - 20, 0xFFFFFF | i3); // MagmaCube
+            // Blueberry start
+            guiGraphics.drawString(this.font, "Blueberry " + net.blueberrymc.common.Blueberry.getVersion().getFullyQualifiedVersion(), 2, this.height - 40, 0xFFFFFF | i3);
+            guiGraphics.drawString(this.font, "MagmaCube " + net.blueberrymc.common.util.Versioning.getVersion().getShortMagmaCubeCommit(), 2, this.height - 30, 0xFFFFFF | i3); // MagmaCube // Blueberry - offset 20 -> 30
+            guiGraphics.drawString(this.font, s, 2, this.height - 20, 16777215 | i3); // Blueberry - offset 10 -> 20
+            guiGraphics.drawString(this.font, net.blueberrymc.common.Blueberry.getModLoader().getLoadedMods().size() + " mods loaded, " + net.blueberrymc.common.Blueberry.getModLoader().getActiveMods().size() + " mods active", 2, this.height - 10, 0xFFFFFF | i3);
+            // Blueberry end
 
             for(GuiEventListener guiEventListener : this.children()) {
                 if (guiEventListener instanceof AbstractWidget) {
diff --git a/src/main/java/net/minecraft/client/gui/screens/multiplayer/ServerSelectionList.java b/src/main/java/net/minecraft/client/gui/screens/multiplayer/ServerSelectionList.java
index 413181a89aad4b51149fd98642cb025dfaf8c1e7..eaddb273ffc76d6f9e1c0c0f4188285eec080e4f 100644
--- a/src/main/java/net/minecraft/client/gui/screens/multiplayer/ServerSelectionList.java
+++ b/src/main/java/net/minecraft/client/gui/screens/multiplayer/ServerSelectionList.java
@@ -282,6 +282,12 @@ public class ServerSelectionList extends ObjectSelectionList<ServerSelectionList
             }
 
             guiGraphics.blit(ServerSelectionList.GUI_ICONS_LOCATION, i3 + i4 - 15, i2, (float)(i10 * 10), (float)(176 + i11 * 8), 10, 8, 256, 256);
+            // Blueberry start
+            if (serverData.serverType != null) {
+//                RenderSystem.setShader(net.minecraft.client.renderer.GameRenderer::getPositionTexColorShader);
+                guiGraphics.blit(net.blueberrymc.client.gui.BlueberryGuiComponents.GUI_ICONS_LOCATION, i3 + i4 - 18, i2 + 8, (float) 0.0F, (float) (serverData.serverType.getOffset() * 16), 16, 16, 256, 256);
+            }
+            // Blueberry end
             byte[] bytes = this.serverData.getIconBytes();
             if (!Arrays.equals(bytes, this.lastIconBytes)) {
                 if (this.uploadServerIcon(bytes)) {
@@ -297,6 +303,12 @@ public class ServerSelectionList extends ObjectSelectionList<ServerSelectionList
             int i20 = i7 - i2;
             if (i19 >= i4 - 15 && i19 <= i4 - 5 && i20 >= 0 && i20 <= 8) {
                 this.screen.setToolTip(Collections.singletonList(component2));
+                // Blueberry start
+            } else if (serverData.serverType != null && i19 >= i4 - 18 && i19 <= i4 - 5 && i20 >= 0 && i20 <= 22) {
+                String text = serverData.serverType.getBlueberryText().getContents();
+                if (text.contains("%d")) text = String.format(text, serverData.modsCount);
+                this.screen.setToolTip(Collections.singletonList(Component.literal(text)));
+                // Blueberry end
             } else if (i19 >= i4 - i9 - 15 - 2 && i19 <= i4 - 15 - 2 && i20 >= 0 && i20 <= 8) {
                 this.screen.setToolTip(list2);
             }
@@ -464,4 +476,4 @@ public class ServerSelectionList extends ObjectSelectionList<ServerSelectionList
             this.icon.close();
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/main/Main.java b/src/main/java/net/minecraft/client/main/Main.java
index 9a699b02e84c3415684c69c21e2f4cc7637d05d8..e8d208685b15c3697d869be233214e9ef7818b94 100644
--- a/src/main/java/net/minecraft/client/main/Main.java
+++ b/src/main/java/net/minecraft/client/main/Main.java
@@ -54,8 +54,8 @@ public class Main {
         Stopwatch stopwatch2 = Stopwatch.createStarted(Ticker.systemTicker());
         GameLoadTimesEvent.INSTANCE.beginStep(TelemetryProperty.LOAD_TIME_TOTAL_TIME_MS, stopwatch);
         GameLoadTimesEvent.INSTANCE.beginStep(TelemetryProperty.LOAD_TIME_PRE_WINDOW_MS, stopwatch2);
-        SharedConstants.tryDetectVersion();
-        SharedConstants.enableDataFixerOptimizations();
+        //SharedConstants.tryDetectVersion(); // Blueberry - moved below
+        //SharedConstants.enableDataFixerOptimizations(); // Blueberry - moved below
         OptionParser optionParser = new OptionParser();
         optionParser.allowsUnrecognizedOptions();
         optionParser.accepts("demo");
@@ -96,6 +96,12 @@ public class Main {
         if (!list.isEmpty()) {
             System.out.println("Completely ignored arguments: " + list);
         }
+        // Blueberry start
+        net.blueberrymc.common.Blueberry.preBootstrap();
+        net.blueberrymc.common.Blueberry.bootstrap(new net.blueberrymc.client.BlueberryClientImpl());
+        SharedConstants.tryDetectVersion();
+        SharedConstants.enableDataFixerOptimizations();
+        // Blueberry end
 
         String s = parseArgument(optionSet, optionSpec9);
         Proxy proxy = Proxy.NO_PROXY;
@@ -266,4 +272,4 @@ public class Main {
     static {
         System.setProperty("java.awt.headless", "true");
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java b/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
index fe7aea662d366934ba52a612f3c1b8dacc7d5fee..2cc69a71245f10bb3ea9565c92ea3b95a3fc1d15 100644
--- a/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
+++ b/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
@@ -317,7 +317,7 @@ import net.minecraft.world.scores.Team;
 import net.minecraft.world.scores.criteria.ObjectiveCriteria;
 import org.slf4j.Logger;
 
-public class ClientPacketListener implements TickablePacketListener, ClientGamePacketListener {
+public class ClientPacketListener implements TickablePacketListener, ClientGamePacketListener, net.blueberrymc.network.client.ClientBlueberryPacketListener { // Blueberry
     private static final Logger LOGGER = LogUtils.getLogger();
     private static final Component GENERIC_DISCONNECT_MESSAGE = Component.translatable("disconnect.lost");
     private static final Component UNSECURE_SERVER_TOAST_TITLE = Component.translatable("multiplayer.unsecureserver.toast.title");
@@ -1843,6 +1843,7 @@ public class ClientPacketListener implements TickablePacketListener, ClientGameP
 
         try {
             friendlyByteBuf = clientboundCustomPayloadPacket.getData();
+            if (net.blueberrymc.network.client.ClientBlueberryPacketListener.super.handleBlueberryCustomPayload(clientboundCustomPayloadPacket)) return; // Blueberry
             if (ClientboundCustomPayloadPacket.BRAND.equals(resourceLocation)) {
                 String s = friendlyByteBuf.readUtf();
                 this.minecraft.player.setServerBrand(s);
diff --git a/src/main/java/net/minecraft/client/multiplayer/ServerData.java b/src/main/java/net/minecraft/client/multiplayer/ServerData.java
index 22b90d00337e5b50339a335ff9fd63b7e03a0efe..96211e4315314e3d22118cd14f63fda17daa7ee2 100644
--- a/src/main/java/net/minecraft/client/multiplayer/ServerData.java
+++ b/src/main/java/net/minecraft/client/multiplayer/ServerData.java
@@ -29,6 +29,10 @@ public class ServerData {
     private byte[] iconBytes;
     private boolean lan;
     private boolean enforcesSecureChat;
+    // Blueberry start
+    public net.blueberrymc.network.ServerType serverType = null;
+    public int modsCount = 0;
+    // Blueberry end
 
     public ServerData(String s, String s2, boolean flag) {
         this.name = s;
diff --git a/src/main/java/net/minecraft/client/multiplayer/ServerStatusPinger.java b/src/main/java/net/minecraft/client/multiplayer/ServerStatusPinger.java
index 58e4fe8432dc112599251ceaa56266be7dec1d24..86f699f2ef6655a1afc7f0c4431b57f9e93b57d1 100644
--- a/src/main/java/net/minecraft/client/multiplayer/ServerStatusPinger.java
+++ b/src/main/java/net/minecraft/client/multiplayer/ServerStatusPinger.java
@@ -75,6 +75,7 @@ public class ServerStatusPinger {
                         connection.disconnect(Component.translatable("multiplayer.status.unrequested"));
                     } else {
                         this.receivedPing = true;
+                        serverData.serverType = net.blueberrymc.network.ServerType.VANILLA; // Blueberry
                         ServerStatus serverStatus = clientboundStatusResponsePacket.status();
                         serverData.motd = serverStatus.description();
                         serverStatus.version().ifPresentOrElse((version) -> {
@@ -132,6 +133,19 @@ public class ServerStatusPinger {
 
                 }
 
+                // Blueberry start
+                @Override
+                public void handleBlueberryHandshakeResponse(net.blueberrymc.network.client.handshake.ClientboundBlueberryHandshakePacket packet) {
+                    boolean compatible = net.blueberrymc.common.util.ListUtils.isCompatible(packet.getModInfos(), net.blueberrymc.common.Blueberry.getModLoader().getModInfos());
+                    if (compatible) {
+                        serverData.serverType = net.blueberrymc.network.ServerType.BLUEBERRY_GOOD;
+                    } else {
+                        serverData.serverType = net.blueberrymc.network.ServerType.BLUEBERRY_BAD;
+                    }
+                    serverData.modsCount = packet.getModInfos().size();
+                }
+                // Blueberry end
+
                 public boolean isAcceptingMessages() {
                     return connection.isConnected();
                 }
diff --git a/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java b/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java
index 4acc03a2324e30d5a69a9dcd58ca1eb8fffcb1c0..6f9ec7a06b30d96aeb55812626161d12f387f8bf 100644
--- a/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java
@@ -58,6 +58,7 @@ import net.minecraft.world.level.block.state.BlockState;
 public class BlockEntityWithoutLevelRenderer implements ResourceManagerReloadListener {
     private static final ShulkerBoxBlockEntity[] SHULKER_BOXES = (ShulkerBoxBlockEntity[])Arrays.stream(DyeColor.values()).sorted(Comparator.comparingInt(DyeColor::getId)).map((dyeColor) -> new ShulkerBoxBlockEntity(dyeColor, BlockPos.ZERO, Blocks.SHULKER_BOX.defaultBlockState())).toArray((i) -> new ShulkerBoxBlockEntity[i]);
     private static final ShulkerBoxBlockEntity DEFAULT_SHULKER_BOX = new ShulkerBoxBlockEntity(BlockPos.ZERO, Blocks.SHULKER_BOX.defaultBlockState());
+    public static BlockEntityWithoutLevelRenderer instance; // Blueberry
     private final ChestBlockEntity chest = new ChestBlockEntity(BlockPos.ZERO, Blocks.CHEST.defaultBlockState());
     private final ChestBlockEntity trappedChest = new TrappedChestBlockEntity(BlockPos.ZERO, Blocks.TRAPPED_CHEST.defaultBlockState());
     private final EnderChestBlockEntity enderChest = new EnderChestBlockEntity(BlockPos.ZERO, Blocks.ENDER_CHEST.defaultBlockState());
diff --git a/src/main/java/net/minecraft/client/renderer/block/BlockRenderDispatcher.java b/src/main/java/net/minecraft/client/renderer/block/BlockRenderDispatcher.java
index 157c6e27fa7a6711626b0f2fa85d9c0242868dc6..78fc1fa63f40195db6614a25ac7fa67f125b2824 100644
--- a/src/main/java/net/minecraft/client/renderer/block/BlockRenderDispatcher.java
+++ b/src/main/java/net/minecraft/client/renderer/block/BlockRenderDispatcher.java
@@ -97,7 +97,10 @@ public class BlockRenderDispatcher implements ResourceManagerReloadListener {
                 this.modelRenderer.renderModel(poseStack.last(), multiBufferSource.getBuffer(ItemBlockRenderTypes.getRenderType(blockState, false)), blockState, bakedModel, f, f2, f3, i, i2);
                 break;
             case ENTITYBLOCK_ANIMATED:
-                this.blockEntityRenderer.renderByItem(new ItemStack(blockState.getBlock()), ItemDisplayContext.NONE, poseStack, multiBufferSource, i, i2);
+                // Blueberry start
+                ItemStack stack = new ItemStack(blockState.getBlock());
+                stack.getItem().getRenderer().renderByItem(stack, ItemDisplayContext.NONE, poseStack, multiBufferSource, i, i2);
+                // Blueberry end
             }
 
         }
@@ -105,5 +108,6 @@ public class BlockRenderDispatcher implements ResourceManagerReloadListener {
 
     public void onResourceManagerReload(ResourceManager resourceManager) {
         this.liquidBlockRenderer.setupSprites();
+        net.blueberrymc.client.world.level.fluid.FluidSpriteManager.setupSprites(); // Blueberry
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/renderer/block/LiquidBlockRenderer.java b/src/main/java/net/minecraft/client/renderer/block/LiquidBlockRenderer.java
index 0aacf75ace7d940e35751e92a82e5473c652b147..53dc1b94980455629fb37b1a985b3f34d9382e7b 100644
--- a/src/main/java/net/minecraft/client/renderer/block/LiquidBlockRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/block/LiquidBlockRenderer.java
@@ -67,6 +67,10 @@ public class LiquidBlockRenderer {
         boolean flag = fluidState.is(FluidTags.LAVA);
         TextureAtlasSprite[] textureAtlasSprites = flag ? this.lavaIcons : this.waterIcons;
         int i = flag ? 16777215 : BiomeColors.getAverageWaterColor(blockAndTintGetter, blockPos);
+        // Blueberry start
+        net.blueberrymc.client.event.render.LiquidBlockRenderEvent event = net.blueberrymc.client.event.ClientEventFactory.callLiquidBlockRenderEvent(fluidState, blockPos, i);
+        i = event.getColor();
+        // Blueberry end
         float f = (float)(i >> 16 & 255) / 255.0F;
         float f2 = (float)(i >> 8 & 255) / 255.0F;
         float f3 = (float)(i & 255) / 255.0F;
diff --git a/src/main/java/net/minecraft/client/renderer/blockentity/BlockEntityRenderDispatcher.java b/src/main/java/net/minecraft/client/renderer/blockentity/BlockEntityRenderDispatcher.java
index 5481adf92979505840ccbfa1ae721e92198e0030..70811ee71d702e913a8d4ac1ddce6256d9708ca3 100644
--- a/src/main/java/net/minecraft/client/renderer/blockentity/BlockEntityRenderDispatcher.java
+++ b/src/main/java/net/minecraft/client/renderer/blockentity/BlockEntityRenderDispatcher.java
@@ -24,7 +24,7 @@ import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.entity.BlockEntityType;
 import net.minecraft.world.phys.HitResult;
 
-public class BlockEntityRenderDispatcher implements ResourceManagerReloadListener {
+public class BlockEntityRenderDispatcher implements ResourceManagerReloadListener, net.blueberrymc.client.renderer.blockentity.MinecraftBlockEntityRenderDispatcher { // Blueberry - implement MinecraftBlockEntityRenderDispatcher
     private Map<BlockEntityType<?>, BlockEntityRenderer<?>> renderers = ImmutableMap.of();
     private final Font font;
     private final EntityModelSet entityModelSet;
@@ -113,4 +113,11 @@ public class BlockEntityRenderDispatcher implements ResourceManagerReloadListene
         BlockEntityRendererProvider.Context context = new BlockEntityRendererProvider.Context(this, (BlockRenderDispatcher)this.blockRenderDispatcher.get(), (ItemRenderer)this.itemRenderer.get(), (EntityRenderDispatcher)this.entityRenderer.get(), this.entityModelSet, this.font);
         this.renderers = BlockEntityRenderers.createEntityRenderers(context);
     }
+
+    // Blueberry start
+    @Override
+    public final void registerSpecialRenderer(BlockEntityType<?> blockEntityType, BlockEntityRenderer<?> blockEntityRenderer) {
+        this.renderers.put(blockEntityType, blockEntityRenderer);
+    }
+    // Blueberry end
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/renderer/blockentity/BlockEntityRenderers.java b/src/main/java/net/minecraft/client/renderer/blockentity/BlockEntityRenderers.java
index a3d95cee1437135ff16e4893be7d214d0c889f41..55a3195576046cc4f7b91cea67d251868643a401 100644
--- a/src/main/java/net/minecraft/client/renderer/blockentity/BlockEntityRenderers.java
+++ b/src/main/java/net/minecraft/client/renderer/blockentity/BlockEntityRenderers.java
@@ -11,7 +11,8 @@ import net.minecraft.world.level.block.entity.BlockEntityType;
 public class BlockEntityRenderers {
     private static final Map<BlockEntityType<?>, BlockEntityRendererProvider<?>> PROVIDERS = Maps.newHashMap();
 
-    private static <T extends BlockEntity> void register(BlockEntityType<? extends T> blockEntityType, BlockEntityRendererProvider<T> blockEntityRendererProvider) {
+    // Blueberry - private -> public
+    public static <T extends BlockEntity> void register(BlockEntityType<? extends T> blockEntityType, BlockEntityRendererProvider<T> blockEntityRendererProvider) {
         PROVIDERS.put(blockEntityType, blockEntityRendererProvider);
     }
 
diff --git a/src/main/java/net/minecraft/client/renderer/debug/DebugRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/DebugRenderer.java
index ad7bf5e4d35994329327200e98b8897fc36309cf..060f558e1da7b410e89fbd4d83cf050b511698d0 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/DebugRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/DebugRenderer.java
@@ -19,6 +19,7 @@ import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.EntityHitResult;
 import net.minecraft.world.phys.Vec3;
 import org.joml.Matrix4f;
+import static net.blueberrymc.common.bml.InternalBlueberryModConfig.Debug.DebugRenderers.*; // Blueberry
 
 public class DebugRenderer {
     public final PathfindingRenderer pathfindingRenderer = new PathfindingRenderer();
@@ -95,7 +96,25 @@ public class DebugRenderer {
 
     public void render(PoseStack poseStack, MultiBufferSource.BufferSource bufferSource, double d, double d2, double d3) {
         if (this.renderChunkborder && !Minecraft.getInstance().showOnlyReducedInfo()) {
-            this.chunkBorderRenderer.render(poseStack, bufferSource, d, d2, d3);
+            // Blueberry start
+            if (pathfinding) this.pathfindingRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (waterDebug) this.waterDebugRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (chunkBorder) this.chunkBorderRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (heightMap) this.heightMapRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (collisionBox) this.collisionBoxRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (neighborsUpdate) this.neighborsUpdateRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (structure) this.structureRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (lightDebug) this.lightDebugRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (worldGenAttempt) this.worldGenAttemptRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (solidFace) this.solidFaceRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (chunk) this.chunkRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (brainDebug) this.brainDebugRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (villageSectionsDebug) this.villageSectionsDebugRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (beeDebug) this.beeDebugRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (raidDebug) this.raidDebugRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (goalSelector) this.goalSelectorRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (gameTestDebug) this.gameTestDebugRenderer.render(poseStack, bufferSource, d, d2, d3);
+            // Blueberry end
         }
 
         this.gameTestDebugRenderer.render(poseStack, bufferSource, d, d2, d3);
diff --git a/src/main/java/net/minecraft/client/renderer/entity/ItemRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/ItemRenderer.java
index 75012454e79bf5efcaf3109c96479e4c7e435479..595d422cefb1927c9b449cc87affae6063a940e4 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/ItemRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/ItemRenderer.java
@@ -143,7 +143,7 @@ public class ItemRenderer implements ResourceManagerReloadListener {
 
                 this.renderModelLists(bakedModel, itemStack, i, i2, poseStack, vertexConsumer);
             } else {
-                this.blockEntityRenderer.renderByItem(itemStack, itemDisplayContext, poseStack, multiBufferSource, i, i2);
+                itemStack.getItem().getRenderer().renderByItem(itemStack, itemDisplayContext, poseStack, multiBufferSource, i, i2); // Blueberry
             }
 
             poseStack.popPose();
diff --git a/src/main/java/net/minecraft/client/resources/model/ModelBakery.java b/src/main/java/net/minecraft/client/resources/model/ModelBakery.java
index 8b2736c26a54ede6bcc4c6f8674959ced5e0d9ce..f64cf6413a13e1bece4f3376533f20af01978714 100644
--- a/src/main/java/net/minecraft/client/resources/model/ModelBakery.java
+++ b/src/main/java/net/minecraft/client/resources/model/ModelBakery.java
@@ -103,6 +103,13 @@ public class ModelBakery {
     private final Map<ResourceLocation, BakedModel> bakedTopLevelModels = Maps.newHashMap();
     private int nextModelGroup = 1;
     private final Object2IntMap<BlockState> modelGroups = Util.make(new Object2IntOpenHashMap(), (object2IntOpenHashMap) -> object2IntOpenHashMap.defaultReturnValue(-1));
+    // Blueberry start
+    private static final Set<ResourceLocation> specialModels = new java.util.HashSet<>();
+
+    public static void addSpecialModel(ResourceLocation resourceLocation) {
+        specialModels.add(resourceLocation);
+    }
+    // Blueberry end
 
     public ModelBakery(BlockColors blockColors, ProfilerFiller profilerFiller, Map<ResourceLocation, BlockModel> map, Map<ResourceLocation, List<ModelBakery.LoadedJson>> map2) {
         this.blockColors = blockColors;
@@ -133,8 +140,10 @@ public class ModelBakery {
         }
 
         profilerFiller.popPush("special");
+        new net.blueberrymc.client.event.SpecialModelRegistryEvent().callEvent(); // Blueberry
         this.loadTopLevel(ItemRenderer.TRIDENT_IN_HAND_MODEL);
         this.loadTopLevel(ItemRenderer.SPYGLASS_IN_HAND_MODEL);
+        for (ResourceLocation resourceLocation : getSpecialModels()) this.addModelToCache(resourceLocation); // Blueberry
         this.topLevelModels.values().forEach((unbakedModel) -> unbakedModel.resolveParents(this::getModel));
         profilerFiller.pop();
     }
@@ -344,6 +353,18 @@ public class ModelBakery {
         this.topLevelModels.put(modelResourceLocation, unbakedModel);
     }
 
+    // Blueberry start
+    private void addModelToCache(ResourceLocation resourceLocation) {
+        UnbakedModel unbakedModel = this.getModel(resourceLocation);
+        this.unbakedCache.put(resourceLocation, unbakedModel);
+        this.topLevelModels.put(resourceLocation, unbakedModel);
+    }
+
+    public Set<ResourceLocation> getSpecialModels() {
+        return specialModels;
+    }
+    // Blueberry end
+
     private void registerModelGroup(Iterable<BlockState> iterable) {
         int i = this.nextModelGroup++;
         iterable.forEach((blockState) -> this.modelGroups.put(blockState, i));
diff --git a/src/main/java/net/minecraft/network/ConnectionProtocol.java b/src/main/java/net/minecraft/network/ConnectionProtocol.java
index 51c67b88ac63e5043dc6695729b6eaac7bc1a92c..d4ff517b29877b8bf4c3741d1d08308f722667a6 100644
--- a/src/main/java/net/minecraft/network/ConnectionProtocol.java
+++ b/src/main/java/net/minecraft/network/ConnectionProtocol.java
@@ -207,6 +207,11 @@ public enum ConnectionProtocol implements BundlerInfo.Provider {
     STATUS(1, protocol().addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerStatusPacketListener>()).addPacket(ServerboundStatusRequestPacket.class, ServerboundStatusRequestPacket::new).addPacket(ServerboundPingRequestPacket.class, ServerboundPingRequestPacket::new)).addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<ClientStatusPacketListener>()).addPacket(ClientboundStatusResponsePacket.class, ClientboundStatusResponsePacket::new).addPacket(ClientboundPongResponsePacket.class, ClientboundPongResponsePacket::new))),
     LOGIN(2, protocol().addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<ClientLoginPacketListener>()).addPacket(ClientboundLoginDisconnectPacket.class, ClientboundLoginDisconnectPacket::new).addPacket(ClientboundHelloPacket.class, ClientboundHelloPacket::new).addPacket(ClientboundGameProfilePacket.class, ClientboundGameProfilePacket::new).addPacket(ClientboundLoginCompressionPacket.class, ClientboundLoginCompressionPacket::new).addPacket(ClientboundCustomQueryPacket.class, ClientboundCustomQueryPacket::new)).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerLoginPacketListener>()).addPacket(ServerboundHelloPacket.class, ServerboundHelloPacket::new).addPacket(ServerboundKeyPacket.class, ServerboundKeyPacket::new).addPacket(ServerboundCustomQueryPacket.class, ServerboundCustomQueryPacket::new)));
 
+    // Blueberry start
+    static {
+        ((PacketSet<ClientStatusPacketListener>) STATUS.flows.get(PacketFlow.CLIENTBOUND)).addPacket(net.blueberrymc.network.client.handshake.ClientboundBlueberryHandshakePacket.class, net.blueberrymc.network.client.handshake.ClientboundBlueberryHandshakePacket::new);
+    }
+    // Blueberry end
     public static final int NOT_REGISTERED = -1;
     private static final int MIN_PROTOCOL_ID = -1;
     private static final int MAX_PROTOCOL_ID = 2;
diff --git a/src/main/java/net/minecraft/network/protocol/status/ClientStatusPacketListener.java b/src/main/java/net/minecraft/network/protocol/status/ClientStatusPacketListener.java
index 43f39473c5ef3de9e53e6722bea6a0a58382526e..f5254cecd40e9d643cb59316e929560adb08c85d 100644
--- a/src/main/java/net/minecraft/network/protocol/status/ClientStatusPacketListener.java
+++ b/src/main/java/net/minecraft/network/protocol/status/ClientStatusPacketListener.java
@@ -2,7 +2,7 @@ package net.minecraft.network.protocol.status;
 
 import net.minecraft.network.PacketListener;
 
-public interface ClientStatusPacketListener extends PacketListener {
+public interface ClientStatusPacketListener extends PacketListener, net.blueberrymc.network.client.handshake.ClientBlueberryHandshakePacketListener { // Blueberry
     void handleStatusResponse(ClientboundStatusResponsePacket var1);
 
     void handlePongResponse(ClientboundPongResponsePacket var1);
diff --git a/src/main/java/net/minecraft/server/Bootstrap.java b/src/main/java/net/minecraft/server/Bootstrap.java
index 19b414e315dd2de49365e1273fc581673802d4bf..a756e2f92ab34517405c7a9e844d333b85f67f6d 100644
--- a/src/main/java/net/minecraft/server/Bootstrap.java
+++ b/src/main/java/net/minecraft/server/Bootstrap.java
@@ -52,6 +52,7 @@ public class Bootstrap {
                     EntitySelectorOptions.bootStrap();
                     DispenseItemBehavior.bootStrap();
                     CauldronInteraction.bootStrap();
+                    net.blueberrymc.common.event.lifecycle.RegistryBootstrappedEvent.fire(); // Blueberry
                     BuiltInRegistries.bootStrap();
                     CreativeModeTabs.validate();
                     wrapStreams();
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index 3ad26e5bdfb0bfa7c38189d9fa385e22cc752b4a..03560114dd7b0d28ff50d4de767596dc4d965279 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -67,7 +67,7 @@ public class Main {
 
     @DontObfuscate
     public static void main(String[] args) {
-        SharedConstants.tryDetectVersion();
+        //SharedConstants.tryDetectVersion(); // Blueberry - moved below
         OptionParser optionParser = new OptionParser();
         OptionSpec<Void> optionSpec = optionParser.accepts("nogui");
         OptionSpec<Void> optionSpec2 = optionParser.accepts("initSettings", "Initializes 'server.properties' and 'eula.txt', then quits");
@@ -85,6 +85,7 @@ public class Main {
         OptionSpec<Void> optionSpec14 = optionParser.accepts("jfrProfile");
         OptionSpec<Path> optionSpec15 = optionParser.accepts("pidFile").withRequiredArg().withValuesConvertedBy(new PathConverter(new PathProperties[0]));
         OptionSpec<String> optionSpec16 = optionParser.nonOptions();
+        optionParser.allowsUnrecognizedOptions(); // Blueberry
 
         try {
             OptionSet optionSet = optionParser.parse(args);
@@ -92,6 +93,11 @@ public class Main {
                 optionParser.printHelpOn(System.err);
                 return;
             }
+            // Blueberry start
+            net.blueberrymc.common.Blueberry.preBootstrap();
+            net.blueberrymc.common.Blueberry.bootstrap(new net.blueberrymc.server.BlueberryServerImpl());
+            SharedConstants.tryDetectVersion();
+            // Blueberry end
 
             Path path = (Path)optionSet.valueOf(optionSpec15);
             if (path != null) {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index e0b28c1de32fdbc558f4a9cabf3a51b139988594..c7cc5e9191bd611aa7f92ae7f8925155c3fdc1c8 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -272,6 +272,12 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             this.proxy = proxy;
             this.packRepository = packRepository;
             this.resources = new MinecraftServer.ReloadableResources(worldStem.resourceManager(), worldStem.dataPackResources());
+            // Blueberry start
+            if (net.blueberrymc.common.Blueberry.isServer()) {
+                ((net.blueberrymc.server.BlueberryServer) net.blueberrymc.common.Blueberry.getUtil()).setServer(this);
+                net.blueberrymc.common.Blueberry.getModLoader().callPreInit();
+            }
+            // Blueberry end
             this.services = services;
             if (services.profileCache() != null) {
                 services.profileCache().setExecutor(this);
@@ -287,6 +293,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             this.structureTemplateManager = new StructureTemplateManager(worldStem.resourceManager(), levelStorageAccess, dataFixer, holderGetter);
             this.serverThread = thread;
             this.executor = Util.backgroundExecutor();
+            if (net.blueberrymc.common.Blueberry.isServer()) net.blueberrymc.common.Blueberry.getModLoader().callInit(); // Blueberry
         }
     }
 
@@ -624,6 +631,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             this.nextTickTime = Util.getMillis();
             this.statusIcon = (ServerStatus.Favicon)this.loadStatusIcon().orElse(null);
             this.status = this.buildServerStatus();
+            if (net.blueberrymc.common.Blueberry.isServer()) net.blueberrymc.common.Blueberry.getModLoader().callPostInit(); // Blueberry
 
             while(this.running) {
                 long l = Util.getMillis() - this.nextTickTime;
@@ -797,6 +805,11 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             LOGGER.debug("Autosave finished");
         }
 
+        // Blueberry start
+        this.profiler.push("blueberryServerScheduler");
+        net.blueberrymc.common.Blueberry.getUtil().getServerScheduler().tick();
+        this.profiler.pop();
+        // Blueberry end
         this.profiler.push("tallying");
         long l2 = this.tickTimes[this.tickCount % 100] = Util.getNanos() - l;
         this.averageTickTime = this.averageTickTime * 0.8F + (float)l2 / 1000000.0F * 0.19999999F;
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index aaac3ce516e449d75526adf813d92fb7c652cc89..a2f3a59203096525b47fbf4c18e487d510d76888 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -498,6 +498,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
     }
 
     public void stopServer() {
+        net.blueberrymc.common.Blueberry.shutdown(); // Blueberry
         super.stopServer();
         Util.shutdownExecutors();
         SkullBlockEntity.clear();
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index d79b16c0ef7b853065bc3c691cc2ba733093fd48..64c5915783ac713f0a1068fd6e38d4653151d552 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -184,7 +184,7 @@ import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
 import org.slf4j.Logger;
 
-public class ServerGamePacketListenerImpl implements ServerPlayerConnection, TickablePacketListener, ServerGamePacketListener {
+public class ServerGamePacketListenerImpl implements ServerPlayerConnection, TickablePacketListener, ServerGamePacketListener, net.blueberrymc.network.server.ServerBlueberryPacketListener { // Blueberry
     static final Logger LOGGER = LogUtils.getLogger();
     private static final int LATENCY_CHECK_INTERVAL = 15000;
     public static final double MAX_INTERACTION_DISTANCE = Mth.square(6.0D);
@@ -1646,6 +1646,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
     }
 
     public void handleCustomPayload(ServerboundCustomPayloadPacket serverboundCustomPayloadPacket) {
+        if (net.blueberrymc.network.server.ServerBlueberryPacketListener.super.handleBlueberryCustomPayload(serverboundCustomPayloadPacket)) return; // Blueberry
     }
 
     public void handleChangeDifficulty(ServerboundChangeDifficultyPacket serverboundChangeDifficultyPacket) {
diff --git a/src/main/java/net/minecraft/server/network/ServerStatusPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerStatusPacketListenerImpl.java
index 0cdd177d5d11decde9c5484f270f3b8ff291dd38..87e9c917dbd00285054ebfdc361a9b83efab5b2c 100644
--- a/src/main/java/net/minecraft/server/network/ServerStatusPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerStatusPacketListenerImpl.java
@@ -33,6 +33,7 @@ public class ServerStatusPacketListenerImpl implements ServerStatusPacketListene
         } else {
             this.hasRequestedStatus = true;
             this.connection.send(new ClientboundStatusResponsePacket(this.status));
+            this.connection.send(new net.blueberrymc.network.client.handshake.ClientboundBlueberryHandshakePacket(net.blueberrymc.common.Blueberry.getModLoader().getModInfos())); // Blueberry
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/packs/repository/BuiltInPackSource.java b/src/main/java/net/minecraft/server/packs/repository/BuiltInPackSource.java
index db249dc4ac6eb34f54054dc186f71b44dc0b39bf..856e539ef71747fcb5cb91c16fbde61ae1bb7fa4 100644
--- a/src/main/java/net/minecraft/server/packs/repository/BuiltInPackSource.java
+++ b/src/main/java/net/minecraft/server/packs/repository/BuiltInPackSource.java
@@ -39,6 +39,8 @@ public abstract class BuiltInPackSource implements RepositorySource {
         }
 
         this.listBundledPacks(consumer);
+
+        net.blueberrymc.common.Blueberry.getModLoader().loadPacks(consumer); // Blueberry
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/inventory/MenuType.java b/src/main/java/net/minecraft/world/inventory/MenuType.java
index d26071e212d728425e93428f66ca7c7708488266..a19920ac5a471a623dc890db87c799bf75e03224 100644
--- a/src/main/java/net/minecraft/world/inventory/MenuType.java
+++ b/src/main/java/net/minecraft/world/inventory/MenuType.java
@@ -44,7 +44,8 @@ public class MenuType<T extends AbstractContainerMenu> implements FeatureElement
         return Registry.register(BuiltInRegistries.MENU, s, new MenuType<>(menuSupplier, FeatureFlags.REGISTRY.subset(featureFlags)));
     }
 
-    private MenuType(MenuType.MenuSupplier<T> menuSupplier, FeatureFlagSet featureFlagSet) {
+    // Blueberry - private -> public
+    public MenuType(MenuType.MenuSupplier<T> menuSupplier, FeatureFlagSet featureFlagSet) {
         this.constructor = menuSupplier;
         this.requiredFeatures = featureFlagSet;
     }
@@ -57,6 +58,7 @@ public class MenuType<T extends AbstractContainerMenu> implements FeatureElement
         return this.requiredFeatures;
     }
 
+    public // Blueberry
     interface MenuSupplier<T extends AbstractContainerMenu> {
         T create(int var1, Inventory var2);
     }
diff --git a/src/main/java/net/minecraft/world/item/Item.java b/src/main/java/net/minecraft/world/item/Item.java
index d9514fbaa0c7069024553948084b757add655cd5..550b93d6ebd2fea64a64e2a3a0833ea4f458b246 100644
--- a/src/main/java/net/minecraft/world/item/Item.java
+++ b/src/main/java/net/minecraft/world/item/Item.java
@@ -100,6 +100,7 @@ public class Item implements FeatureElement, ItemLike {
             }
         }
 
+        this.renderer = properties.renderer; // Blueberry
     }
 
     /** @deprecated */
@@ -366,6 +367,15 @@ public class Item implements FeatureElement, ItemLike {
         return this.requiredFeatures;
     }
 
+    // Blueberry start
+    private final java.util.function.Supplier<net.minecraft.client.renderer.BlockEntityWithoutLevelRenderer> renderer;
+
+    public final net.minecraft.client.renderer.BlockEntityWithoutLevelRenderer getRenderer() {
+        net.minecraft.client.renderer.BlockEntityWithoutLevelRenderer renderer = this.renderer != null ? this.renderer.get() : null;
+        return renderer != null ? renderer : net.minecraft.client.renderer.BlockEntityWithoutLevelRenderer.instance;
+    }
+    // Blueberry end
+
     public static class Properties {
         int maxStackSize = 64;
         int maxDamage;
@@ -376,6 +386,7 @@ public class Item implements FeatureElement, ItemLike {
         FoodProperties foodProperties;
         boolean isFireResistant;
         FeatureFlagSet requiredFeatures = FeatureFlags.VANILLA_SET;
+        java.util.function.Supplier<net.minecraft.client.renderer.BlockEntityWithoutLevelRenderer> renderer; // Blueberry
 
         public Item.Properties food(FoodProperties foodProperties) {
             this.foodProperties = foodProperties;
@@ -420,5 +431,12 @@ public class Item implements FeatureElement, ItemLike {
             this.requiredFeatures = FeatureFlags.REGISTRY.subset(featureFlags);
             return this;
         }
+
+        // Blueberry start
+        public Item.Properties renderer(java.util.function.Supplier<net.minecraft.client.renderer.BlockEntityWithoutLevelRenderer> renderer) {
+            this.renderer = renderer;
+            return this;
+        }
+        // Blueberry end
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BlockEntityType.java b/src/main/java/net/minecraft/world/level/block/entity/BlockEntityType.java
index 7b2553f5d58ad49ea9261cea56b1e219b1b0b4ec..a40745359d24e03d8777f6ef22ad7d60a5fb9b83 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BlockEntityType.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BlockEntityType.java
@@ -101,6 +101,7 @@ public class BlockEntityType<T extends BlockEntity> {
     }
 
     @FunctionalInterface
+    public // Blueberry
     interface BlockEntitySupplier<T extends BlockEntity> {
         T create(BlockPos var1, BlockState var2);
     }
diff --git a/src/main/resources/log4j2-debug.xml b/src/main/resources/log4j2-debug.xml
index aea01980678d1a4f74982b0c08f42456d557b124..cabc65a1a5255cb445e4e2ac59f83b759eea9979 100644
--- a/src/main/resources/log4j2-debug.xml
+++ b/src/main/resources/log4j2-debug.xml
@@ -2,13 +2,13 @@
 <Configuration status="WARN" packages="com.mojang.util">
     <Appenders>
         <Console name="SysOut" target="SYSTEM_OUT">
-            <PatternLayout pattern="[%d{HH:mm:ss}] [%t/%level]: %msg%n" />
+            <PatternLayout pattern="[%d{HH:mm:ss}] [%t/%level] [%c]: %msg%n" />
         </Console>
         <Queue name="ServerGuiConsole">
-            <PatternLayout pattern="[%d{HH:mm:ss} %level]: %msg%n" />
+            <PatternLayout pattern="[%d{HH:mm:ss} %level] [%c]: %msg%n" />
         </Queue>
         <RollingRandomAccessFile name="File" fileName="logs/latest.log" filePattern="logs/%d{yyyy-MM-dd}-%i.log.gz">
-            <PatternLayout pattern="[%d{HH:mm:ss}] [%t/%level]: %msg%n" />
+            <PatternLayout pattern="[%d{HH:mm:ss}] [%t/%level] [%c]: %msg%n" />
             <Policies>
                 <TimeBasedTriggeringPolicy />
                 <OnStartupTriggeringPolicy />
diff --git a/src/main/resources/log4j2.xml b/src/main/resources/log4j2.xml
new file mode 100644
index 0000000000000000000000000000000000000000..8b00a0d606dae68533536e2eb8a6b10030a9e098
--- /dev/null
+++ b/src/main/resources/log4j2.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Configuration status="WARN">
+    <Appenders>
+        <Console name="SysOut" target="SYSTEM_OUT">
+            <PatternLayout pattern="[%d{HH:mm:ss}] [%t/%level] [%c]: %msg%n" />
+        </Console>
+        <Queue name="ServerGuiConsole">
+            <PatternLayout pattern="[%d{HH:mm:ss} %level] [%c]: %msg%n" />
+        </Queue>
+        <RollingRandomAccessFile name="File" fileName="logs/latest.log" filePattern="logs/%d{yyyy-MM-dd}-%i.log.gz">
+            <PatternLayout pattern="[%d{HH:mm:ss}] [%t/%level] [%c]: %msg%n" />
+            <Policies>
+                <TimeBasedTriggeringPolicy />
+                <OnStartupTriggeringPolicy />
+            </Policies>
+        </RollingRandomAccessFile>
+    </Appenders>
+    <Loggers>
+        <Root level="info">
+            <filters>
+                <MarkerFilter marker="NETWORK_PACKETS" onMatch="DENY" onMismatch="NEUTRAL" />
+            </filters>
+            <AppenderRef ref="SysOut"/>
+            <AppenderRef ref="File"/>
+            <AppenderRef ref="ServerGuiConsole"/>
+        </Root>
+    </Loggers>
+</Configuration>
