From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: acrylic-style <ilyy@outlook.jp>
Date: Thu, 4 Mar 2021 22:06:05 +0900
Subject: [PATCH] Implement addRecipe/removeRecipe API


diff --git a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
index fd8c4d1db390f21a48f02a6b313be919c2036151..280174dc1df7014508692c98c52e94fce62d3c35 100644
--- a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
+++ b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
@@ -12,6 +12,7 @@ import com.google.gson.JsonSyntaxException;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Comparator;
+import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
@@ -33,10 +34,10 @@ import net.minecraft.world.level.Level;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class RecipeManager extends SimpleJsonResourceReloadListener {
+public class RecipeManager extends SimpleJsonResourceReloadListener implements net.blueberrymc.world.item.crafting.BlueberryRecipeManager { // Blueberry - implement BlueberryRecipeManager
    private static final Gson GSON = (new GsonBuilder()).setPrettyPrinting().disableHtmlEscaping().create();
    private static final Logger LOGGER = LogManager.getLogger();
-   private Map<RecipeType<?>, Map<ResourceLocation, Recipe<?>>> recipes = ImmutableMap.of();
+   private Map<RecipeType<?>, Map<ResourceLocation, Recipe<?>>> recipes = Maps.newHashMap(); // Blueberry - use HashMap instead
    private boolean hasErrors;
 
    public RecipeManager() {
@@ -58,7 +59,8 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
          }
       }
 
-      this.recipes = (Map)map2.entrySet().stream().collect(ImmutableMap.toImmutableMap(Entry::getKey, (entryx) -> ((Builder)entryx.getValue()).build()));
+      this.recipes = (Map)map2.entrySet().stream().collect(Collectors.toMap(Entry::getKey, (entryx) -> ((Builder)entryx.getValue()).build(), (a, b) -> a)); // Blueberry - use normal map
+      net.blueberrymc.world.item.crafting.RecipeBuilder.getRecipes().forEach((id, recipe) -> addRecipe(recipe)); // Blueberry - add recipes now
       LOGGER.info("Loaded {} recipes", map2.size());
    }
 
@@ -122,4 +124,29 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
       });
       this.recipes = ImmutableMap.copyOf(map);
    }
+
+   // Blueberry start - implement addRecipe/removeRecipe
+   @Override
+   public void addRecipe(Recipe<?> recipe) {
+      if (!net.blueberrymc.world.item.crafting.RecipeBuilder.knownRecipeManagers.contains(this))
+         net.blueberrymc.world.item.crafting.RecipeBuilder.knownRecipeManagers.add(this);
+      Map<ResourceLocation, Recipe<?>> map = this.recipes.get(recipe.getType());
+      boolean doAdd = false;
+      if (map instanceof ImmutableMap) {
+         map = new HashMap<>(map);
+         doAdd = true;
+      }
+      if (map.containsKey(recipe.getId())) {
+         throw new IllegalStateException("Duplicate recipe ignored with ID " + recipe.getId());
+      } else {
+         map.put(recipe.getId(), recipe);
+         if (doAdd) this.recipes.put(recipe.getType(), map);
+      }
+   }
+
+   @Override
+   public void removeRecipe(RecipeType<?> type, ResourceLocation id) {
+      this.recipes.get(type).remove(id);
+   }
+   // Blueberry end - implement addRecipe/removeRecipe
 }
\ No newline at end of file
