From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: acrylic-style <ilyy@outlook.jp>
Date: Thu, 4 Mar 2021 14:17:01 +0900
Subject: [PATCH] Implement PlayerBlockBreakEvent/PlayerBlockDropItemEvent


diff --git a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
index d9751b9375a6a6fc111b0fb030d158e09a69a773..060b7cabaf3417dad65ab635542fd0a66f24fb8e 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
@@ -215,9 +215,39 @@ public class ServerPlayerGameMode {
 
    public boolean destroyBlock(BlockPos blockPos) {
       BlockState blockState = this.level.getBlockState(blockPos);
-      if (!this.player.getMainHandItem().getItem().canAttackBlock(blockState, this.level, blockPos, this.player)) {
+      // Blueberry start
+      boolean isSwordNoBreak = !this.player.getMainHandItem().getItem().canAttackBlock(blockState, this.level, blockPos, this.player);
+      if (this.level.getBlockEntity(blockPos) == null && !isSwordNoBreak) {
+         this.player.connection.send(new net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket(blockPos, net.minecraft.world.level.block.Blocks.AIR.defaultBlockState()));
+      }
+      net.blueberrymc.common.event.block.PlayerBlockBreakEvent event = new net.blueberrymc.common.event.block.PlayerBlockBreakEvent(new net.blueberrymc.world.level.block.Block(level, blockPos), player);
+      event.setCancelled(isSwordNoBreak);
+      Block blk = blockState.getBlock();
+      ItemStack item = this.player.getMainHandItem();
+      if (blk != null && !event.isCancelled() && !this.isCreative() && this.player.hasCorrectToolForDrops(blk.defaultBlockState())) {
+         event.setExp(blk.getExpDrop(blockState, level, blockPos, item));
+      }
+      event.callEvent();
+      if (event.isCancelled()) {
+         if (isSwordNoBreak) {
+            return false;
+         }
+         this.player.connection.send(new net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket(level, blockPos));
+         for (Direction value : Direction.values()) {
+            this.player.connection.send(new net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket(level, blockPos.relative(value)));
+         }
+         BlockEntity entity = this.level.getBlockEntity(blockPos);
+         if (entity != null) {
+            this.player.connection.send(entity.getUpdatePacket());
+         }
+         return false;
+      }
+      // Blueberry end
+      if (false && !this.player.getMainHandItem().getItem().canAttackBlock(blockState, this.level, blockPos, this.player)) { // Blueberry - handled above
          return false;
       } else {
+         blockState = this.level.getBlockState(blockPos); // Blueberry - update state, mods might be updated the block
+         if (blockState.isAir()) return false; // Blueberry - a mod set block to air without cancelling
          BlockEntity blockEntity = this.level.getBlockEntity(blockPos);
          Block block = blockState.getBlock();
          if (block instanceof GameMasterBlock && !this.player.canUseGameMasterBlocks()) {
@@ -226,6 +256,7 @@ public class ServerPlayerGameMode {
          } else if (this.player.blockActionRestricted(this.level, blockPos, this.gameModeForPlayer)) {
             return false;
          } else {
+            level.captureDrops.set(new java.util.ArrayList<>()); // Blueberry
             block.playerWillDestroy(this.level, blockPos, blockState, this.player);
             boolean flag = this.level.removeBlock(blockPos, false);
             if (flag) {
@@ -233,7 +264,7 @@ public class ServerPlayerGameMode {
             }
 
             if (this.isCreative()) {
-               return true;
+               //return true; // Blueberry
             } else {
                ItemStack itemStack = this.player.getMainHandItem();
                ItemStack itemStack2 = itemStack.copy();
@@ -243,8 +274,18 @@ public class ServerPlayerGameMode {
                   block.playerDestroy(this.level, this.player, blockPos, blockState, blockEntity, itemStack2);
                }
 
-               return true;
+               //return true; // Blueberry
+            }
+            // Blueberry start
+            if (event.isDropItems()) {
+               net.blueberrymc.common.event.EventFactory.handlePlayerBlockDropItemEvent(level, blockPos, blockState, this.player, level.captureDrops.get());
+            }
+            level.captureDrops.set(null);
+            if (flag) {
+               blockState.getBlock().popExperience(level, blockPos, event.getExp());
             }
+            return true;
+            // Blueberry end
          }
       }
    }
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index a70236fb62602be2986564b709dafabbc867519b..8fa59f0091ec0b783ad89031263a1624ef6903c3 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -93,6 +93,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable, net.blueber
    private final WorldBorder worldBorder;
    private final BiomeManager biomeManager;
    private final ResourceKey<Level> dimension;
+   public final ThreadLocal<List<net.minecraft.world.entity.item.ItemEntity>> captureDrops = new ThreadLocal<>(); // Blueberry
 
    protected Level(WritableLevelData writableLevelData, ResourceKey<Level> resourceKey, final DimensionType dimensionType, Supplier<ProfilerFiller> supplier, boolean flag, boolean flag2, long l) {
       this.profiler = supplier;
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index ee27c786eaec9cb1fb72dc155456d3d11cf04bf7..bb2ebd0553e40664df52132effaa987612110465 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -269,11 +269,13 @@ public class Block extends BlockBehaviour implements ItemLike {
          double d3 = (double)(level.random.nextFloat() * 0.5F) + 0.25D;
          ItemEntity itemEntity = new ItemEntity(level, (double)blockPos.getX() + d, (double)blockPos.getY() + d2, (double)blockPos.getZ() + d3, itemStack);
          itemEntity.setDefaultPickUpDelay();
+         List<ItemEntity> drops = level.captureDrops.get(); if (drops != null) { drops.add(itemEntity); return; } // Blueberry
          level.addFreshEntity(itemEntity);
       }
    }
 
-   protected void popExperience(ServerLevel level, BlockPos pos, int exp) {
+   // Blueberry - PAIL protected -> public
+   public void popExperience(ServerLevel level, BlockPos pos, int exp) {
       if (level.getGameRules().getBoolean(GameRules.RULE_DOBLOCKDROPS)) {
          ExperienceOrb.award(level, Vec3.atCenterOf(pos), exp);
       }
@@ -414,6 +416,12 @@ public class Block extends BlockBehaviour implements ItemLike {
       return (ImmutableMap)this.stateDefinition.getPossibleStates().stream().collect(ImmutableMap.toImmutableMap(Function.identity(), function));
    }
 
+   // Blueberry start
+   public int getExpDrop(BlockState blockState, ServerLevel serverLevel, BlockPos blockPos, ItemStack itemStack) {
+      return 0;
+   }
+   // Blueberry end
+
    public static final class BlockStatePairKey {
       private final BlockState first;
       private final BlockState second;
diff --git a/src/main/java/net/minecraft/world/level/block/OreBlock.java b/src/main/java/net/minecraft/world/level/block/OreBlock.java
index a39c53969fde5361fe4cafc0c7aef831aa65998c..79ea4141dddcc866cc9bbd612a7570b68ef15d53 100644
--- a/src/main/java/net/minecraft/world/level/block/OreBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/OreBlock.java
@@ -23,7 +23,7 @@ public class OreBlock extends Block {
 
    public void spawnAfterBreak(BlockState blockState, ServerLevel serverLevel, BlockPos blockPos, ItemStack itemStack) {
       super.spawnAfterBreak(blockState, serverLevel, blockPos, itemStack);
-      if (EnchantmentHelper.getItemEnchantmentLevel(Enchantments.SILK_TOUCH, itemStack) == 0) {
+      if (false && EnchantmentHelper.getItemEnchantmentLevel(Enchantments.SILK_TOUCH, itemStack) == 0) { // Blueberry - handled in PlayerBlockBreakEvent
          int i = this.xpRange.randomValue(serverLevel.random);
          if (i > 0) {
             this.popExperience(serverLevel, blockPos, i);
@@ -31,4 +31,17 @@ public class OreBlock extends Block {
       }
 
    }
+
+   // Blueberry start
+   @Override
+   public int getExpDrop(BlockState blockState, ServerLevel serverLevel, BlockPos blockPos, ItemStack itemStack) {
+      if (EnchantmentHelper.getItemEnchantmentLevel(Enchantments.SILK_TOUCH, itemStack) == 0) {
+         int i = this.xpRange.randomValue(serverLevel.random);
+         if (i > 0) {
+            return i;
+         }
+      }
+      return super.getExpDrop(blockState, serverLevel, blockPos, itemStack);
+   }
+   // Blueberry end
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java b/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java
index a012667f8aa8e8c30d58fc15a74906718b3d97ae..d640a848c764511006439ae08d497a6c8da1f50d 100644
--- a/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java
@@ -71,13 +71,23 @@ public class RedStoneOreBlock extends Block {
 
    public void spawnAfterBreak(BlockState blockState, ServerLevel serverLevel, BlockPos blockPos, ItemStack itemStack) {
       super.spawnAfterBreak(blockState, serverLevel, blockPos, itemStack);
-      if (EnchantmentHelper.getItemEnchantmentLevel(Enchantments.SILK_TOUCH, itemStack) == 0) {
+      if (false && EnchantmentHelper.getItemEnchantmentLevel(Enchantments.SILK_TOUCH, itemStack) == 0) { // Blueberry - handled in PlayerBlockBreakEvent
          int i = 1 + serverLevel.random.nextInt(5);
          this.popExperience(serverLevel, blockPos, i);
       }
 
    }
 
+   // Blueberry start
+   @Override
+   public int getExpDrop(BlockState blockState, ServerLevel serverLevel, BlockPos blockPos, ItemStack itemStack) {
+      if (EnchantmentHelper.getItemEnchantmentLevel(Enchantments.SILK_TOUCH, itemStack) == 0) {
+         return 1 + serverLevel.random.nextInt(5);
+      }
+      return super.getExpDrop(blockState, serverLevel, blockPos, itemStack);
+   }
+   // Blueberry end
+
    public void animateTick(BlockState blockState, Level level, BlockPos blockPos, Random random) {
       if (blockState.getValue(LIT)) {
          spawnParticles(level, blockPos);
