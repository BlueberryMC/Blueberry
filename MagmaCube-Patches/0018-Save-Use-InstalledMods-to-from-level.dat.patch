From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: acrylic-style <me@acrylicstyle.xyz>
Date: Fri, 24 Dec 2021 14:48:22 +0900
Subject: [PATCH] Save/Use InstalledMods to/from level.dat


diff --git a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldOpenFlows.java b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldOpenFlows.java
index ab4f0bac052f18dbfb12691fcfde0f35259fdc5f..4a97a457e9efa1c53c61ef3f42c6833b4d22292a 100644
--- a/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldOpenFlows.java
+++ b/src/main/java/net/minecraft/client/gui/screens/worldselection/WorldOpenFlows.java
@@ -175,6 +175,12 @@ public class WorldOpenFlows {
                 return;
             }
 
+            // Blueberry start
+            if (flag2) {
+                if (!net.blueberrymc.client.BlueberryClient.showIncompatibleWorldModScreen(s, levelStorageAccess, worldStem, () -> this.doLoadLevel(screen, s, flag, false))) return;
+            }
+            // Blueberry end
+
             WorldData worldData = worldStem.worldData();
             boolean flag3 = worldData.worldGenOptions().isOldCustomizedWorld();
             boolean flag4 = worldData.worldGenSettingsLifecycle() != Lifecycle.stable();
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index d7d5f52fa91e2b7445235f01c070aeebeff1f16a..2b4c28c628dae74261845b43578a8d62cccf0406 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -311,6 +311,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         boolean flag = false;
         ProfiledDuration profiledDuration = JvmProfiler.INSTANCE.onWorldLoadedStarted();
         this.worldData.setModdedInfo(this.getServerModName(), this.getModdedStatus().shouldReportAsModified());
+        this.worldData.setInstalledMods(net.blueberrymc.common.Blueberry.getModLoader().getActiveMods()); // Blueberry
         ChunkProgressListener chunkProgressListener = this.progressListenerFactory.create(11);
         this.createLevels(chunkProgressListener);
         this.forceDifficulty();
diff --git a/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java b/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java
index 8b971a9d9dbdd51cfef525acaacdf0c983b0d5ea..61f300033d0f186242d3888cac3ec27c3b95d9ed 100644
--- a/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java
+++ b/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java
@@ -79,6 +79,7 @@ public class PrimaryLevelData implements ServerLevelData, WorldData {
     private final Set<String> knownServerBrands;
     private boolean wasModded;
     private final TimerQueue<MinecraftServer> scheduledEvents;
+    private final Set<net.blueberrymc.common.bml.VersionedModInfo> installedMods = new java.util.HashSet<>(); // Blueberry
 
     private PrimaryLevelData(@Nullable DataFixer dataFixer, int i, @Nullable CompoundTag compoundTag, boolean flag, int i2, int i3, int i4, float f, long l, long l2, int i5, int i6, int i7, boolean flag2, int i8, boolean flag3, boolean flag4, boolean flag5, WorldBorder.Settings settings, int i9, int i10, @Nullable UUID uuid, Set<String> set, TimerQueue<MinecraftServer> timerQueue, @Nullable CompoundTag compoundTag2, CompoundTag compoundTag3, LevelSettings levelSettings, WorldOptions worldOptions, PrimaryLevelData.SpecialWorldProperty specialWorldProperty, Lifecycle lifecycle) {
         this.fixerUpper = dataFixer;
@@ -120,7 +121,11 @@ public class PrimaryLevelData implements ServerLevelData, WorldData {
     public static <T> PrimaryLevelData parse(Dynamic<T> dynamic, DataFixer dataFixer, int i, @Nullable CompoundTag compoundTag, LevelSettings levelSettings, LevelVersion levelVersion, PrimaryLevelData.SpecialWorldProperty specialWorldProperty, WorldOptions worldOptions, Lifecycle lifecycle) {
         long l = dynamic.get("Time").asLong(0L);
         CompoundTag compoundTag2 = (CompoundTag)(dynamic.get("DragonFight").result().orElseGet(() -> dynamic.get("DimensionData").get("1").get("DragonFight").orElseEmptyMap())).convert(NbtOps.INSTANCE).getValue();
-        return new PrimaryLevelData(dataFixer, i, compoundTag, dynamic.get("WasModded").asBoolean(false), dynamic.get("SpawnX").asInt(0), dynamic.get("SpawnY").asInt(0), dynamic.get("SpawnZ").asInt(0), dynamic.get("SpawnAngle").asFloat(0.0F), l, dynamic.get("DayTime").asLong(l), levelVersion.levelDataVersion(), dynamic.get("clearWeatherTime").asInt(0), dynamic.get("rainTime").asInt(0), dynamic.get("raining").asBoolean(false), dynamic.get("thunderTime").asInt(0), dynamic.get("thundering").asBoolean(false), dynamic.get("initialized").asBoolean(true), dynamic.get("DifficultyLocked").asBoolean(false), WorldBorder.Settings.read(dynamic, WorldBorder.DEFAULT_SETTINGS), dynamic.get("WanderingTraderSpawnDelay").asInt(0), dynamic.get("WanderingTraderSpawnChance").asInt(0), (UUID)dynamic.get("WanderingTraderId").read(UUIDUtil.CODEC).result().orElse(null), dynamic.get("ServerBrands").asStream().flatMap((dynamicx) -> dynamicx.asString().result().stream()).collect(Collectors.toCollection(Sets::newLinkedHashSet)), new TimerQueue<>(TimerCallbacks.SERVER_CALLBACKS, dynamic.get("ScheduledEvents").asStream()), (CompoundTag)dynamic.get("CustomBossEvents").orElseEmptyMap().getValue(), compoundTag2, levelSettings, worldOptions, specialWorldProperty, lifecycle);
+        // Blueberry start
+        PrimaryLevelData data = new PrimaryLevelData(dataFixer, i, compoundTag, dynamic.get("WasModded").asBoolean(false), dynamic.get("SpawnX").asInt(0), dynamic.get("SpawnY").asInt(0), dynamic.get("SpawnZ").asInt(0), dynamic.get("SpawnAngle").asFloat(0.0F), l, dynamic.get("DayTime").asLong(l), levelVersion.levelDataVersion(), dynamic.get("clearWeatherTime").asInt(0), dynamic.get("rainTime").asInt(0), dynamic.get("raining").asBoolean(false), dynamic.get("thunderTime").asInt(0), dynamic.get("thundering").asBoolean(false), dynamic.get("initialized").asBoolean(true), dynamic.get("DifficultyLocked").asBoolean(false), WorldBorder.Settings.read(dynamic, WorldBorder.DEFAULT_SETTINGS), dynamic.get("WanderingTraderSpawnDelay").asInt(0), dynamic.get("WanderingTraderSpawnChance").asInt(0), (UUID)dynamic.get("WanderingTraderId").read(UUIDUtil.CODEC).result().orElse(null), dynamic.get("ServerBrands").asStream().flatMap((dynamicx) -> dynamicx.asString().result().stream()).collect(Collectors.toCollection(Sets::newLinkedHashSet)), new TimerQueue<>(TimerCallbacks.SERVER_CALLBACKS, dynamic.get("ScheduledEvents").asStream()), (CompoundTag)dynamic.get("CustomBossEvents").orElseEmptyMap().getValue(), compoundTag2, levelSettings, worldOptions, specialWorldProperty, lifecycle);
+        data.installedMods.addAll(dynamic.get("InstalledMods").asStream().flatMap((dynamicx) -> net.blueberrymc.util.Util.toStream(net.blueberrymc.common.bml.SimpleVersionedModInfo.load(dynamicx))).collect(Collectors.toCollection(Sets::newLinkedHashSet)));
+        return data;
+        // Blueberry end
     }
 
     public CompoundTag createTag(RegistryAccess registryAccess, @Nullable CompoundTag compoundTag) {
@@ -138,6 +143,11 @@ public class PrimaryLevelData implements ServerLevelData, WorldData {
         ListTag listTag = new ListTag();
         this.knownServerBrands.stream().map(StringTag::valueOf).forEach(listTag::add);
         compoundTag.put("ServerBrands", listTag);
+        // Blueberry start
+        listTag.clear();
+        this.installedMods.stream().map(net.blueberrymc.common.bml.VersionedModInfo::save).forEach(listTag::add);
+        compoundTag.put("InstalledMods", listTag);
+        // Blueberry end
         compoundTag.putBoolean("WasModded", this.wasModded);
         CompoundTag compoundTag3 = new CompoundTag();
         compoundTag3.putString("Name", SharedConstants.getCurrentVersion().getName());
@@ -467,4 +477,17 @@ public class PrimaryLevelData implements ServerLevelData, WorldData {
         FLAT,
         DEBUG;
     }
+
+    // Blueberry start
+    @Override
+    public void setInstalledMods(java.util.Collection<? extends net.blueberrymc.common.bml.VersionedModInfo> collection) {
+        this.installedMods.clear();
+        this.installedMods.addAll(collection);
+    }
+
+    @Override
+    public Set<net.blueberrymc.common.bml.VersionedModInfo> getInstalledMods() {
+        return this.installedMods;
+    }
+    // Blueberry end
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/storage/WorldData.java b/src/main/java/net/minecraft/world/level/storage/WorldData.java
index 7b48bd6811fd1aa9a368c8fcbba91cd784bb6248..69a0fc6f6c3dd9c2e20c3cb2393cbf2eb6dce119 100644
--- a/src/main/java/net/minecraft/world/level/storage/WorldData.java
+++ b/src/main/java/net/minecraft/world/level/storage/WorldData.java
@@ -16,7 +16,7 @@ import net.minecraft.world.level.LevelSettings;
 import net.minecraft.world.level.WorldDataConfiguration;
 import net.minecraft.world.level.levelgen.WorldOptions;
 
-public interface WorldData {
+public interface WorldData extends net.blueberrymc.common.util.InstalledModsContainer { // Blueberry
     int ANVIL_VERSION_ID = 19133;
     int MCREGION_VERSION_ID = 19132;
 
