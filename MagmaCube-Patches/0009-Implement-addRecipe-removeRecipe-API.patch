From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: acrylic-style <me@acrylicstyle.xyz>
Date: Thu, 4 Mar 2021 22:06:05 +0900
Subject: [PATCH] Implement addRecipe/removeRecipe API


diff --git a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
index 98667c82f0c940cef127577431f9d5e42c960499..ec5b3a62c0577221112c052be7e4db3b167de25a 100644
--- a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
+++ b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
@@ -36,10 +36,10 @@ import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
 import org.slf4j.Logger;
 
-public class RecipeManager extends SimpleJsonResourceReloadListener {
+public class RecipeManager extends SimpleJsonResourceReloadListener implements net.blueberrymc.world.item.crafting.BlueberryRecipeManager { // Blueberry
     private static final Gson GSON = (new GsonBuilder()).setPrettyPrinting().disableHtmlEscaping().create();
     private static final Logger LOGGER = LogUtils.getLogger();
-    private Map<RecipeType<?>, Map<ResourceLocation, RecipeHolder<?>>> recipes = ImmutableMap.of();
+    private Map<RecipeType<?>, Map<ResourceLocation, RecipeHolder<?>>> recipes = Maps.newHashMap(); // Blueberry - use HashMap instead
     private Map<ResourceLocation, RecipeHolder<?>> byName = ImmutableMap.of();
     private boolean hasErrors;
 
@@ -64,8 +64,9 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
             }
         }
 
-        this.recipes = map2.entrySet().stream().collect(ImmutableMap.toImmutableMap(Entry::getKey, (entryx) -> ((Builder)entryx.getValue()).build()));
+        this.recipes = map2.entrySet().stream().collect(Collectors.toMap(Entry::getKey, (entryx) -> entryx.getValue().build(), (a, b) -> a)); // Blueberry - use normal map
         this.byName = builder.build();
+        net.blueberrymc.world.item.crafting.RecipeBuilder.getRecipes().forEach((id, recipe) -> addRecipe(recipe)); // Blueberry - add recipes now
         LOGGER.info("Loaded {} recipes", map2.size());
     }
 
@@ -174,4 +175,29 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
     public interface CachedCheck<C extends Container, T extends Recipe<C>> {
         Optional<RecipeHolder<T>> getRecipeFor(C var1, Level var2);
     }
+
+    // Blueberry start - implement addRecipe/removeRecipe
+    @Override
+    public void addRecipe(RecipeHolder<?> recipe) {
+        if (!net.blueberrymc.world.item.crafting.RecipeBuilder.knownRecipeManagers.contains(this))
+            net.blueberrymc.world.item.crafting.RecipeBuilder.knownRecipeManagers.add(this);
+        Map<ResourceLocation, RecipeHolder<?>> map = this.recipes.get(recipe.value().getType());
+        boolean doAdd = false;
+        if (map instanceof ImmutableMap) {
+            map = new java.util.HashMap<>(map);
+            doAdd = true;
+        }
+        if (map.containsKey(recipe.id())) {
+            throw new IllegalStateException("Duplicate recipe ignored with ID " + recipe.id());
+        } else {
+            map.put(recipe.id(), recipe);
+            if (doAdd) this.recipes.put(recipe.value().getType(), map);
+        }
+    }
+
+    @Override
+    public void removeRecipe(RecipeType<?> type, ResourceLocation id) {
+        this.recipes.get(type).remove(id);
+    }
+    // Blueberry end - implement addRecipe/removeRecipe
 }
