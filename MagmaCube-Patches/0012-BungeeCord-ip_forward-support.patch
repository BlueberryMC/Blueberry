From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: acrylic-style <me@acrylicstyle.xyz>
Date: Wed, 17 Mar 2021 21:21:48 +0900
Subject: [PATCH] BungeeCord ip_forward support


diff --git a/src/main/java/net/minecraft/network/Connection.java b/src/main/java/net/minecraft/network/Connection.java
index 5d8d4614fcf361c8386dab39028ea7c4d8de8471..121acb17de96851000c53dbdb8890de3eb7a109c 100644
--- a/src/main/java/net/minecraft/network/Connection.java
+++ b/src/main/java/net/minecraft/network/Connection.java
@@ -72,6 +72,11 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
     private float averageSentPackets;
     private int tickCount;
     private boolean handlingFault;
+    // Blueberry start
+    public java.util.UUID spoofedUUID;
+    public com.mojang.authlib.properties.Property[] spoofedProfile;
+    public boolean preparing = true;
+    // Blueberry end
 
     public Connection(PacketFlow packetFlow) {
         this.receiving = packetFlow;
@@ -81,6 +86,7 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
         super.channelActive(channelHandlerContext);
         this.channel = channelHandlerContext.channel();
         this.address = this.channel.remoteAddress();
+        this.preparing = false; // Blueberry
 
         try {
             this.setProtocol(ConnectionProtocol.HANDSHAKING);
@@ -265,6 +271,7 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
     }
 
     public void disconnect(Component component) {
+        this.preparing = false; // Blueberry
         if (this.channel.isOpen()) {
             this.channel.close().awaitUninterruptibly();
             this.disconnectedReason = component;
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index c924aa21e3030ea9f3e0a11c3c4fe5a67c769860..add3eea38847d7c5253333f82c1503d9c52572b5 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -142,7 +142,14 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         if (!this.usesAuthentication()) {
             LOGGER.warn("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
             LOGGER.warn("The server will make no attempt to authenticate usernames. Beware.");
-            LOGGER.warn("While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose.");
+            // Blueberry start
+            if (net.blueberrymc.common.bml.InternalBlueberryModConfig.Server.bungee) {
+                LOGGER.warn("Whilst this makes it possible to use BungeeCord, unless access to your server is properly restricted, it also opens up the ability for hackers to connect with any username they choose.");
+                LOGGER.warn("Please see https://www.spigotmc.org/wiki/firewall-guide/ for further information.");
+            } else {
+                LOGGER.warn("While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose.");
+            }
+            // Blueberry end
             LOGGER.warn("To change this, set \"online-mode\" to \"true\" in the server.properties file.");
         }
 
diff --git a/src/main/java/net/minecraft/server/network/ServerConnectionListener.java b/src/main/java/net/minecraft/server/network/ServerConnectionListener.java
index 5b461d5ce873bd2719f8a8418f707e4d19d0dffa..e8ca3c68fe7b8e766843e6f235e69dd332863185 100644
--- a/src/main/java/net/minecraft/server/network/ServerConnectionListener.java
+++ b/src/main/java/net/minecraft/server/network/ServerConnectionListener.java
@@ -144,6 +144,7 @@ public class ServerConnectionListener {
                             connection.setReadOnly();
                         }
                     } else {
+                        if (connection.preparing) continue; // Blueberry
                         iterator.remove();
                         connection.handleDisconnection();
                     }
diff --git a/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
index a2707fabf71fc5bf374692abeb76fb73da98c9a2..ae8edbb902d2d9ae8f63b5c467ee27d958eec4db 100644
--- a/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
@@ -11,6 +11,7 @@ import net.minecraft.network.protocol.status.ServerStatus;
 import net.minecraft.server.MinecraftServer;
 
 public class ServerHandshakePacketListenerImpl implements ServerHandshakePacketListener {
+    private static final com.google.gson.Gson gson = new com.google.gson.Gson(); // Blueberry
     private static final Component IGNORE_STATUS_REASON = Component.literal("Ignoring status request");
     private final MinecraftServer server;
     private final Connection connection;
@@ -36,6 +37,24 @@ public class ServerHandshakePacketListenerImpl implements ServerHandshakePacketL
                 this.connection.disconnect(component);
             } else {
                 this.connection.setListener(new ServerLoginPacketListenerImpl(this.server, this.connection));
+                // Blueberry start
+                if (net.blueberrymc.common.bml.InternalBlueberryModConfig.Server.bungee) {
+                    String[] split = clientIntentionPacket.hostName.split("\00");
+                    if (split.length == 3 || split.length == 4) {
+                        clientIntentionPacket.hostName = split[0];
+                        connection.address = new java.net.InetSocketAddress(split[1], ((java.net.InetSocketAddress) connection.getRemoteAddress()).getPort());
+                        connection.spoofedUUID = com.mojang.util.UUIDTypeAdapter.fromString(split[2]);
+                    } else {
+                        Component text = Component.literal("If you wish to use IP forwarding, please enable it in your BungeeCord config as well!");
+                        connection.send(new ClientboundLoginDisconnectPacket(text));
+                        connection.disconnect(text);
+                        return;
+                    }
+                    if (split.length == 4) {
+                        connection.spoofedProfile = gson.fromJson(split[3], com.mojang.authlib.properties.Property[].class);
+                    }
+                }
+                // Blueberry end
             }
             break;
         case STATUS:
diff --git a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
index 1e0faba662da2974eafdab383df1c0d1f3820122..0ecd5515fc2642874db753632932a4fbafa44574 100644
--- a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -93,7 +93,7 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener,
     }
 
     public void handleAcceptedLogin() {
-        if (!this.gameProfile.isComplete()) {
+        if (!net.blueberrymc.common.bml.InternalBlueberryModConfig.Server.bungee && !this.gameProfile.isComplete()) { // Blueberry - handled in initUUID
             this.gameProfile = this.createFakeProfile(this.gameProfile);
         }
 
@@ -127,6 +127,18 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener,
 
     }
 
+    // Blueberry start
+    private void initUUID() {
+        UUID uuid = connection.spoofedUUID != null ? connection.spoofedUUID : UUIDUtil.createOfflinePlayerUUID(this.gameProfile.getName());
+        this.gameProfile = new GameProfile(uuid, this.gameProfile.getName());
+        if (connection.spoofedProfile != null) {
+            for (com.mojang.authlib.properties.Property property : connection.spoofedProfile) {
+                this.gameProfile.getProperties().put(property.getName(), property);
+            }
+        }
+    }
+    // Blueberry end
+
     private void placeNewPlayer(ServerPlayer serverPlayer) {
         this.server.getPlayerList().placeNewPlayer(this.connection, serverPlayer);
     }
@@ -152,6 +164,7 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener,
                 this.state = ServerLoginPacketListenerImpl.State.KEY;
                 this.connection.send(new ClientboundHelloPacket("", this.server.getKeyPair().getPublic().getEncoded(), this.challenge));
             } else {
+                if (net.blueberrymc.common.bml.InternalBlueberryModConfig.Server.bungee) initUUID(); // Blueberry
                 this.state = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
             }
 
diff --git a/src/main/java/net/minecraft/server/players/OldUsersConverter.java b/src/main/java/net/minecraft/server/players/OldUsersConverter.java
index 475b0fbf4212e452eef390b76b394690ed2b7c64..b3dbd8f1a7d415f52a781bd307c2ad5ae8a56d12 100644
--- a/src/main/java/net/minecraft/server/players/OldUsersConverter.java
+++ b/src/main/java/net/minecraft/server/players/OldUsersConverter.java
@@ -50,7 +50,7 @@ public class OldUsersConverter {
 
     private static void lookupPlayers(MinecraftServer minecraftServer, Collection<String> collection, ProfileLookupCallback profileLookupCallback) {
         String[] strings = (String[])collection.stream().filter((sx) -> !StringUtil.isNullOrEmpty(sx)).toArray((i) -> new String[i]);
-        if (minecraftServer.usesAuthentication()) {
+        if (minecraftServer.usesAuthentication() || net.blueberrymc.common.bml.InternalBlueberryModConfig.Server.bungee) { // Blueberry - bungee = online mode, for now
             minecraftServer.getProfileRepository().findProfilesByNames(strings, Agent.MINECRAFT, profileLookupCallback);
         } else {
             for(String s : strings) {
