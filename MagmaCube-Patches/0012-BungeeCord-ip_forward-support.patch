From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: acrylic-style <me@acrylicstyle.xyz>
Date: Wed, 17 Mar 2021 21:21:48 +0900
Subject: [PATCH] BungeeCord ip_forward support


diff --git a/src/main/java/net/minecraft/network/Connection.java b/src/main/java/net/minecraft/network/Connection.java
index c65049641fc01204dd9d105880e0e2b15fc96c79..6f8994755a729bdbd4fdbd482bde7179780ffc18 100644
--- a/src/main/java/net/minecraft/network/Connection.java
+++ b/src/main/java/net/minecraft/network/Connection.java
@@ -74,6 +74,11 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
     private float averageSentPackets;
     private int tickCount;
     private boolean handlingFault;
+    // Blueberry start
+    public java.util.UUID spoofedUUID;
+    public com.mojang.authlib.properties.Property[] spoofedProfile;
+    public boolean preparing = true;
+    // Blueberry end
 
     public Connection(PacketFlow packetFlow) {
         this.receiving = packetFlow;
@@ -83,6 +88,7 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
         super.channelActive(channelHandlerContext);
         this.channel = channelHandlerContext.channel();
         this.address = this.channel.remoteAddress();
+        this.preparing = false; // Blueberry
 
         try {
             this.setProtocol(ConnectionProtocol.HANDSHAKING);
@@ -253,6 +259,7 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
     }
 
     public void disconnect(Component component) {
+        this.preparing = false; // Blueberry
         if (this.channel.isOpen()) {
             this.channel.close().awaitUninterruptibly();
             this.disconnectedReason = component;
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 8063cbdf6d6178dded1aea7486ef0dd229c4678c..d7d96ee418604dfcaf4c9699559c75a0345d514d 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -145,7 +145,14 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         if (!this.usesAuthentication()) {
             LOGGER.warn("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
             LOGGER.warn("The server will make no attempt to authenticate usernames. Beware.");
-            LOGGER.warn("While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose.");
+            // Blueberry start
+            if (net.blueberrymc.common.bml.InternalBlueberryModConfig.Server.bungee) {
+                LOGGER.warn("Whilst this makes it possible to use BungeeCord, unless access to your server is properly restricted, it also opens up the ability for hackers to connect with any username they choose.");
+                LOGGER.warn("Please see https://www.spigotmc.org/wiki/firewall-guide/ for further information.");
+            } else {
+                LOGGER.warn("While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose.");
+            }
+            // Blueberry end
             LOGGER.warn("To change this, set \"online-mode\" to \"true\" in the server.properties file.");
         }
 
diff --git a/src/main/java/net/minecraft/server/network/ServerConnectionListener.java b/src/main/java/net/minecraft/server/network/ServerConnectionListener.java
index 13ec000e23b19e877a47244182e62d46bd6b76bd..906aad24d735ec99545d13267ddce4a2e304b46e 100644
--- a/src/main/java/net/minecraft/server/network/ServerConnectionListener.java
+++ b/src/main/java/net/minecraft/server/network/ServerConnectionListener.java
@@ -144,6 +144,7 @@ public class ServerConnectionListener {
                             connection.setReadOnly();
                         }
                     } else {
+                        if (connection.preparing) continue; // Blueberry
                         iterator.remove();
                         connection.handleDisconnection();
                     }
diff --git a/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
index 4a100529fd9180b2701b75111dcdf162dffe4ab9..b82badc1b5af2cda39792f36a6ab08b4840996a0 100644
--- a/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
@@ -10,6 +10,7 @@ import net.minecraft.network.protocol.login.ClientboundLoginDisconnectPacket;
 import net.minecraft.server.MinecraftServer;
 
 public class ServerHandshakePacketListenerImpl implements ServerHandshakePacketListener {
+    private static final com.google.gson.Gson gson = new com.google.gson.Gson(); // Blueberry
     private static final Component IGNORE_STATUS_REASON = Component.literal("Ignoring status request");
     private final MinecraftServer server;
     private final Connection connection;
@@ -35,6 +36,24 @@ public class ServerHandshakePacketListenerImpl implements ServerHandshakePacketL
                 this.connection.disconnect(component);
             } else {
                 this.connection.setListener(new ServerLoginPacketListenerImpl(this.server, this.connection));
+                // Blueberry start
+                if (net.blueberrymc.common.bml.InternalBlueberryModConfig.Server.bungee) {
+                    String[] split = clientIntentionPacket.hostName.split("\00");
+                    if (split.length == 3 || split.length == 4) {
+                        clientIntentionPacket.hostName = split[0];
+                        connection.address = new java.net.InetSocketAddress(split[1], ((java.net.InetSocketAddress) connection.getRemoteAddress()).getPort());
+                        connection.spoofedUUID = com.mojang.util.UUIDTypeAdapter.fromString(split[2]);
+                    } else {
+                        Component text = Component.literal("If you wish to use IP forwarding, please enable it in your BungeeCord config as well!");
+                        connection.send(new ClientboundLoginDisconnectPacket(text));
+                        connection.disconnect(text);
+                        return;
+                    }
+                    if (split.length == 4) {
+                        connection.spoofedProfile = gson.fromJson(split[3], com.mojang.authlib.properties.Property[].class);
+                    }
+                }
+                // Blueberry end
             }
             break;
         case STATUS:
diff --git a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
index efd8c5e54d6dc065c8d804bb80be80df3adcfcbc..c93e788570cf513e13c02c8e764c7e1289b7c2ad 100644
--- a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -101,7 +101,7 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener
     }
 
     public void handleAcceptedLogin() {
-        if (!this.gameProfile.isComplete()) {
+        if (!net.blueberrymc.common.bml.InternalBlueberryModConfig.Server.bungee && !this.gameProfile.isComplete()) { // Blueberry - handled in initUUID
             this.gameProfile = this.createFakeProfile(this.gameProfile);
         }
 
@@ -149,6 +149,18 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener
 
     }
 
+    // Blueberry start
+    private void initUUID() {
+        UUID uuid = connection.spoofedUUID != null ? connection.spoofedUUID : UUIDUtil.createOfflinePlayerUUID(this.gameProfile.getName());
+        this.gameProfile = new GameProfile(uuid, this.gameProfile.getName());
+        if (connection.spoofedProfile != null) {
+            for (com.mojang.authlib.properties.Property property : connection.spoofedProfile) {
+                this.gameProfile.getProperties().put(property.getName(), property);
+            }
+        }
+    }
+    // Blueberry end
+
     private void placeNewPlayer(ServerPlayer serverPlayer) {
         this.server.getPlayerList().placeNewPlayer(this.connection, serverPlayer);
     }
@@ -200,6 +212,7 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener
                 this.state = ServerLoginPacketListenerImpl.State.KEY;
                 this.connection.send(new ClientboundHelloPacket("", this.server.getKeyPair().getPublic().getEncoded(), this.nonce));
             } else {
+                if (net.blueberrymc.common.bml.InternalBlueberryModConfig.Server.bungee) initUUID(); // Blueberry
                 this.state = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
             }
 
diff --git a/src/main/java/net/minecraft/server/players/OldUsersConverter.java b/src/main/java/net/minecraft/server/players/OldUsersConverter.java
index 475b0fbf4212e452eef390b76b394690ed2b7c64..b3dbd8f1a7d415f52a781bd307c2ad5ae8a56d12 100644
--- a/src/main/java/net/minecraft/server/players/OldUsersConverter.java
+++ b/src/main/java/net/minecraft/server/players/OldUsersConverter.java
@@ -50,7 +50,7 @@ public class OldUsersConverter {
 
     private static void lookupPlayers(MinecraftServer minecraftServer, Collection<String> collection, ProfileLookupCallback profileLookupCallback) {
         String[] strings = (String[])collection.stream().filter((sx) -> !StringUtil.isNullOrEmpty(sx)).toArray((i) -> new String[i]);
-        if (minecraftServer.usesAuthentication()) {
+        if (minecraftServer.usesAuthentication() || net.blueberrymc.common.bml.InternalBlueberryModConfig.Server.bungee) { // Blueberry - bungee = online mode, for now
             minecraftServer.getProfileRepository().findProfilesByNames(strings, Agent.MINECRAFT, profileLookupCallback);
         } else {
             for(String s : strings) {
