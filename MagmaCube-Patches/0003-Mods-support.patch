From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: acrylic-style <me@acrylicstyle.xyz>
Date: Thu, 14 Jan 2021 01:44:46 +0900
Subject: [PATCH] Mods support


diff --git a/src/main/java/net/blueberrymc/client/BlueberryClientImpl.java b/src/main/java/net/blueberrymc/client/BlueberryClientImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..82f560b47ec3def0c2ddf248a4005dfb28538ded
--- /dev/null
+++ b/src/main/java/net/blueberrymc/client/BlueberryClientImpl.java
@@ -0,0 +1,21 @@
+package net.blueberrymc.client;
+
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.screens.MenuScreens;
+import net.minecraft.client.gui.screens.Screen;
+import net.minecraft.client.gui.screens.inventory.MenuAccess;
+import net.minecraft.client.renderer.blockentity.BlockEntityRenderer;
+import net.minecraft.world.inventory.AbstractContainerMenu;
+import net.minecraft.world.inventory.MenuType;
+import net.minecraft.world.level.block.entity.BlockEntityType;
+import org.jetbrains.annotations.NotNull;
+
+public class BlueberryClientImpl extends BlueberryClient {
+    public void registerSpecialBlockEntityRenderer(@NotNull BlockEntityType<?> blockEntityType, @NotNull BlockEntityRenderer<?> blockEntityRenderer) {
+        Minecraft.getInstance().getBlockEntityRenderDispatcher().registerSpecialRenderer(blockEntityType, blockEntityRenderer);
+    }
+
+    public <M extends AbstractContainerMenu, U extends Screen & MenuAccess<M>> void registerMenuScreensFactory(@NotNull MenuType<? extends M> menuType, @NotNull ScreenConstructor<M, U> screenConstructor) {
+        MenuScreens.register(menuType, screenConstructor::create);
+    }
+}
diff --git a/src/main/java/net/blueberrymc/server/BlueberryServerImpl.java b/src/main/java/net/blueberrymc/server/BlueberryServerImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..7b1e2686690e9d7df32131010891223b24eb568f
--- /dev/null
+++ b/src/main/java/net/blueberrymc/server/BlueberryServerImpl.java
@@ -0,0 +1,4 @@
+package net.blueberrymc.server;
+
+public class BlueberryServerImpl extends BlueberryServer {
+}
diff --git a/src/main/java/net/minecraft/CrashReport.java b/src/main/java/net/minecraft/CrashReport.java
index 6038b95bc93a9b2174f463e6e966988c4a999b9b..1720b9d2f1bbd68e535d95a15b230dd8439b2a15 100644
--- a/src/main/java/net/minecraft/CrashReport.java
+++ b/src/main/java/net/minecraft/CrashReport.java
@@ -225,6 +225,6 @@ public class CrashReport {
 
     public static void preload() {
         MemoryReserve.allocate();
-        (new CrashReport("Don't panic!", new Throwable())).getFriendlyReport();
+        LOGGER.info((new CrashReport("Don't panic!", new Throwable())).getFriendlyReport()); // Blueberry
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/SystemReport.java b/src/main/java/net/minecraft/SystemReport.java
index da5ac7b22dd629ec1fffcdabc35743c161c5d611..89ff780da13eb16eb1a06fa4652c86049a9da1e8 100644
--- a/src/main/java/net/minecraft/SystemReport.java
+++ b/src/main/java/net/minecraft/SystemReport.java
@@ -48,6 +48,26 @@ public class SystemReport {
             List<String> list = Util.getVmArguments().collect(Collectors.toList());
             return String.format("%d total; %s", list.size(), String.join(" ", list));
         }));
+        // Blueberry start
+        this.setDetail("Blueberry Version", net.blueberrymc.common.util.Versioning.getVersion().getFullyQualifiedVersion());
+        this.setDetail("Blueberry commit", net.blueberrymc.common.util.Versioning.getVersion().getCommit());
+        // TODO: we need better layout
+        this.setDetail("Mods", () -> {
+            StringBuilder sb = new StringBuilder("\n");
+            sb.append("      Status:\n");
+            sb.append("        L = Loaded\n");
+            sb.append("        P = Pre Init\n");
+            sb.append("        I = Init\n");
+            sb.append("        J = Post Init\n");
+            sb.append("        A = Available\n");
+            sb.append("        E = Errored\n");
+            sb.append("        U = Unloaded\n");
+            for (net.blueberrymc.common.bml.BlueberryMod mod : net.blueberrymc.common.Blueberry.getModLoader().getLoadedMods()) {
+                sb.append("      ").append(mod.getName()).append(" (").append(mod.getDescription().getModId()).append(") [").append(mod.getDescription().getVersion()).append("] - ").append(mod.getStateList().toString()).append("\n");
+            }
+            return sb.toString();
+        });
+        // Blueberry end
     }
 
     public void setDetail(String s, String s2) {
diff --git a/src/main/java/net/minecraft/client/Minecraft.java b/src/main/java/net/minecraft/client/Minecraft.java
index 2181c3fbbf4dc1ca95f345c22a2daca6434869a1..f47a8672630d9ffce62ccafad5f7654a41c3e237 100644
--- a/src/main/java/net/minecraft/client/Minecraft.java
+++ b/src/main/java/net/minecraft/client/Minecraft.java
@@ -448,7 +448,9 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
         this.mainRenderTarget = new MainTarget(this.window.getWidth(), this.window.getHeight());
         this.mainRenderTarget.setClearColor(0.0F, 0.0F, 0.0F, 0.0F);
         this.mainRenderTarget.clear(ON_OSX);
+        net.blueberrymc.client.EarlyLoadingScreen.getInstance().startRender(false); // Blueberry
         this.resourceManager = new ReloadableResourceManager(PackType.CLIENT_RESOURCES);
+        net.blueberrymc.common.Blueberry.getModLoader().callPreInit(); // Blueberry
         this.resourcePackRepository.reload();
         this.options.loadSelectedResourcePacks(this.resourcePackRepository);
         this.languageManager = new LanguageManager(this.options.languageCode);
@@ -462,6 +464,7 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
         this.splashManager = new SplashManager(this.user);
         this.resourceManager.registerReloadListener(this.splashManager);
         this.musicManager = new MusicManager(this);
+        net.blueberrymc.client.EarlyLoadingScreen.getInstance().blockUntilFinish(); // Blueberry
         this.fontManager = new FontManager(this.textureManager);
         this.font = this.fontManager.createFont();
         this.resourceManager.registerReloadListener(this.fontManager.getReloadListener());
@@ -480,6 +483,7 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
         this.blockEntityRenderDispatcher = new BlockEntityRenderDispatcher(this.font, this.entityModels, this::getBlockRenderer, this::getItemRenderer, this::getEntityRenderDispatcher);
         this.resourceManager.registerReloadListener(this.blockEntityRenderDispatcher);
         BlockEntityWithoutLevelRenderer blockEntityWithoutLevelRenderer = new BlockEntityWithoutLevelRenderer(this.blockEntityRenderDispatcher, this.entityModels);
+        BlockEntityWithoutLevelRenderer.instance = blockEntityWithoutLevelRenderer; // Blueberry
         this.resourceManager.registerReloadListener(blockEntityWithoutLevelRenderer);
         this.itemRenderer = new ItemRenderer(this.textureManager, this.modelManager, this.itemColors, blockEntityWithoutLevelRenderer);
         this.resourceManager.registerReloadListener(this.itemRenderer);
@@ -531,6 +535,7 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
         this.realms32BitWarningStatus = new Realms32BitWarningStatus(this);
         LoadingOverlay.registerTextures(this);
         List<PackResources> list = this.resourcePackRepository.openAllSelected();
+        net.blueberrymc.common.Blueberry.getModLoader().callInit(); // Blueberry
         this.reloadStateTracker.startReload(ResourceLoadStateTracker.ReloadReason.INITIAL, list);
         this.setOverlay(new LoadingOverlay(this, this.resourceManager.createReload(Util.backgroundExecutor(), this, RESOURCE_RELOAD_INITIAL_TASK, list), (optional) -> Util.ifElse(optional, this::rollbackResourcePacks, () -> {
                 if (SharedConstants.IS_RUNNING_IN_IDE) {
@@ -540,9 +545,9 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
                 this.reloadStateTracker.finishReload();
             }), false));
         if (s != null) {
-            ConnectScreen.startConnecting(new TitleScreen(), this, new ServerAddress(s, i), (ServerData)null);
+            this.setScreen(new net.blueberrymc.common.bml.client.gui.screens.ModLoadingProblemScreen(() -> ConnectScreen.startConnecting(new TitleScreen(), this, new ServerAddress(s, i), (ServerData)null))); // Blueberry
         } else {
-            this.setScreen(new TitleScreen(true));
+            this.setScreen(new net.blueberrymc.common.bml.client.gui.screens.ModLoadingProblemScreen(new TitleScreen())); // Blueberry
         }
 
     }
@@ -719,9 +724,10 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
     }
 
     public static void crash(CrashReport crashReport) {
-        File crashReportsDir = new File(getInstance().gameDirectory, "crash-reports");
+        File crashReportsDir = new File(instance == null ? new File(".") : getInstance().gameDirectory, "crash-reports"); // Blueberry
         File crashReportFile = new File(crashReportsDir, "crash-" + (new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss")).format(new Date()) + "-client.txt");
         Bootstrap.realStdoutPrintln(crashReport.getFriendlyReport());
+        net.blueberrymc.common.util.DiscordRPCTaskExecutor.shutdownNow(); // Blueberry
         if (crashReport.getSaveFile() != null) {
             Bootstrap.realStdoutPrintln("#@!@# Game crashed! Crash report saved to: #@!@# " + crashReport.getSaveFile());
             System.exit(-1);
@@ -860,6 +866,7 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
 
         this.screen = screen;
         BufferUploader.reset();
+        net.blueberrymc.client.event.ClientEventFactory.callScreenChangedEvent(this.screen); // Blueberry
         if (screen != null) {
             this.mouseHandler.releaseMouse();
             KeyMapping.releaseAll();
@@ -875,6 +882,7 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
 
     public void setOverlay(@Nullable Overlay overlay) {
         this.overlay = overlay;
+        net.blueberrymc.client.event.ClientEventFactory.callOverlayChangedEvent(overlay); // Blueberry
     }
 
     public void destroy() {
@@ -899,6 +907,7 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
                 this.screen.removed();
             }
 
+            net.blueberrymc.common.Blueberry.shutdown();
             this.close();
         } finally {
             Util.timeSource = System::nanoTime;
@@ -1683,6 +1692,10 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
             this.pendingConnection.tick();
         }
 
+        // Blueberry start
+        this.profiler.popPush("blueberryClientScheduler");
+        net.blueberrymc.common.Blueberry.getUtil().getClientScheduler().tick();
+        // Blueberry end
         this.profiler.popPush("keyboard");
         this.keyboardHandler.tick();
         this.profiler.pop();
diff --git a/src/main/java/net/minecraft/client/gui/components/ChatComponent.java b/src/main/java/net/minecraft/client/gui/components/ChatComponent.java
index d625340ebe571852dee8f27f2b21a94d165098bc..df437b617f85efbe0b24df0f311aeac34505dc6e 100644
--- a/src/main/java/net/minecraft/client/gui/components/ChatComponent.java
+++ b/src/main/java/net/minecraft/client/gui/components/ChatComponent.java
@@ -287,15 +287,27 @@ public class ChatComponent extends GuiComponent {
     }
 
     public static int getWidth(double d) {
+        // Blueberry start
+        int width = 320;
+        if (net.blueberrymc.common.bml.InternalBlueberryModConfig.Misc.ChatSettings.extendedWidth) {
+            width = Minecraft.getInstance().getWindow().getWidth() / 2 - 8;
+        }
+        // Blueberry end
         int i = 320;
         int i2 = 40;
-        return Mth.floor(d * 280.0D + 40.0D);
+        return Mth.floor(d * width); // Blueberry
     }
 
     public static int getHeight(double d) {
+        // Blueberry start
+        int height = 180;
+        if (net.blueberrymc.common.bml.InternalBlueberryModConfig.Misc.ChatSettings.extendedHeight) {
+            height = Minecraft.getInstance().getWindow().getHeight() / 2 - 40;
+        }
+        // Blueberry end
         int i = 180;
         int i2 = 20;
-        return Mth.floor(d * 160.0D + 20.0D);
+        return Mth.floor(d * height); // Blueberry
     }
 
     public static double defaultUnfocusedPct() {
diff --git a/src/main/java/net/minecraft/client/gui/components/DebugScreenOverlay.java b/src/main/java/net/minecraft/client/gui/components/DebugScreenOverlay.java
index ec06900671bcfa7398d740d4862335fe48f51678..c1295b7da20b86a89b24cbf42de7170f989792c7 100644
--- a/src/main/java/net/minecraft/client/gui/components/DebugScreenOverlay.java
+++ b/src/main/java/net/minecraft/client/gui/components/DebugScreenOverlay.java
@@ -71,6 +71,7 @@ import net.minecraft.world.level.levelgen.RandomState;
 import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.HitResult;
+import net.blueberrymc.common.Blueberry; // Blueberry
 
 public class DebugScreenOverlay extends GuiComponent {
     private static final int COLOR_GREY = 14737632;
@@ -354,6 +355,12 @@ public class DebugScreenOverlay extends GuiComponent {
         long l3 = Runtime.getRuntime().freeMemory();
         long l4 = l2 - l3;
         List<String> list = Lists.newArrayList(new String[]{String.format("Java: %s %dbit", System.getProperty("java.version"), this.minecraft.is64Bit() ? 64 : 32), String.format("Mem: % 2d%% %03d/%03dMB", l4 * 100L / l, bytesToMegabytes(l4), bytesToMegabytes(l)), String.format("Allocation rate: %03dMB /s", bytesToMegabytes(this.allocationRateCalculator.bytesAllocatedPerSecond(l4))), String.format("Allocated: % 2d%% %03dMB", l2 * 100L / l, bytesToMegabytes(l2)), "", String.format("CPU: %s", GlUtil.getCpuInfo()), "", String.format("Display: %dx%d (%s)", Minecraft.getInstance().getWindow().getWidth(), Minecraft.getInstance().getWindow().getHeight(), GlUtil.getVendor()), GlUtil.getRenderer(), GlUtil.getOpenGLVersion()});
+        // Blueberry start
+        list.add("");
+        list.add("MagmaCube " + Blueberry.getVersion().getShortMagmaCubeCommit());
+        list.add("Blueberry " + Blueberry.getVersion().getFullyQualifiedVersion());
+        list.add(Blueberry.getModLoader().getLoadedMods().size() + " mods loaded, " + Blueberry.getModLoader().getActiveMods().size() + " mods active");
+        // Blueberry end
         if (this.minecraft.showOnlyReducedInfo()) {
             return list;
         } else {
diff --git a/src/main/java/net/minecraft/client/gui/screens/LoadingOverlay.java b/src/main/java/net/minecraft/client/gui/screens/LoadingOverlay.java
index bd568ad18f934b84466054eb97a0fb07dc703b10..159adba112fa43d8e5dabf830babda208388dbcd 100644
--- a/src/main/java/net/minecraft/client/gui/screens/LoadingOverlay.java
+++ b/src/main/java/net/minecraft/client/gui/screens/LoadingOverlay.java
@@ -111,6 +111,7 @@ public class LoadingOverlay extends Overlay {
         blit(poseStack, i8, i9 - i10, i11, (int)d, 0.0625F, 60.0F, 120, 60, 120, 120);
         RenderSystem.defaultBlendFunc();
         RenderSystem.disableBlend();
+        net.blueberrymc.client.EarlyLoadingScreen.getInstance().renderMessagesFromGUI(); // Blueberry
         int i12 = (int)((double)this.minecraft.getWindow().getGuiScaledHeight() * 0.8325D);
         float f10 = this.reload.getActualProgress();
         this.currentProgress = Mth.clamp(this.currentProgress * 0.95F + f10 * 0.050000012F, 0.0F, 1.0F);
@@ -119,6 +120,7 @@ public class LoadingOverlay extends Overlay {
         }
 
         if (f2 >= 2.0F) {
+            net.blueberrymc.common.Blueberry.getModLoader().callPostInit(); // Blueberry
             this.minecraft.setOverlay((Overlay)null);
         }
 
@@ -132,6 +134,7 @@ public class LoadingOverlay extends Overlay {
 
             this.fadeOutStart = Util.getMillis();
             if (this.minecraft.screen != null) {
+                if (this.minecraft.screen instanceof net.blueberrymc.common.bml.client.gui.screens.ModLoadingProblemScreen) ((net.blueberrymc.common.bml.client.gui.screens.ModLoadingProblemScreen) minecraft.screen).refresh(); // Blueberry
                 this.minecraft.screen.init(this.minecraft, this.minecraft.getWindow().getGuiScaledWidth(), this.minecraft.getWindow().getGuiScaledHeight());
             }
         }
diff --git a/src/main/java/net/minecraft/client/gui/screens/PauseScreen.java b/src/main/java/net/minecraft/client/gui/screens/PauseScreen.java
index 6536c59f49c115c64aaeed2b33691169ba509bc5..0c0ed4bfe1991c60029fa27079f362be6f4f12c7 100644
--- a/src/main/java/net/minecraft/client/gui/screens/PauseScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/PauseScreen.java
@@ -78,6 +78,7 @@ public class PauseScreen extends Screen {
             }
 
         }));
+        this.addRenderableWidget(new Button(this.width / 2 - 102, this.height / 4 + 144 + -16, 204, 20, new net.blueberrymc.common.resources.BlueberryText("blueberry", "gui.screens.mods"), (buttonx) -> net.blueberrymc.client.gui.screens.ModListScreen.switchToModListScreen())); // Blueberry
     }
 
     public void tick() {
diff --git a/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java b/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java
index c2b12c1ac9d96aab4878d15013a65fddd601680b..8bf540e3e01acf73d0ab880279d3c4375d870c3c 100644
--- a/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java
@@ -154,7 +154,8 @@ public class TitleScreen extends Screen {
             Screen screen = (Screen)(this.minecraft.options.skipMultiplayerWarning ? new JoinMultiplayerScreen(this) : new SafetyScreen(this));
             this.minecraft.setScreen(screen);
         }, onTooltip))).active = flag;
-        (this.addRenderableWidget(new Button(this.width / 2 - 100, i + i2 * 2, 200, 20, Component.translatable("menu.online"), (button) -> this.realmsButtonClicked(), onTooltip))).active = flag;
+        (this.addRenderableWidget(new Button(this.width / 2 - 100, i + i2 * 2, 98, 20, new net.blueberrymc.common.resources.BlueberryText("blueberry", "gui.screens.mods"), (button) -> net.blueberrymc.client.gui.screens.ModListScreen.switchToModListScreen(), onTooltip))).active = flag;
+        (this.addRenderableWidget(new Button(this.width / 2 + 2, i + i2 * 2, 98, 20, new TranslatableComponent("menu.online"), (button) -> this.realmsButtonClicked(), onTooltip))).active = flag;
     }
 
     private void createDemoMenuOptions(int i, int i2) {
@@ -303,8 +304,12 @@ public class TitleScreen extends Screen {
                 s = s + I18n.get("menu.modded");
             }
 
-            drawString(poseStack, this.font, "MagmaCube " + ((net.minecraft.DetectedVersion) SharedConstants.getCurrentVersion()).magmaCubeVersion, 2, this.height - 20, 0xFFFFFF | i6); // MagmaCube
-            drawString(poseStack, this.font, s, 2, this.height - 10, 16777215 | i6);
+            // Blueberry start
+            drawString(poseStack, this.font, "Blueberry " + net.blueberrymc.common.Blueberry.getVersion().getFullyQualifiedVersion(), 2, this.height - 40, 0xFFFFFF | i6);
+            drawString(poseStack, this.font, "MagmaCube " + net.blueberrymc.common.util.Versioning.getVersion().getShortMagmaCubeCommit(), 2, this.height - 30, 0xFFFFFF | i6); // MagmaCube // Blueberry - offset 20 -> 30
+            drawString(poseStack, this.font, s, 2, this.height - 20, 16777215 | i6); // Blueberry - offset 10 -> 20
+            drawString(poseStack, this.font, net.blueberrymc.common.Blueberry.getModLoader().getLoadedMods().size() + " mods loaded, " + net.blueberrymc.common.Blueberry.getModLoader().getActiveMods().size() + " mods active", 2, this.height - 10, 0xFFFFFF | i6);
+            // Blueberry end
 
             for(GuiEventListener guiEventListener : this.children()) {
                 if (guiEventListener instanceof AbstractWidget) {
diff --git a/src/main/java/net/minecraft/client/gui/screens/multiplayer/ServerSelectionList.java b/src/main/java/net/minecraft/client/gui/screens/multiplayer/ServerSelectionList.java
index aac499837aba5984508919059b2e775f5c1549e3..4f43aa4df0261d01df73528bb46c96230c5b0e09 100644
--- a/src/main/java/net/minecraft/client/gui/screens/multiplayer/ServerSelectionList.java
+++ b/src/main/java/net/minecraft/client/gui/screens/multiplayer/ServerSelectionList.java
@@ -282,6 +282,13 @@ public class ServerSelectionList extends ObjectSelectionList<ServerSelectionList
             RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
             RenderSystem.setShaderTexture(0, GuiComponent.GUI_ICONS_LOCATION);
             GuiComponent.blit(poseStack, i3 + i4 - 15, i2, (float)(i10 * 10), (float)(176 + i11 * 8), 10, 8, 256, 256);
+            // Blueberry start
+            if (serverData.serverType != null) {
+                RenderSystem.setShader(GameRenderer::getPositionTexColorShader);
+                RenderSystem.setShaderTexture(0, net.blueberrymc.client.gui.BlueberryGuiComponents.GUI_ICONS_LOCATION);
+                GuiComponent.blit(poseStack, i3 + i4 - 18, i2 + 8, (float) 0.0F, (float) (serverData.serverType.getOffset() * 16), 16, 16, 256, 256);
+            }
+            // Blueberry end
             String s = this.serverData.getIconB64();
             if (!Objects.equals(s, this.lastIconB64)) {
                 if (this.uploadServerIcon(s)) {
@@ -302,6 +309,12 @@ public class ServerSelectionList extends ObjectSelectionList<ServerSelectionList
             int i20 = i7 - i2;
             if (i19 >= i4 - 15 && i19 <= i4 - 5 && i20 >= 0 && i20 <= 8) {
                 this.screen.setToolTip(Collections.singletonList(component2));
+                // Blueberry start
+            } else if (serverData.serverType != null && i19 >= i4 - 18 && i19 <= i4 - 5 && i20 >= 0 && i20 <= 22) {
+                String text = serverData.serverType.getBlueberryText().getContents();
+                if (text.contains("%d")) text = String.format(text, serverData.modsCount);
+                this.screen.setToolTip(Collections.singletonList(new TextComponent(text)));
+                // Blueberry end
             } else if (i19 >= i4 - i9 - 15 - 2 && i19 <= i4 - 15 - 2 && i20 >= 0 && i20 <= 8) {
                 this.screen.setToolTip(list2);
             }
diff --git a/src/main/java/net/minecraft/client/main/Main.java b/src/main/java/net/minecraft/client/main/Main.java
index 292756bb57e7a72f786cb1448cc2c0bc61b3081c..74536fd5d0f3051af18c512f3b7b2b15b333309b 100644
--- a/src/main/java/net/minecraft/client/main/Main.java
+++ b/src/main/java/net/minecraft/client/main/Main.java
@@ -46,8 +46,8 @@ public class Main {
 
     @DontObfuscate
     public static void main(String[] args) {
-        SharedConstants.tryDetectVersion();
-        SharedConstants.enableDataFixerOptimizations();
+        //SharedConstants.tryDetectVersion(); // Blueberry - moved below
+        //SharedConstants.enableDataFixerOptimizations(); // Blueberry - moved below
         OptionParser optionParser = new OptionParser();
         optionParser.allowsUnrecognizedOptions();
         optionParser.accepts("demo");
@@ -86,6 +86,12 @@ public class Main {
         if (!list.isEmpty()) {
             System.out.println("Completely ignored arguments: " + list);
         }
+        // Blueberry start
+        net.blueberrymc.common.Blueberry.preBootstrap();
+        net.blueberrymc.common.Blueberry.bootstrap(new net.blueberrymc.client.BlueberryClientImpl());
+        SharedConstants.tryDetectVersion();
+        SharedConstants.enableDataFixerOptimizations();
+        // Blueberry end
 
         String s = parseArgument(optionSet, optionSpec7);
         Proxy proxy = Proxy.NO_PROXY;
diff --git a/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java b/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
index 4377629a887891f7a63177b3f98dacadac9da2f1..7505e8bfd4a1d6f586d6767798bd4dc0c7690cf3 100644
--- a/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
+++ b/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
@@ -1632,6 +1632,7 @@ public class ClientPacketListener implements ClientGamePacketListener {
 
         try {
             friendlyByteBuf = clientboundCustomPayloadPacket.getData();
+            if (net.blueberrymc.network.client.ClientBlueberryPacketListener.super.handleBlueberryCustomPayload(clientboundCustomPayloadPacket)) return; // Blueberry
             if (ClientboundCustomPayloadPacket.BRAND.equals(resourceLocation)) {
                 String s = friendlyByteBuf.readUtf();
                 this.minecraft.player.setServerBrand(s);
diff --git a/src/main/java/net/minecraft/client/multiplayer/ServerData.java b/src/main/java/net/minecraft/client/multiplayer/ServerData.java
index 9c710f163ab90745ca2f48fac54f3c7e6924bbc8..d3e5319600eb5104876fd5880f6133c8b21e644c 100644
--- a/src/main/java/net/minecraft/client/multiplayer/ServerData.java
+++ b/src/main/java/net/minecraft/client/multiplayer/ServerData.java
@@ -32,6 +32,10 @@ public class ServerData {
     @Nullable
     private ServerData.ChatPreview chatPreview;
     private boolean chatPreviewEnabled = true;
+    // Blueberry start
+    public net.blueberrymc.network.ServerType serverType = null;
+    public int modsCount = 0;
+    // Blueberry end
 
     public ServerData(String s, String s2, boolean flag) {
         this.name = s;
diff --git a/src/main/java/net/minecraft/client/multiplayer/ServerStatusPinger.java b/src/main/java/net/minecraft/client/multiplayer/ServerStatusPinger.java
index 2d566c70f42c5df2c6a23d4f8d6b654cee130a1b..0fa90083b468c43edf6ccc1d76a5431a05485f7b 100644
--- a/src/main/java/net/minecraft/client/multiplayer/ServerStatusPinger.java
+++ b/src/main/java/net/minecraft/client/multiplayer/ServerStatusPinger.java
@@ -75,6 +75,7 @@ public class ServerStatusPinger {
                         connection.disconnect(Component.translatable("multiplayer.status.unrequested"));
                     } else {
                         this.receivedPing = true;
+                        serverData.serverType = net.blueberrymc.network.ServerType.VANILLA; // Blueberry
                         ServerStatus serverStatus = clientboundStatusResponsePacket.getStatus();
                         if (serverStatus.getDescription() != null) {
                             serverData.motd = serverStatus.getDescription();
@@ -144,6 +145,19 @@ public class ServerStatusPinger {
 
                 }
 
+                // Blueberry start
+                @Override
+                public void handleBlueberryHandshakeResponse(net.blueberrymc.network.client.handshake.ClientboundBlueberryHandshakePacket packet) {
+                    boolean compatible = net.blueberrymc.common.util.ListUtils.isCompatible(packet.getModInfos(), net.blueberrymc.common.Blueberry.getModManager().getModInfos());
+                    if (compatible) {
+                        serverData.serverType = net.blueberrymc.network.ServerType.BLUEBERRY_GOOD;
+                    } else {
+                        serverData.serverType = net.blueberrymc.network.ServerType.BLUEBERRY_BAD;
+                    }
+                    serverData.modsCount = packet.getModInfos().size();
+                }
+                // Blueberry end
+
                 public Connection getConnection() {
                     return connection;
                 }
diff --git a/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java b/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java
index f3d0cc2722ccb4cd4f830a0defeb13ce5e4d7969..c036ba38f9a3b2c81cbd42ff01e3a461c22b793d 100644
--- a/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/BlockEntityWithoutLevelRenderer.java
@@ -57,6 +57,7 @@ import org.apache.commons.lang3.StringUtils;
 public class BlockEntityWithoutLevelRenderer implements ResourceManagerReloadListener {
     private static final ShulkerBoxBlockEntity[] SHULKER_BOXES = (ShulkerBoxBlockEntity[])Arrays.stream(DyeColor.values()).sorted(Comparator.comparingInt(DyeColor::getId)).map((dyeColor) -> new ShulkerBoxBlockEntity(dyeColor, BlockPos.ZERO, Blocks.SHULKER_BOX.defaultBlockState())).toArray((i) -> new ShulkerBoxBlockEntity[i]);
     private static final ShulkerBoxBlockEntity DEFAULT_SHULKER_BOX = new ShulkerBoxBlockEntity(BlockPos.ZERO, Blocks.SHULKER_BOX.defaultBlockState());
+    public static BlockEntityWithoutLevelRenderer instance; // Blueberry
     private final ChestBlockEntity chest = new ChestBlockEntity(BlockPos.ZERO, Blocks.CHEST.defaultBlockState());
     private final ChestBlockEntity trappedChest = new TrappedChestBlockEntity(BlockPos.ZERO, Blocks.TRAPPED_CHEST.defaultBlockState());
     private final EnderChestBlockEntity enderChest = new EnderChestBlockEntity(BlockPos.ZERO, Blocks.ENDER_CHEST.defaultBlockState());
diff --git a/src/main/java/net/minecraft/client/renderer/block/BlockRenderDispatcher.java b/src/main/java/net/minecraft/client/renderer/block/BlockRenderDispatcher.java
index 7db4ec20b10132dfd7796efe15687779fcedd89e..13eeac1d2b838db19055d77f684fd17c8b51dd3a 100644
--- a/src/main/java/net/minecraft/client/renderer/block/BlockRenderDispatcher.java
+++ b/src/main/java/net/minecraft/client/renderer/block/BlockRenderDispatcher.java
@@ -97,7 +97,10 @@ public class BlockRenderDispatcher implements ResourceManagerReloadListener {
                 this.modelRenderer.renderModel(poseStack.last(), multiBufferSource.getBuffer(ItemBlockRenderTypes.getRenderType(blockState, false)), blockState, bakedModel, f, f2, f3, i, i2);
                 break;
             case ENTITYBLOCK_ANIMATED:
-                this.blockEntityRenderer.renderByItem(new ItemStack(blockState.getBlock()), ItemTransforms.TransformType.NONE, poseStack, multiBufferSource, i, i2);
+                // Blueberry start
+                ItemStack stack = new ItemStack(blockState.getBlock());
+                stack.getItem().getRenderer().renderByItem(stack, ItemTransforms.TransformType.NONE, poseStack, multiBufferSource, i, i2);
+                // Blueberry end
             }
 
         }
@@ -105,5 +108,6 @@ public class BlockRenderDispatcher implements ResourceManagerReloadListener {
 
     public void onResourceManagerReload(ResourceManager resourceManager) {
         this.liquidBlockRenderer.setupSprites();
+        net.blueberrymc.client.world.level.fluid.FluidSpriteManager.setupSprites(); // Blueberry
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/renderer/block/LiquidBlockRenderer.java b/src/main/java/net/minecraft/client/renderer/block/LiquidBlockRenderer.java
index a8bb5886070ce44644040bd18ae2a66b20b3ccb2..ccb8ed4cf00470eac8d696384fcaaa0aa36b09d7 100644
--- a/src/main/java/net/minecraft/client/renderer/block/LiquidBlockRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/block/LiquidBlockRenderer.java
@@ -67,6 +67,10 @@ public class LiquidBlockRenderer {
         boolean flag = fluidState.is(FluidTags.LAVA);
         TextureAtlasSprite[] textureAtlasSprites = flag ? this.lavaIcons : this.waterIcons;
         int i = flag ? 16777215 : BiomeColors.getAverageWaterColor(blockAndTintGetter, blockPos);
+        // Blueberry start
+        net.blueberrymc.client.event.render.LiquidBlockRenderEvent event = net.blueberrymc.client.event.ClientEventFactory.callLiquidBlockRenderEvent(fluidState, blockPos, i);
+        i = event.getColor();
+        // Blueberry end
         float f = (float)(i >> 16 & 255) / 255.0F;
         float f2 = (float)(i >> 8 & 255) / 255.0F;
         float f3 = (float)(i & 255) / 255.0F;
diff --git a/src/main/java/net/minecraft/client/renderer/blockentity/BlockEntityRenderDispatcher.java b/src/main/java/net/minecraft/client/renderer/blockentity/BlockEntityRenderDispatcher.java
index 5481adf92979505840ccbfa1ae721e92198e0030..70811ee71d702e913a8d4ac1ddce6256d9708ca3 100644
--- a/src/main/java/net/minecraft/client/renderer/blockentity/BlockEntityRenderDispatcher.java
+++ b/src/main/java/net/minecraft/client/renderer/blockentity/BlockEntityRenderDispatcher.java
@@ -24,7 +24,7 @@ import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.entity.BlockEntityType;
 import net.minecraft.world.phys.HitResult;
 
-public class BlockEntityRenderDispatcher implements ResourceManagerReloadListener {
+public class BlockEntityRenderDispatcher implements ResourceManagerReloadListener, net.blueberrymc.client.renderer.blockentity.MinecraftBlockEntityRenderDispatcher { // Blueberry - implement MinecraftBlockEntityRenderDispatcher
     private Map<BlockEntityType<?>, BlockEntityRenderer<?>> renderers = ImmutableMap.of();
     private final Font font;
     private final EntityModelSet entityModelSet;
@@ -113,4 +113,11 @@ public class BlockEntityRenderDispatcher implements ResourceManagerReloadListene
         BlockEntityRendererProvider.Context context = new BlockEntityRendererProvider.Context(this, (BlockRenderDispatcher)this.blockRenderDispatcher.get(), (ItemRenderer)this.itemRenderer.get(), (EntityRenderDispatcher)this.entityRenderer.get(), this.entityModelSet, this.font);
         this.renderers = BlockEntityRenderers.createEntityRenderers(context);
     }
+
+    // Blueberry start
+    @Override
+    public final void registerSpecialRenderer(BlockEntityType<?> blockEntityType, BlockEntityRenderer<?> blockEntityRenderer) {
+        this.renderers.put(blockEntityType, blockEntityRenderer);
+    }
+    // Blueberry end
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/renderer/blockentity/BlockEntityRenderers.java b/src/main/java/net/minecraft/client/renderer/blockentity/BlockEntityRenderers.java
index 3cf56c913cd1d1c2a348dd659099e8bac9091cee..43d1cd6b2ca92e583c8e8267b64292de3dc7d24e 100644
--- a/src/main/java/net/minecraft/client/renderer/blockentity/BlockEntityRenderers.java
+++ b/src/main/java/net/minecraft/client/renderer/blockentity/BlockEntityRenderers.java
@@ -11,7 +11,8 @@ import net.minecraft.world.level.block.entity.BlockEntityType;
 public class BlockEntityRenderers {
     private static final Map<BlockEntityType<?>, BlockEntityRendererProvider<?>> PROVIDERS = Maps.newHashMap();
 
-    private static <T extends BlockEntity> void register(BlockEntityType<? extends T> blockEntityType, BlockEntityRendererProvider<T> blockEntityRendererProvider) {
+    // Blueberry - private -> public
+    public static <T extends BlockEntity> void register(BlockEntityType<? extends T> blockEntityType, BlockEntityRendererProvider<T> blockEntityRendererProvider) {
         PROVIDERS.put(blockEntityType, blockEntityRendererProvider);
     }
 
diff --git a/src/main/java/net/minecraft/client/renderer/debug/DebugRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/DebugRenderer.java
index 72451093b6306c3d91ad93493efd3b2da77f5101..e918f5f17587e3e3c7bfb0e012ce11aa535b5f2c 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/DebugRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/DebugRenderer.java
@@ -23,6 +23,7 @@ import net.minecraft.world.entity.projectile.ProjectileUtil;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.EntityHitResult;
 import net.minecraft.world.phys.Vec3;
+import static net.blueberrymc.common.bml.InternalBlueberryModConfig.Debug.DebugRenderers.*; // Blueberry
 
 public class DebugRenderer {
     public final PathfindingRenderer pathfindingRenderer = new PathfindingRenderer();
@@ -93,7 +94,25 @@ public class DebugRenderer {
 
     public void render(PoseStack poseStack, MultiBufferSource.BufferSource bufferSource, double d, double d2, double d3) {
         if (this.renderChunkborder && !Minecraft.getInstance().showOnlyReducedInfo()) {
-            this.chunkBorderRenderer.render(poseStack, bufferSource, d, d2, d3);
+            // Blueberry start
+            if (pathfinding) this.pathfindingRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (waterDebug) this.waterDebugRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (chunkBorder) this.chunkBorderRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (heightMap) this.heightMapRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (collisionBox) this.collisionBoxRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (neighborsUpdate) this.neighborsUpdateRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (structure) this.structureRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (lightDebug) this.lightDebugRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (worldGenAttempt) this.worldGenAttemptRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (solidFace) this.solidFaceRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (chunk) this.chunkRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (brainDebug) this.brainDebugRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (villageSectionsDebug) this.villageSectionsDebugRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (beeDebug) this.beeDebugRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (raidDebug) this.raidDebugRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (goalSelector) this.goalSelectorRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (gameTestDebug) this.gameTestDebugRenderer.render(poseStack, bufferSource, d, d2, d3);
+            // Blueberry end
         }
 
         this.gameTestDebugRenderer.render(poseStack, bufferSource, d, d2, d3);
diff --git a/src/main/java/net/minecraft/client/renderer/entity/ItemRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/ItemRenderer.java
index 80d2ab8309e7fb167d12a7849ddaa9616572e2c7..91051b0b01b416adb440ed30d78b6ffb332b7928 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/ItemRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/ItemRenderer.java
@@ -153,7 +153,7 @@ public class ItemRenderer implements ResourceManagerReloadListener {
 
                 this.renderModelLists(bakedModel, itemStack, i, i2, poseStack, vertexConsumer);
             } else {
-                this.blockEntityRenderer.renderByItem(itemStack, transformType, poseStack, multiBufferSource, i, i2);
+                itemStack.getItem().getRenderer().renderByItem(itemStack, transformType, poseStack, multiBufferSource, i, i2); // Blueberry
             }
 
             poseStack.popPose();
diff --git a/src/main/java/net/minecraft/client/renderer/texture/TextureAtlas.java b/src/main/java/net/minecraft/client/renderer/texture/TextureAtlas.java
index 74c9e4878158710a274d49ca8e8875cd4fe4dcd6..a4d5970259d5da24d58dc233c2ba974998a0ce61 100644
--- a/src/main/java/net/minecraft/client/renderer/texture/TextureAtlas.java
+++ b/src/main/java/net/minecraft/client/renderer/texture/TextureAtlas.java
@@ -98,6 +98,7 @@ public class TextureAtlas extends AbstractTexture implements Tickable {
         int i3 = Integer.MAX_VALUE;
         int i4 = 1 << i;
         profilerFiller.popPush("extracting_frames");
+        net.blueberrymc.client.event.ClientEventFactory.callPreTextureStitchEvent(this, set); // Blueberry
 
         for(TextureAtlasSprite.Info info : this.getBasicSpriteInfos(resourceManager, set)) {
             i3 = Math.min(i3, Math.min(info.width(), info.height()));
diff --git a/src/main/java/net/minecraft/client/resources/ClientPackSource.java b/src/main/java/net/minecraft/client/resources/ClientPackSource.java
index a917cf4f15b3c16d768a7efee805a086d8c5dc58..0b39cf25662d986206278cfecef225a1b79bf6b0 100644
--- a/src/main/java/net/minecraft/client/resources/ClientPackSource.java
+++ b/src/main/java/net/minecraft/client/resources/ClientPackSource.java
@@ -90,6 +90,7 @@ public class ClientPackSource implements RepositorySource {
         if (pack2 != null) {
             consumer.accept(pack2);
         }
+        net.blueberrymc.common.Blueberry.getModManager().loadPacks(consumer, packConstructor); // Blueberry
 
     }
 
diff --git a/src/main/java/net/minecraft/client/resources/model/ModelBakery.java b/src/main/java/net/minecraft/client/resources/model/ModelBakery.java
index 5e5e868e9b4f4610187e03e107c6372bac8eaa20..59f194cba20fe2dd958b5afb97d23c097bcd9cdd 100644
--- a/src/main/java/net/minecraft/client/resources/model/ModelBakery.java
+++ b/src/main/java/net/minecraft/client/resources/model/ModelBakery.java
@@ -135,6 +135,13 @@ public class ModelBakery {
     private final Map<ResourceLocation, Pair<TextureAtlas, TextureAtlas.Preparations>> atlasPreparations;
     private int nextModelGroup = 1;
     private final Object2IntMap<BlockState> modelGroups = Util.make(new Object2IntOpenHashMap(), (object2IntOpenHashMap) -> object2IntOpenHashMap.defaultReturnValue(-1));
+    // Blueberry start
+    private static final Set<ResourceLocation> specialModels = new java.util.HashSet<>();
+
+    public static void addSpecialModel(ResourceLocation resourceLocation) {
+        specialModels.add(resourceLocation);
+    }
+    // Blueberry end
 
     public ModelBakery(ResourceManager resourceManager, BlockColors blockColors, ProfilerFiller profilerFiller, int i) {
         this.resourceManager = resourceManager;
@@ -164,8 +171,10 @@ public class ModelBakery {
         }
 
         profilerFiller.popPush("special");
+        new net.blueberrymc.client.event.SpecialModelRegistryEvent().callEvent(); // Blueberry
         this.loadTopLevel(new ModelResourceLocation("minecraft:trident_in_hand#inventory"));
         this.loadTopLevel(new ModelResourceLocation("minecraft:spyglass_in_hand#inventory"));
+        for (ResourceLocation resourceLocation : getSpecialModels()) this.addModelToCache(resourceLocation); // Blueberry
         profilerFiller.popPush("textures");
         Set<Pair<String, String>> set = Sets.newLinkedHashSet();
         Set<Material> set2 = this.topLevelModels.values().stream().flatMap((unbakedModel) -> unbakedModel.getMaterials(this::getModel, set).stream()).collect(Collectors.toSet());
@@ -425,6 +434,18 @@ public class ModelBakery {
         this.topLevelModels.put(modelResourceLocation, unbakedModel);
     }
 
+    // Blueberry start
+    private void addModelToCache(ResourceLocation resourceLocation) {
+        UnbakedModel unbakedModel = this.getModel(resourceLocation);
+        this.unbakedCache.put(resourceLocation, unbakedModel);
+        this.topLevelModels.put(resourceLocation, unbakedModel);
+    }
+
+    public Set<ResourceLocation> getSpecialModels() {
+        return specialModels;
+    }
+    // Blueberry end
+
     private void registerModelGroup(Iterable<BlockState> iterable) {
         int i = this.nextModelGroup++;
         iterable.forEach((blockState) -> this.modelGroups.put(blockState, i));
diff --git a/src/main/java/net/minecraft/network/ConnectionProtocol.java b/src/main/java/net/minecraft/network/ConnectionProtocol.java
index 5b3610cf386b10b12c4d7f8d6c08346df450bc70..83fc14c27b1d99c63b801cbb390a0b5720b7caa7 100644
--- a/src/main/java/net/minecraft/network/ConnectionProtocol.java
+++ b/src/main/java/net/minecraft/network/ConnectionProtocol.java
@@ -195,6 +195,12 @@ public enum ConnectionProtocol {
     STATUS(1, protocol().addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerStatusPacketListener>()).addPacket(ServerboundStatusRequestPacket.class, ServerboundStatusRequestPacket::new).addPacket(ServerboundPingRequestPacket.class, ServerboundPingRequestPacket::new)).addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<ClientStatusPacketListener>()).addPacket(ClientboundStatusResponsePacket.class, ClientboundStatusResponsePacket::new).addPacket(ClientboundPongResponsePacket.class, ClientboundPongResponsePacket::new))),
     LOGIN(2, protocol().addFlow(PacketFlow.CLIENTBOUND, (new ConnectionProtocol.PacketSet<ClientLoginPacketListener>()).addPacket(ClientboundLoginDisconnectPacket.class, ClientboundLoginDisconnectPacket::new).addPacket(ClientboundHelloPacket.class, ClientboundHelloPacket::new).addPacket(ClientboundGameProfilePacket.class, ClientboundGameProfilePacket::new).addPacket(ClientboundLoginCompressionPacket.class, ClientboundLoginCompressionPacket::new).addPacket(ClientboundCustomQueryPacket.class, ClientboundCustomQueryPacket::new)).addFlow(PacketFlow.SERVERBOUND, (new ConnectionProtocol.PacketSet<ServerLoginPacketListener>()).addPacket(ServerboundHelloPacket.class, ServerboundHelloPacket::new).addPacket(ServerboundKeyPacket.class, ServerboundKeyPacket::new).addPacket(ServerboundCustomQueryPacket.class, ServerboundCustomQueryPacket::new)));
 
+    // Blueberry start
+    static {
+        ((PacketSet<ClientStatusPacketListener>) STATUS.flows.get(PacketFlow.CLIENTBOUND)).addPacket(net.blueberrymc.network.client.handshake.ClientboundBlueberryHandshakePacket.class, net.blueberrymc.network.client.handshake.ClientboundBlueberryHandshakePacket::new);
+    }
+    // Blueberry end
+
     private static final int MIN_PROTOCOL_ID = -1;
     private static final int MAX_PROTOCOL_ID = 2;
     private static final ConnectionProtocol[] LOOKUP = new ConnectionProtocol[4];
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundOpenScreenPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundOpenScreenPacket.java
index 848a7404c597a586c987fa072adb8a029b8a0f9b..c9a18a35f09815555134180ac198e1170cde1e63 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundOpenScreenPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundOpenScreenPacket.java
@@ -43,6 +43,8 @@ public class ClientboundOpenScreenPacket implements Packet<ClientGamePacketListe
         return this.type;
     }
 
+    public int getRawType() { return this.type; } // Blueberry
+
     public Component getTitle() {
         return this.title;
     }
diff --git a/src/main/java/net/minecraft/network/protocol/status/ClientStatusPacketListener.java b/src/main/java/net/minecraft/network/protocol/status/ClientStatusPacketListener.java
index 43f39473c5ef3de9e53e6722bea6a0a58382526e..f5254cecd40e9d643cb59316e929560adb08c85d 100644
--- a/src/main/java/net/minecraft/network/protocol/status/ClientStatusPacketListener.java
+++ b/src/main/java/net/minecraft/network/protocol/status/ClientStatusPacketListener.java
@@ -2,7 +2,7 @@ package net.minecraft.network.protocol.status;
 
 import net.minecraft.network.PacketListener;
 
-public interface ClientStatusPacketListener extends PacketListener {
+public interface ClientStatusPacketListener extends PacketListener, net.blueberrymc.network.client.handshake.ClientBlueberryHandshakePacketListener { // Blueberry
     void handleStatusResponse(ClientboundStatusResponsePacket var1);
 
     void handlePongResponse(ClientboundPongResponsePacket var1);
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index 3ef4b97f18968f75213c7d3ce9276d91b46e26c9..3dddac41cf3163217f932217c90e6f21a69c8a68 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -61,7 +61,7 @@ public class Main {
 
     @DontObfuscate
     public static void main(String[] args) {
-        SharedConstants.tryDetectVersion();
+        //SharedConstants.tryDetectVersion(); // Blueberry - moved below
         OptionParser optionParser = new OptionParser();
         OptionSpec<Void> optionSpec = optionParser.accepts("nogui");
         OptionSpec<Void> optionSpec2 = optionParser.accepts("initSettings", "Initializes 'server.properties' and 'eula.txt', then quits");
@@ -78,6 +78,7 @@ public class Main {
         OptionSpec<String> optionSpec13 = optionParser.accepts("serverId").withRequiredArg();
         OptionSpec<Void> optionSpec14 = optionParser.accepts("jfrProfile");
         OptionSpec<String> optionSpec15 = optionParser.nonOptions();
+        optionParser.allowsUnrecognizedOptions(); // Blueberry
 
         try {
             OptionSet optionSet = optionParser.parse(args);
@@ -85,6 +86,11 @@ public class Main {
                 optionParser.printHelpOn(System.err);
                 return;
             }
+            // Blueberry start
+            net.blueberrymc.common.Blueberry.preBootstrap();
+            net.blueberrymc.common.Blueberry.bootstrap(new net.blueberrymc.server.BlueberryServerImpl());
+            SharedConstants.tryDetectVersion();
+            // Blueberry end
 
             CrashReport.preload();
             if (optionSet.has(optionSpec14)) {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 95ca34e1af4b0c38b754465ed93f599a354a59fe..bdbee76f9cc2d6fb45a48cd8fd1a9ddc94c4b324 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -263,6 +263,12 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             this.proxy = proxy;
             this.packRepository = packRepository;
             this.resources = new MinecraftServer.ReloadableResources(worldStem.resourceManager(), worldStem.dataPackResources());
+            // Blueberry start
+            if (net.blueberrymc.common.Blueberry.isServer()) {
+                ((net.blueberrymc.server.BlueberryServer) net.blueberrymc.common.Blueberry.getUtil()).setServer(this);
+                net.blueberrymc.common.Blueberry.getModLoader().callPreInit();
+            }
+            // Blueberry end
             this.services = services;
             if (services.profileCache() != null) {
                 services.profileCache().setExecutor(this);
@@ -277,6 +283,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             this.structureTemplateManager = new StructureTemplateManager(worldStem.resourceManager(), levelStorageAccess, dataFixer);
             this.serverThread = thread;
             this.executor = Util.backgroundExecutor();
+            if (net.blueberrymc.common.Blueberry.isServer()) net.blueberrymc.common.Blueberry.getModLoader().callInit(); // Blueberry
         }
     }
 
@@ -617,6 +624,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             this.status.setVersion(new ServerStatus.Version(SharedConstants.getCurrentVersion().getName(), SharedConstants.getCurrentVersion().getProtocolVersion()));
             this.status.setPreviewsChat(this.previewsChat());
             this.updateStatusIcon(this.status);
+            if (net.blueberrymc.common.Blueberry.isServer()) net.blueberrymc.common.Blueberry.getModLoader().callPostInit(); // Blueberry
 
             while(this.running) {
                 long l = Util.getMillis() - this.nextTickTime;
@@ -811,6 +819,11 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             LOGGER.debug("Autosave finished");
         }
 
+        // Blueberry start
+        this.profiler.push("blueberryServerScheduler");
+        net.blueberrymc.common.Blueberry.getUtil().getServerScheduler().tick();
+        this.profiler.pop();
+        // Blueberry end
         this.profiler.push("tallying");
         long l2 = this.tickTimes[this.tickCount % 100] = Util.getNanos() - l;
         this.averageTickTime = this.averageTickTime * 0.8F + (float)l2 / 1000000.0F * 0.19999999F;
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 0d4e654c0b135d5c42226ffc457b34e2428cb0f3..8063cbdf6d6178dded1aea7486ef0dd229c4678c 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -505,6 +505,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
     }
 
     public void stopServer() {
+        net.blueberrymc.common.Blueberry.shutdown(); // Blueberry
         super.stopServer();
         Util.shutdownExecutors();
         SkullBlockEntity.clear();
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 20439648c9e2fc429e96d29eaee0deadfb14a1bc..08d2672591960f5a89bfe5a1fd19f2b58f53a2eb 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -170,7 +170,7 @@ import net.minecraft.world.phys.shapes.VoxelShape;
 import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 
-public class ServerGamePacketListenerImpl implements ServerPlayerConnection, ServerGamePacketListener {
+public class ServerGamePacketListenerImpl implements ServerPlayerConnection, ServerGamePacketListener, net.blueberrymc.network.server.ServerBlueberryPacketListener { // Blueberry
     static final Logger LOGGER = LogUtils.getLogger();
     private static final int LATENCY_CHECK_INTERVAL = 15000;
     public static final double MAX_INTERACTION_DISTANCE = Mth.square(6.0D);
@@ -1564,6 +1564,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
     }
 
     public void handleCustomPayload(ServerboundCustomPayloadPacket serverboundCustomPayloadPacket) {
+        if (net.blueberrymc.network.server.ServerBlueberryPacketListener.super.handleBlueberryCustomPayload(serverboundCustomPayloadPacket)) return; // Blueberry
     }
 
     public void handleChangeDifficulty(ServerboundChangeDifficultyPacket serverboundChangeDifficultyPacket) {
diff --git a/src/main/java/net/minecraft/server/network/ServerStatusPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerStatusPacketListenerImpl.java
index f228eb5e7e177214baf08d7e82760723f9e8277d..3ff2bf1f4d4e48b9dbb9dcc6ea13d3673be23f24 100644
--- a/src/main/java/net/minecraft/server/network/ServerStatusPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerStatusPacketListenerImpl.java
@@ -33,6 +33,7 @@ public class ServerStatusPacketListenerImpl implements ServerStatusPacketListene
         } else {
             this.hasRequestedStatus = true;
             this.connection.send(new ClientboundStatusResponsePacket(this.server.getStatus()));
+            this.connection.send(new net.blueberrymc.network.client.handshake.ClientboundBlueberryHandshakePacket(net.blueberrymc.common.Blueberry.getModManager().getModInfos())); // Blueberry
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/inventory/MenuType.java b/src/main/java/net/minecraft/world/inventory/MenuType.java
index a8211550fcb15fe84c6fed4d68d7f82c0cc259bd..a007ee11e08806890aca8add198972c731e67601 100644
--- a/src/main/java/net/minecraft/world/inventory/MenuType.java
+++ b/src/main/java/net/minecraft/world/inventory/MenuType.java
@@ -34,7 +34,8 @@ public class MenuType<T extends AbstractContainerMenu> {
         return Registry.register(Registry.MENU, s, new MenuType<>(menuSupplier));
     }
 
-    private MenuType(MenuType.MenuSupplier<T> menuSupplier) {
+    // Blueberry - private -> public
+    public MenuType(MenuType.MenuSupplier<T> menuSupplier) {
         this.constructor = menuSupplier;
     }
 
@@ -42,6 +43,7 @@ public class MenuType<T extends AbstractContainerMenu> {
         return this.constructor.create(i, inventory);
     }
 
+    public // Blueberry
     interface MenuSupplier<T extends AbstractContainerMenu> {
         T create(int var1, Inventory var2);
     }
diff --git a/src/main/java/net/minecraft/world/item/Item.java b/src/main/java/net/minecraft/world/item/Item.java
index 47839a74dba234d835b2bf2b5ec860a07de1aedf..5ff9d41de56a78648922053cbd88e3e249900ca5 100644
--- a/src/main/java/net/minecraft/world/item/Item.java
+++ b/src/main/java/net/minecraft/world/item/Item.java
@@ -97,6 +97,7 @@ public class Item implements ItemLike {
             }
         }
 
+        this.renderer = properties.renderer; // Blueberry
     }
 
     /** @deprecated */
@@ -381,6 +382,15 @@ public class Item implements ItemLike {
         return true;
     }
 
+    // Blueberry start
+    private final java.util.function.Supplier<net.minecraft.client.renderer.BlockEntityWithoutLevelRenderer> renderer;
+
+    public final net.minecraft.client.renderer.BlockEntityWithoutLevelRenderer getRenderer() {
+        net.minecraft.client.renderer.BlockEntityWithoutLevelRenderer renderer = this.renderer != null ? this.renderer.get() : null;
+        return renderer != null ? renderer : net.minecraft.client.renderer.BlockEntityWithoutLevelRenderer.instance;
+    }
+    // Blueberry end
+
     public static class Properties {
         int maxStackSize = 64;
         int maxDamage;
@@ -392,6 +402,7 @@ public class Item implements ItemLike {
         @Nullable
         FoodProperties foodProperties;
         boolean isFireResistant;
+        java.util.function.Supplier<net.minecraft.client.renderer.BlockEntityWithoutLevelRenderer> renderer; // Blueberry
 
         public Item.Properties food(FoodProperties foodProperties) {
             this.foodProperties = foodProperties;
@@ -436,5 +447,12 @@ public class Item implements ItemLike {
             this.isFireResistant = true;
             return this;
         }
+
+        // Blueberry start
+        public Item.Properties renderer(java.util.function.Supplier<net.minecraft.client.renderer.BlockEntityWithoutLevelRenderer> renderer) {
+            this.renderer = renderer;
+            return this;
+        }
+        // Blueberry end
     }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BlockEntityType.java b/src/main/java/net/minecraft/world/level/block/entity/BlockEntityType.java
index a373fc0a71a203ddfdc9a47c842d1cf45dd06123..0a8b11c9ccb5d3473e32e22fe613a01c875cf679 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BlockEntityType.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BlockEntityType.java
@@ -95,6 +95,7 @@ public class BlockEntityType<T extends BlockEntity> {
     }
 
     @FunctionalInterface
+    public // Blueberry
     interface BlockEntitySupplier<T extends BlockEntity> {
         T create(BlockPos var1, BlockState var2);
     }
diff --git a/src/main/resources/log4j2-debug.xml b/src/main/resources/log4j2-debug.xml
index aea01980678d1a4f74982b0c08f42456d557b124..cabc65a1a5255cb445e4e2ac59f83b759eea9979 100644
--- a/src/main/resources/log4j2-debug.xml
+++ b/src/main/resources/log4j2-debug.xml
@@ -2,13 +2,13 @@
 <Configuration status="WARN" packages="com.mojang.util">
     <Appenders>
         <Console name="SysOut" target="SYSTEM_OUT">
-            <PatternLayout pattern="[%d{HH:mm:ss}] [%t/%level]: %msg%n" />
+            <PatternLayout pattern="[%d{HH:mm:ss}] [%t/%level] [%c]: %msg%n" />
         </Console>
         <Queue name="ServerGuiConsole">
-            <PatternLayout pattern="[%d{HH:mm:ss} %level]: %msg%n" />
+            <PatternLayout pattern="[%d{HH:mm:ss} %level] [%c]: %msg%n" />
         </Queue>
         <RollingRandomAccessFile name="File" fileName="logs/latest.log" filePattern="logs/%d{yyyy-MM-dd}-%i.log.gz">
-            <PatternLayout pattern="[%d{HH:mm:ss}] [%t/%level]: %msg%n" />
+            <PatternLayout pattern="[%d{HH:mm:ss}] [%t/%level] [%c]: %msg%n" />
             <Policies>
                 <TimeBasedTriggeringPolicy />
                 <OnStartupTriggeringPolicy />
diff --git a/src/main/resources/log4j2.xml b/src/main/resources/log4j2.xml
new file mode 100644
index 0000000000000000000000000000000000000000..8b00a0d606dae68533536e2eb8a6b10030a9e098
--- /dev/null
+++ b/src/main/resources/log4j2.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Configuration status="WARN">
+    <Appenders>
+        <Console name="SysOut" target="SYSTEM_OUT">
+            <PatternLayout pattern="[%d{HH:mm:ss}] [%t/%level] [%c]: %msg%n" />
+        </Console>
+        <Queue name="ServerGuiConsole">
+            <PatternLayout pattern="[%d{HH:mm:ss} %level] [%c]: %msg%n" />
+        </Queue>
+        <RollingRandomAccessFile name="File" fileName="logs/latest.log" filePattern="logs/%d{yyyy-MM-dd}-%i.log.gz">
+            <PatternLayout pattern="[%d{HH:mm:ss}] [%t/%level] [%c]: %msg%n" />
+            <Policies>
+                <TimeBasedTriggeringPolicy />
+                <OnStartupTriggeringPolicy />
+            </Policies>
+        </RollingRandomAccessFile>
+    </Appenders>
+    <Loggers>
+        <Root level="info">
+            <filters>
+                <MarkerFilter marker="NETWORK_PACKETS" onMatch="DENY" onMismatch="NEUTRAL" />
+            </filters>
+            <AppenderRef ref="SysOut"/>
+            <AppenderRef ref="File"/>
+            <AppenderRef ref="ServerGuiConsole"/>
+        </Root>
+    </Loggers>
+</Configuration>
