From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: acrylic-style <me@acrylicstyle.xyz>
Date: Thu, 14 Jan 2021 01:44:46 +0900
Subject: [PATCH] Mods support


diff --git a/src/main/java/net/minecraft/CrashReport.java b/src/main/java/net/minecraft/CrashReport.java
index 438e17a37dd26a5c70f455e03953edf499fec5be..abf4a91e3ffcbb718b0dc8bb64f269d4824c1a85 100644
--- a/src/main/java/net/minecraft/CrashReport.java
+++ b/src/main/java/net/minecraft/CrashReport.java
@@ -56,6 +56,24 @@ public class CrashReport {
          List<String> list = (List)Util.getVmArguments().collect(Collectors.toList());
          return String.format("%d total; %s", list.size(), list.stream().collect(Collectors.joining(" ")));
       }));
+      // Blueberry start
+      this.systemDetails.setDetail("Blueberry Version", net.blueberrymc.common.util.Versioning.getVersion().getFullyQualifiedVersion());
+      this.systemDetails.setDetail("Mods", () -> {
+         StringBuilder sb = new StringBuilder("\n");
+         sb.append("      Status:\n");
+         sb.append("        L = Loaded\n");
+         sb.append("        P = Pre Init\n");
+         sb.append("        I = Init\n");
+         sb.append("        J = Post Init\n");
+         sb.append("        A = Available\n");
+         sb.append("        E = Errored\n");
+         sb.append("        U = Unloaded\n");
+         for (net.blueberrymc.common.bml.BlueberryMod mod : net.blueberrymc.common.Blueberry.getModLoader().getLoadedMods()) {
+            sb.append("      ").append(mod.getName()).append(" (").append(mod.getDescription().getModId()).append(") [").append(mod.getDescription().getVersion()).append("] - ").append(mod.getStateList().toString()).append("\n");
+         }
+         return sb.toString();
+      });
+      // Blueberry end
    }
 
    public String getTitle() {
@@ -252,6 +270,6 @@ public class CrashReport {
    }
 
    public static void preload() {
-      (new CrashReport("Don't panic!", new Throwable())).getFriendlyReport();
+      LOGGER.info((new CrashReport("Don't panic!", new Throwable())).getFriendlyReport()); // Blueberry
    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/Minecraft.java b/src/main/java/net/minecraft/client/Minecraft.java
index 57aa259dc751e86f036b572f5eb83297623f9a1b..fffe19cca86be5623083816352371c7f46bcd120 100644
--- a/src/main/java/net/minecraft/client/Minecraft.java
+++ b/src/main/java/net/minecraft/client/Minecraft.java
@@ -440,6 +440,7 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
       this.mainRenderTarget = new RenderTarget(this.window.getWidth(), this.window.getHeight(), true, ON_OSX);
       this.mainRenderTarget.setClearColor(0.0F, 0.0F, 0.0F, 0.0F);
       this.resourceManager = new SimpleReloadableResourceManager(PackType.CLIENT_RESOURCES);
+      net.blueberrymc.common.Blueberry.getModLoader().callPreInit(); // Blueberry
       this.resourcePackRepository.reload();
       this.options.loadSelectedResourcePacks(this.resourcePackRepository);
       this.languageManager = new LanguageManager(this.options.languageCode);
@@ -508,14 +509,15 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
       this.window.setDefaultErrorCallback();
       this.resizeDisplay();
       if (s != null) {
-         this.setScreen(new ConnectScreen(new TitleScreen(), this, s, i));
+         this.setScreen(new net.blueberrymc.common.bml.client.gui.screens.ModLoadingProblemScreen(new ConnectScreen(new TitleScreen(), this, s, i))); // Blueberry
       } else {
-         this.setScreen(new TitleScreen(true));
+         this.setScreen(new net.blueberrymc.common.bml.client.gui.screens.ModLoadingProblemScreen(new TitleScreen())); // Blueberry
       }
 
       this.gameRenderer.preloadUiShader(this.getClientPackSource().getVanillaPack());
       LoadingOverlay.registerTextures(this);
       List<PackResources> list = this.resourcePackRepository.openAllSelected();
+      net.blueberrymc.common.Blueberry.getModLoader().callInit(); // Blueberry
       this.reloadStateTracker.startReload(ResourceLoadStateTracker.ReloadReason.INITIAL, list);
       this.setOverlay(new LoadingOverlay(this, this.resourceManager.createReload(Util.backgroundExecutor(), this, RESOURCE_RELOAD_INITIAL_TASK, list), (optional) -> Util.ifElse(optional, this::rollbackResourcePacks, () -> {
             if (SharedConstants.IS_RUNNING_IN_IDE) {
@@ -703,9 +705,10 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
    }
 
    public static void crash(CrashReport crashReport) {
-      File crashReportsDir = new File(getInstance().gameDirectory, "crash-reports");
+      File crashReportsDir = new File(instance == null ? new File(".") : getInstance().gameDirectory, "crash-reports"); // Blueberry
       File crashReportFile = new File(crashReportsDir, "crash-" + (new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss")).format(new Date()) + "-client.txt");
       Bootstrap.realStdoutPrintln(crashReport.getFriendlyReport());
+      net.blueberrymc.common.util.DiscordRPCTaskExecutor.shutdownNow(); // Blueberry
       if (crashReport.getSaveFile() != null) {
          Bootstrap.realStdoutPrintln("#@!@# Game crashed! Crash report saved to: #@!@# " + crashReport.getSaveFile());
          System.exit(-1);
@@ -840,6 +843,7 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
 
       this.screen = screen;
       BufferUploader.reset();
+      net.blueberrymc.client.event.ClientEventFactory.callScreenChangedEvent(this.screen); // Blueberry
       if (screen != null) {
          this.mouseHandler.releaseMouse();
          KeyMapping.releaseAll();
@@ -856,6 +860,7 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
 
    public void setOverlay(@Nullable Overlay overlay) {
       this.overlay = overlay;
+      net.blueberrymc.client.event.ClientEventFactory.callOverlayChangedEvent(overlay); // Blueberry
    }
 
    public void destroy() {
@@ -880,6 +885,7 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
             this.screen.removed();
          }
 
+         net.blueberrymc.common.Blueberry.shutdown();
          this.close();
       } finally {
          Util.timeSource = System::nanoTime;
@@ -1515,6 +1521,10 @@ public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements
          this.pendingConnection.tick();
       }
 
+      // Blueberry start
+      this.profiler.popPush("blueberryClientScheduler");
+      net.blueberrymc.common.Blueberry.getUtil().getClientScheduler().tick();
+      // Blueberry end
       this.profiler.popPush("keyboard");
       this.keyboardHandler.tick();
       this.profiler.pop();
diff --git a/src/main/java/net/minecraft/client/gui/components/DebugScreenOverlay.java b/src/main/java/net/minecraft/client/gui/components/DebugScreenOverlay.java
index cccdecdd0b1ae6adac4d932a8ca6572394dac0f5..71519b7098e62bb871593b0935db8cb177a59428 100644
--- a/src/main/java/net/minecraft/client/gui/components/DebugScreenOverlay.java
+++ b/src/main/java/net/minecraft/client/gui/components/DebugScreenOverlay.java
@@ -28,6 +28,7 @@ import java.util.concurrent.CompletableFuture;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
+import net.blueberrymc.common.Blueberry; // Blueberry
 import net.minecraft.ChatFormatting;
 import net.minecraft.SharedConstants;
 import net.minecraft.Util;
@@ -328,6 +329,12 @@ public class DebugScreenOverlay extends GuiComponent {
       long l3 = Runtime.getRuntime().freeMemory();
       long l4 = l2 - l3;
       List<String> list = Lists.newArrayList(new String[]{String.format("Java: %s %dbit", System.getProperty("java.version"), this.minecraft.is64Bit() ? 64 : 32), String.format("Mem: % 2d%% %03d/%03dMB", l4 * 100L / l, bytesToMegabytes(l4), bytesToMegabytes(l)), String.format("Allocated: % 2d%% %03dMB", l2 * 100L / l, bytesToMegabytes(l2)), "", String.format("CPU: %s", GlUtil.getCpuInfo()), "", String.format("Display: %dx%d (%s)", Minecraft.getInstance().getWindow().getWidth(), Minecraft.getInstance().getWindow().getHeight(), GlUtil.getVendor()), GlUtil.getRenderer(), GlUtil.getOpenGLVersion()});
+      // Blueberry start
+      list.add("");
+      list.add("MagmaCube " + Blueberry.getVersion().getMagmaCubeCommit());
+      list.add("Blueberry " + Blueberry.getVersion().getFullyQualifiedVersion());
+      list.add(Blueberry.getModLoader().getLoadedMods().size() + " mods loaded, " + Blueberry.getModLoader().getActiveMods().size() + " mods active");
+      // Blueberry end
       if (this.minecraft.showOnlyReducedInfo()) {
          return list;
       } else {
diff --git a/src/main/java/net/minecraft/client/gui/screens/LoadingOverlay.java b/src/main/java/net/minecraft/client/gui/screens/LoadingOverlay.java
index 11c281c120aa505a1e90b4c05b506df062cf33a0..ad6503b6a8c1570a03ea9c62e7a6fc791a316c10 100644
--- a/src/main/java/net/minecraft/client/gui/screens/LoadingOverlay.java
+++ b/src/main/java/net/minecraft/client/gui/screens/LoadingOverlay.java
@@ -113,6 +113,7 @@ public class LoadingOverlay extends Overlay {
       }
 
       if (f2 >= 2.0F) {
+         net.blueberrymc.common.Blueberry.getModLoader().callPostInit(); // Blueberry
          this.minecraft.setOverlay((Overlay)null);
       }
 
@@ -126,6 +127,7 @@ public class LoadingOverlay extends Overlay {
 
          this.fadeOutStart = Util.getMillis();
          if (this.minecraft.screen != null) {
+            if (this.minecraft.screen instanceof net.blueberrymc.common.bml.client.gui.screens.ModLoadingProblemScreen) ((net.blueberrymc.common.bml.client.gui.screens.ModLoadingProblemScreen) minecraft.screen).refresh(); // Blueberry
             this.minecraft.screen.init(this.minecraft, this.minecraft.getWindow().getGuiScaledWidth(), this.minecraft.getWindow().getGuiScaledHeight());
          }
       }
diff --git a/src/main/java/net/minecraft/client/gui/screens/PauseScreen.java b/src/main/java/net/minecraft/client/gui/screens/PauseScreen.java
index 015626ba3f85c23a69f9abbcc44781e5a0011543..d5d9b13e3242a094ba158290d03d292e71b5ff35 100644
--- a/src/main/java/net/minecraft/client/gui/screens/PauseScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/PauseScreen.java
@@ -78,6 +78,7 @@ public class PauseScreen extends Screen {
          }
 
       }));
+      this.addButton(new Button(this.width / 2 - 102, this.height / 4 + 144 + -16, 204, 20, new net.blueberrymc.client.resources.BlueberryText("blueberry", "gui.screens.mods"), (buttonx) -> net.blueberrymc.client.gui.screens.ModListScreen.switchToModListScreen())); // Blueberry
    }
 
    public void tick() {
diff --git a/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java b/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java
index 020c21e26be3ee0a4092c11f6b76d61daa599a54..bd8877a1b4662f5cb371b081f8673332bb7d0830 100644
--- a/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java
+++ b/src/main/java/net/minecraft/client/gui/screens/TitleScreen.java
@@ -136,7 +136,8 @@ public class TitleScreen extends Screen {
          Screen screen = (Screen)(this.minecraft.options.skipMultiplayerWarning ? new JoinMultiplayerScreen(this) : new SafetyScreen(this));
          this.minecraft.setScreen(screen);
       }, onTooltip))).active = flag;
-      (this.addButton(new Button(this.width / 2 - 100, i + i2 * 2, 200, 20, new TranslatableComponent("menu.online"), (button) -> this.realmsButtonClicked(), onTooltip))).active = flag;
+      (this.addButton(new Button(this.width / 2 - 100, i + i2 * 2, 98, 20, new net.blueberrymc.client.resources.BlueberryText("blueberry", "gui.screens.mods"), (button) -> net.blueberrymc.client.gui.screens.ModListScreen.switchToModListScreen(), onTooltip))).active = flag;
+      (this.addButton(new Button(this.width / 2 + 2, i + i2 * 2, 98, 20, new TranslatableComponent("menu.online"), (button) -> this.realmsButtonClicked(), onTooltip))).active = flag;
    }
 
    private void createDemoMenuOptions(int i, int i2) {
@@ -243,8 +244,10 @@ public class TitleScreen extends Screen {
             s = s + I18n.get("menu.modded");
          }
 
-         drawString(poseStack, this.font, "MagmaCube " + ((net.minecraft.DetectedVersion) SharedConstants.getCurrentVersion()).magmaCubeVersion, 2, this.height - 20, 0xFFFFFF | i6); // MagmaCube
-         drawString(poseStack, this.font, s, 2, this.height - 10, 16777215 | i6);
+         drawString(poseStack, this.font, "Blueberry " + net.blueberrymc.common.Blueberry.getVersion().getFullyQualifiedVersion(), 2, this.height - 40, 0xFFFFFF | i6); // Blueberry
+         drawString(poseStack, this.font, "MagmaCube " + ((net.minecraft.DetectedVersion) SharedConstants.getCurrentVersion()).magmaCubeVersion, 2, this.height - 30, 0xFFFFFF | i6); // MagmaCube // Blueberry - offset 20 -> 30
+         drawString(poseStack, this.font, s, 2, this.height - 20, 16777215 | i6); // Blueberry - offset 10 -> 20
+         drawString(poseStack, this.font, net.blueberrymc.common.Blueberry.getModLoader().getLoadedMods().size() + " mods loaded, " + net.blueberrymc.common.Blueberry.getModLoader().getActiveMods().size() + " mods active", 2, this.height - 10, 0xFFFFFF | i6); // Blueberry
          drawString(poseStack, this.font, "Copyright Mojang AB. Do not distribute!", this.copyrightX, this.height - 10, 16777215 | i6);
          if (i > this.copyrightX && i < this.copyrightX + this.copyrightWidth && i2 > this.height - 10 && i2 < this.height) {
             fill(poseStack, this.copyrightX, this.height - 1, this.copyrightX + this.copyrightWidth, this.height, 16777215 | i6);
diff --git a/src/main/java/net/minecraft/client/gui/screens/multiplayer/ServerSelectionList.java b/src/main/java/net/minecraft/client/gui/screens/multiplayer/ServerSelectionList.java
index 79ddf231b1c480f353607e90123c8564a4786e8e..5ed1f54ca25b166fae8a54fd25c5ca3b8b96042a 100644
--- a/src/main/java/net/minecraft/client/gui/screens/multiplayer/ServerSelectionList.java
+++ b/src/main/java/net/minecraft/client/gui/screens/multiplayer/ServerSelectionList.java
@@ -291,6 +291,13 @@ public class ServerSelectionList extends ObjectSelectionList<ServerSelectionList
          RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
          RenderSystem.setShaderTexture(0, GuiComponent.GUI_ICONS_LOCATION);
          GuiComponent.blit(poseStack, i3 + i4 - 15, i2, (float)(i10 * 10), (float)(176 + i11 * 8), 10, 8, 256, 256);
+         // Blueberry start
+         if (serverData.serverType != null) {
+            RenderSystem.setShader(GameRenderer::getPositionTexColorShader);
+            RenderSystem.setShaderTexture(0, net.blueberrymc.client.gui.BlueberryGuiComponents.GUI_ICONS_LOCATION);
+            GuiComponent.blit(poseStack, i3 + i4 - 18, i2 + 8, (float) 0.0F, (float) (serverData.serverType.getOffset() * 16), 16, 16, 256, 256);
+         }
+         // Blueberry end
          String s = this.serverData.getIconB64();
          if (!Objects.equals(s, this.lastIconB64)) {
             if (this.uploadServerIcon(s)) {
@@ -311,6 +318,12 @@ public class ServerSelectionList extends ObjectSelectionList<ServerSelectionList
          int i20 = i7 - i2;
          if (i19 >= i4 - 15 && i19 <= i4 - 5 && i20 >= 0 && i20 <= 8) {
             this.screen.setToolTip(Collections.singletonList(component2));
+            // Blueberry start
+         } else if (serverData.serverType != null && i19 >= i4 - 18 && i19 <= i4 - 5 && i20 >= 0 && i20 <= 22) {
+            String text = serverData.serverType.getBlueberryText().getContents();
+            if (text.contains("%d")) text = String.format(text, serverData.modsCount);
+            this.screen.setToolTip(Collections.singletonList(new TextComponent(text)));
+            // Blueberry end
          } else if (i19 >= i4 - i9 - 15 - 2 && i19 <= i4 - 15 - 2 && i20 >= 0 && i20 <= 8) {
             this.screen.setToolTip(list2);
          }
diff --git a/src/main/java/net/minecraft/client/main/Main.java b/src/main/java/net/minecraft/client/main/Main.java
index dbe03735c4542efab0263e0b60b1c27029379be7..02fc5e7e3b475becc8a1c033156a70f6bd371f4c 100644
--- a/src/main/java/net/minecraft/client/main/Main.java
+++ b/src/main/java/net/minecraft/client/main/Main.java
@@ -43,6 +43,7 @@ public class Main {
    @DontObfuscate
    public static void main(String[] args) {
       SharedConstants.tryDetectVersion();
+      if (net.minecraft.SharedConstants.IS_RUNNING_IN_IDE) org.lwjgl.glfw.GLFW.glfwInit(); // MagmaCube - lwjgl debug agent causes glGetError to crash when we didn't call glfwInit
       OptionParser optionParser = new OptionParser();
       optionParser.allowsUnrecognizedOptions();
       optionParser.accepts("demo");
@@ -78,6 +79,8 @@ public class Main {
       if (!list.isEmpty()) {
          System.out.println("Completely ignored arguments: " + list);
       }
+      File file = parseArgument(optionSet, optionSpec3); // Blueberry - moved from below
+      net.blueberrymc.common.Blueberry.bootstrap(net.blueberrymc.common.Side.CLIENT, file); // Blueberry
 
       String s = parseArgument(optionSet, optionSpec6);
       Proxy proxy = Proxy.NO_PROXY;
@@ -111,7 +114,7 @@ public class Main {
       PropertyMap propertyMap = GsonHelper.fromJson(gson, parseArgument(optionSet, optionSpec18), PropertyMap.class);
       PropertyMap propertyMap2 = GsonHelper.fromJson(gson, parseArgument(optionSet, optionSpec19), PropertyMap.class);
       String s5 = parseArgument(optionSet, optionSpec22);
-      File file = parseArgument(optionSet, optionSpec3);
+      // File file = parseArgument(optionSet, optionSpec3); // Blueberry - moved up
       File file2 = optionSet.has(optionSpec4) ? parseArgument(optionSet, optionSpec4) : new File(file, "assets/");
       File file3 = optionSet.has(optionSpec5) ? parseArgument(optionSet, optionSpec5) : new File(file, "resourcepacks/");
       String s6 = optionSet.has(optionSpec11) ? (String)optionSpec11.value(optionSet) : Player.createPlayerUUID((String)optionSpec10.value(optionSet)).toString();
diff --git a/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java b/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
index cdf04d7e0245e0d8adbd78338314c84ae9dd1ee9..66afe97c1c630473d11a742082dca66c7296abf8 100644
--- a/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
+++ b/src/main/java/net/minecraft/client/multiplayer/ClientPacketListener.java
@@ -283,7 +283,7 @@ import net.minecraft.world.scores.criteria.ObjectiveCriteria;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class ClientPacketListener implements ClientGamePacketListener {
+public class ClientPacketListener implements ClientGamePacketListener, net.blueberrymc.network.client.ClientBlueberryPacketListener { // Blueberry
    private static final Logger LOGGER = LogManager.getLogger();
    private static final Component GENERIC_DISCONNECT_MESSAGE = new TranslatableComponent("disconnect.lost");
    private final Connection connection;
@@ -1554,6 +1554,7 @@ public class ClientPacketListener implements ClientGamePacketListener {
 
       try {
          friendlyByteBuf = clientboundCustomPayloadPacket.getData();
+         if (net.blueberrymc.network.client.ClientBlueberryPacketListener.super.handleBlueberryCustomPayload(clientboundCustomPayloadPacket)) return; // Blueberry
          if (ClientboundCustomPayloadPacket.BRAND.equals(resourceLocation)) {
             this.minecraft.player.setServerBrand(friendlyByteBuf.readUtf());
          } else if (ClientboundCustomPayloadPacket.DEBUG_PATHFINDING_PACKET.equals(resourceLocation)) {
diff --git a/src/main/java/net/minecraft/client/multiplayer/ServerData.java b/src/main/java/net/minecraft/client/multiplayer/ServerData.java
index 35658fbbbcf466e1cebdd151d0c3ed998ada23d6..e9be21ae9197a9bb0514aa823fd4be6cba7fae49 100644
--- a/src/main/java/net/minecraft/client/multiplayer/ServerData.java
+++ b/src/main/java/net/minecraft/client/multiplayer/ServerData.java
@@ -23,6 +23,8 @@ public class ServerData {
    @Nullable
    private String iconB64;
    private boolean lan;
+   public net.blueberrymc.network.ServerType serverType = null; // Blueberry
+   public int modsCount = 0; // Blueberry
 
    public ServerData(String s, String s2, boolean flag) {
       this.name = s;
diff --git a/src/main/java/net/minecraft/client/multiplayer/ServerStatusPinger.java b/src/main/java/net/minecraft/client/multiplayer/ServerStatusPinger.java
index 528c53de5fcc3f2c2e8dc780e1af81f8cb695c1c..f94fbfda504b762d5eb0af54c2dd026238459829 100644
--- a/src/main/java/net/minecraft/client/multiplayer/ServerStatusPinger.java
+++ b/src/main/java/net/minecraft/client/multiplayer/ServerStatusPinger.java
@@ -65,6 +65,7 @@ public class ServerStatusPinger {
                connection.disconnect(new TranslatableComponent("multiplayer.status.unrequested"));
             } else {
                this.receivedPing = true;
+               serverData.serverType = net.blueberrymc.network.ServerType.VANILLA; // Blueberry
                ServerStatus serverStatus = clientboundStatusResponsePacket.getStatus();
                if (serverStatus.getDescription() != null) {
                   serverData.motd = serverStatus.getDescription();
@@ -126,6 +127,19 @@ public class ServerStatusPinger {
             connection.disconnect(new TranslatableComponent("multiplayer.status.finished"));
          }
 
+         // Blueberry start
+         @Override
+         public void handleBlueberryHandshakeResponse(net.blueberrymc.network.client.handshake.ClientboundBlueberryHandshakePacket packet) {
+            boolean compatible = net.blueberrymc.common.util.ListUtils.isCompatible(packet.getModInfos(), net.blueberrymc.common.Blueberry.getModManager().getModInfos());
+            if (compatible) {
+               serverData.serverType = net.blueberrymc.network.ServerType.BLUEBERRY_GOOD;
+            } else {
+               serverData.serverType = net.blueberrymc.network.ServerType.BLUEBERRY_BAD;
+            }
+            serverData.modsCount = packet.getModInfos().size();
+         }
+         // Blueberry end
+
          public void onDisconnect(Component component) {
             if (!this.success) {
                ServerStatusPinger.LOGGER.error("Can't ping {}: {}", serverData.ip, component.getString());
diff --git a/src/main/java/net/minecraft/client/renderer/block/LiquidBlockRenderer.java b/src/main/java/net/minecraft/client/renderer/block/LiquidBlockRenderer.java
index 4b004b01c797e34d99108a3b1a4c70b5ea96a534..b12d6c063e273229e6a5fdfb78b20742bd3c13fd 100644
--- a/src/main/java/net/minecraft/client/renderer/block/LiquidBlockRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/block/LiquidBlockRenderer.java
@@ -69,9 +69,13 @@ public class LiquidBlockRenderer {
 
    public boolean tesselate(BlockAndTintGetter blockAndTintGetter, BlockPos blockPos, VertexConsumer vertexConsumer, FluidState fluidState) {
       boolean flag = fluidState.is(FluidTags.LAVA);
-      TextureAtlasSprite[] textureAtlasSprites = flag ? this.lavaIcons : this.waterIcons;
+      TextureAtlasSprite[] textureAtlasSprites = net.blueberrymc.client.world.level.fluid.FluidSpriteManager.getSprites(fluidState); //flag ? this.lavaIcons : this.waterIcons; // Blueberry
       BlockState blockState = blockAndTintGetter.getBlockState(blockPos);
       int i = flag ? 16777215 : BiomeColors.getAverageWaterColor(blockAndTintGetter, blockPos);
+      // Blueberry start
+      net.blueberrymc.client.event.render.LiquidBlockRenderEvent event = net.blueberrymc.client.event.ClientEventFactory.callLiquidBlockRenderEvent(fluidState, blockPos, i);
+      i = event.getColor();
+      // Blueberry end
       float f = (float)(i >> 16 & 255) / 255.0F;
       float f2 = (float)(i >> 8 & 255) / 255.0F;
       float f3 = (float)(i & 255) / 255.0F;
diff --git a/src/main/java/net/minecraft/client/renderer/debug/DebugRenderer.java b/src/main/java/net/minecraft/client/renderer/debug/DebugRenderer.java
index ce7b7a5d049efb50acab06106446ca2191d61c49..ea9ea20456d8efd6a5bdac528d3f7c134781c69f 100644
--- a/src/main/java/net/minecraft/client/renderer/debug/DebugRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/debug/DebugRenderer.java
@@ -23,6 +23,7 @@ import net.minecraft.world.entity.projectile.ProjectileUtil;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.EntityHitResult;
 import net.minecraft.world.phys.Vec3;
+import static net.blueberrymc.common.bml.InternalBlueberryMod.*; // Blueberry
 
 public class DebugRenderer {
    public final PathfindingRenderer pathfindingRenderer = new PathfindingRenderer();
@@ -93,28 +94,25 @@ public class DebugRenderer {
 
    public void render(PoseStack poseStack, MultiBufferSource.BufferSource bufferSource, double d, double d2, double d3) {
       if (this.renderChunkborder && !Minecraft.getInstance().showOnlyReducedInfo()) {
-         this.chunkBorderRenderer.render(poseStack, bufferSource, d, d2, d3);
-         // MagmaCube start - show debug renderer with F3+G
-         if (net.minecraft.SharedConstants.IS_RUNNING_IN_IDE) {
-            this.pathfindingRenderer.render(poseStack, bufferSource, d, d2, d3);
-            this.waterDebugRenderer.render(poseStack, bufferSource, d, d2, d3);
-            this.chunkBorderRenderer.render(poseStack, bufferSource, d, d2, d3);
-            this.heightMapRenderer.render(poseStack, bufferSource, d, d2, d3);
-            this.collisionBoxRenderer.render(poseStack, bufferSource, d, d2, d3);
-            this.neighborsUpdateRenderer.render(poseStack, bufferSource, d, d2, d3);
-            this.structureRenderer.render(poseStack, bufferSource, d, d2, d3);
-            this.lightDebugRenderer.render(poseStack, bufferSource, d, d2, d3);
-            this.worldGenAttemptRenderer.render(poseStack, bufferSource, d, d2, d3);
-            this.solidFaceRenderer.render(poseStack, bufferSource, d, d2, d3);
-            this.chunkRenderer.render(poseStack, bufferSource, d, d2, d3);
-            this.brainDebugRenderer.render(poseStack, bufferSource, d, d2, d3);
-            this.villageSectionsDebugRenderer.render(poseStack, bufferSource, d, d2, d3);
-            this.beeDebugRenderer.render(poseStack, bufferSource, d, d2, d3);
-            this.raidDebugRenderer.render(poseStack, bufferSource, d, d2, d3);
-            this.goalSelectorRenderer.render(poseStack, bufferSource, d, d2, d3);
-            this.gameTestDebugRenderer.render(poseStack, bufferSource, d, d2, d3);
-         }
-         // MagmaCube end - show debug renderer with F3+G
+         // Blueberry start
+            if (showDRPathfinding) this.pathfindingRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (showDRWaterDebug) this.waterDebugRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (showDRChunkBorder) this.chunkBorderRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (showDRHeightMap) this.heightMapRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (showDRCollisionBox) this.collisionBoxRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (showDRNeighborsUpdate) this.neighborsUpdateRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (showDRStructure) this.structureRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (showDRLightDebug) this.lightDebugRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (showDRWorldGenAttempt) this.worldGenAttemptRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (showDRSolidFace) this.solidFaceRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (showDRChunk) this.chunkRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (showDRBrainDebug) this.brainDebugRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (showDRVillageSectionsDebug) this.villageSectionsDebugRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (showDRBeeDebug) this.beeDebugRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (showDRRaidDebug) this.raidDebugRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (showDRGoalSelector) this.goalSelectorRenderer.render(poseStack, bufferSource, d, d2, d3);
+            if (showDRGameTestDebug) this.gameTestDebugRenderer.render(poseStack, bufferSource, d, d2, d3);
+         // Blueberry end
       }
 
       this.gameTestDebugRenderer.render(poseStack, bufferSource, d, d2, d3);
diff --git a/src/main/java/net/minecraft/client/resources/ClientPackSource.java b/src/main/java/net/minecraft/client/resources/ClientPackSource.java
index 7db2fd49c1f0ac4d8b2233d026f5bfb0852729e7..5a818e4252f071833100a659685b36f3f3a362d6 100644
--- a/src/main/java/net/minecraft/client/resources/ClientPackSource.java
+++ b/src/main/java/net/minecraft/client/resources/ClientPackSource.java
@@ -86,6 +86,7 @@ public class ClientPackSource implements RepositorySource {
       if (pack2 != null) {
          consumer.accept(pack2);
       }
+      net.blueberrymc.common.Blueberry.getModManager().loadPacks(consumer, packConstructor); // Blueberry
 
    }
 
diff --git a/src/main/java/net/minecraft/network/protocol/status/ClientStatusPacketListener.java b/src/main/java/net/minecraft/network/protocol/status/ClientStatusPacketListener.java
index 13602ef3920c0b2521a512ca01769568391b927a..d6958f5ad2032f9344039df13e7cf29f17f1438c 100644
--- a/src/main/java/net/minecraft/network/protocol/status/ClientStatusPacketListener.java
+++ b/src/main/java/net/minecraft/network/protocol/status/ClientStatusPacketListener.java
@@ -2,7 +2,7 @@ package net.minecraft.network.protocol.status;
 
 import net.minecraft.network.PacketListener;
 
-public interface ClientStatusPacketListener extends PacketListener {
+public interface ClientStatusPacketListener extends PacketListener, net.blueberrymc.network.client.handshake.ClientBlueberryHandshakePacketListener { // Blueberry
    void handleStatusResponse(ClientboundStatusResponsePacket var1);
 
    void handlePongResponse(ClientboundPongResponsePacket var1);
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index 34d213c8e30b81434d322f82ec25c1470332a6dc..6a2f1358e1aa44477222e4e6588094f0504a7930 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -83,6 +83,8 @@ public class Main {
             optionParser.printHelpOn(System.err);
             return;
          }
+         File file = new File((String)optionSet.valueOf(optionSpec10)); // Blueberry - moved from below
+         net.blueberrymc.common.Blueberry.bootstrap(net.blueberrymc.common.Side.SERVER, file); // Blueberry
 
          CrashReport.preload();
          Bootstrap.bootStrap();
@@ -104,7 +106,7 @@ public class Main {
             return;
          }
 
-         File file = new File((String)optionSet.valueOf(optionSpec10));
+         // File file = new File((String)optionSet.valueOf(optionSpec10)); // Blueberry - moved up
          YggdrasilAuthenticationService yggdrasilAuthenticationService = new YggdrasilAuthenticationService(Proxy.NO_PROXY);
          MinecraftSessionService minecraftSessionService = yggdrasilAuthenticationService.createMinecraftSessionService();
          GameProfileRepository gameProfileRepository = yggdrasilAuthenticationService.createProfileRepository();
@@ -165,6 +167,7 @@ public class Main {
          final DedicatedServer dedicatedServer = MinecraftServer.spin((threadx) -> {
             // MagmaCube start - decompile error
             DedicatedServer dedicatedServerx = new DedicatedServer(threadx, registryHolder, levelStorageAccess, packRepository, serverResources, worldData2, dedicatedServerSettings, DataFixers.getDataFixer(), minecraftSessionService, gameProfileRepository, gameProfileCache, LoggerChunkProgressListener::new);
+            ((net.blueberrymc.server.BlueberryServer) net.blueberrymc.common.Blueberry.getUtil()).setServer(dedicatedServerx); // Blueberry
             dedicatedServerx.setSingleplayerName((String)optionSet.valueOf(optionSpec9));
             dedicatedServerx.setPort(optionSet.valueOf(optionSpec12));
             dedicatedServerx.setDemo(optionSet.has(optionSpec3));
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 7bbf86c1e7393ac35d7f2f1b0cec882cb20e5cf3..10daa3776003c1d60220c495d169347d087d0ee2 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -259,6 +259,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
       this.proxy = proxy;
       this.packRepository = packRepository;
       this.resources = serverResources;
+      if (net.blueberrymc.common.Blueberry.isServer()) net.blueberrymc.common.Blueberry.getModLoader().callPreInit(); // Blueberry
       this.sessionService = minecraftSessionService;
       this.profileRepository = gameProfileRepository;
       this.profileCache = gameProfileCache;
@@ -271,6 +272,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
       this.structureManager = new StructureManager(serverResources.getResourceManager(), levelStorageAccess, dataFixer);
       this.serverThread = thread;
       this.executor = Util.backgroundExecutor();
+      if (net.blueberrymc.common.Blueberry.isServer()) net.blueberrymc.common.Blueberry.getModLoader().callInit(); // Blueberry
    }
 
    private void readScoreboard(DimensionDataStorage dimensionDataStorage) {
@@ -628,6 +630,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             this.status.setDescription(new TextComponent(this.motd));
             this.status.setVersion(new ServerStatus.Version(SharedConstants.getCurrentVersion().getName(), SharedConstants.getCurrentVersion().getProtocolVersion()));
             this.updateStatusIcon(this.status);
+            if (net.blueberrymc.common.Blueberry.isServer()) net.blueberrymc.common.Blueberry.getModLoader().callPostInit(); // Blueberry
 
             while(this.running) {
                long l = Util.getMillis() - this.nextTickTime;
@@ -813,6 +816,11 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
       }
 
       this.profiler.pop();
+      // Blueberry start
+      this.profiler.push("blueberryServerScheduler");
+      net.blueberrymc.common.Blueberry.getUtil().getServerScheduler().tick();
+      this.profiler.pop();
+      // Blueberry end
       this.profiler.push("tallying");
       long l2 = this.tickTimes[this.tickCount % 100] = Util.getNanos() - l;
       this.averageTickTime = this.averageTickTime * 0.8F + (float)l2 / 1000000.0F * 0.19999999F;
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index f1992af0ec6be025cb3fbc405c7ef04a937f4296..c4d585cf77ee4032ffe0478599b49c1fedea6971 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -503,6 +503,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
    }
 
    public void stopServer() {
+      net.blueberrymc.common.Blueberry.shutdown(); // Blueberry
       super.stopServer();
       Util.shutdownExecutors();
    }
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 657b07d9bf231fa913fea2a739ed159cc804b8d0..0f5796a590f46ba7ac621ac97a20d4b033b3485a 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -152,7 +152,7 @@ import org.apache.commons.lang3.StringUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class ServerGamePacketListenerImpl implements ServerPlayerConnection, ServerGamePacketListener {
+public class ServerGamePacketListenerImpl implements ServerPlayerConnection, ServerGamePacketListener, net.blueberrymc.network.server.ServerBlueberryPacketListener { // Blueberry
    private static final Logger LOGGER = LogManager.getLogger();
    private static final int LATENCY_CHECK_INTERVAL = 15000;
    public final Connection connection;
@@ -1389,6 +1389,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
    }
 
    public void handleCustomPayload(ServerboundCustomPayloadPacket serverboundCustomPayloadPacket) {
+      if (net.blueberrymc.network.server.ServerBlueberryPacketListener.super.handleBlueberryCustomPayload(serverboundCustomPayloadPacket)) return; // Blueberry
    }
 
    public void handleChangeDifficulty(ServerboundChangeDifficultyPacket serverboundChangeDifficultyPacket) {
diff --git a/src/main/java/net/minecraft/server/network/ServerStatusPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerStatusPacketListenerImpl.java
index 73df4b61da787635e4a52f963f3576ae15fe51ca..f1be7590ffaf84a8b688a93f11269df88c59e3ee 100644
--- a/src/main/java/net/minecraft/server/network/ServerStatusPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerStatusPacketListenerImpl.java
@@ -34,6 +34,7 @@ public class ServerStatusPacketListenerImpl implements ServerStatusPacketListene
       } else {
          this.hasRequestedStatus = true;
          this.connection.send(new ClientboundStatusResponsePacket(this.server.getStatus()));
+         this.connection.send(new net.blueberrymc.network.client.handshake.ClientboundBlueberryHandshakePacket(net.blueberrymc.common.Blueberry.getModManager().getModInfos())); // Blueberry
       }
    }
 
diff --git a/src/main/resources/log4j2-debug.xml b/src/main/resources/log4j2-debug.xml
index aea01980678d1a4f74982b0c08f42456d557b124..cabc65a1a5255cb445e4e2ac59f83b759eea9979 100644
--- a/src/main/resources/log4j2-debug.xml
+++ b/src/main/resources/log4j2-debug.xml
@@ -2,13 +2,13 @@
 <Configuration status="WARN" packages="com.mojang.util">
     <Appenders>
         <Console name="SysOut" target="SYSTEM_OUT">
-            <PatternLayout pattern="[%d{HH:mm:ss}] [%t/%level]: %msg%n" />
+            <PatternLayout pattern="[%d{HH:mm:ss}] [%t/%level] [%c]: %msg%n" />
         </Console>
         <Queue name="ServerGuiConsole">
-            <PatternLayout pattern="[%d{HH:mm:ss} %level]: %msg%n" />
+            <PatternLayout pattern="[%d{HH:mm:ss} %level] [%c]: %msg%n" />
         </Queue>
         <RollingRandomAccessFile name="File" fileName="logs/latest.log" filePattern="logs/%d{yyyy-MM-dd}-%i.log.gz">
-            <PatternLayout pattern="[%d{HH:mm:ss}] [%t/%level]: %msg%n" />
+            <PatternLayout pattern="[%d{HH:mm:ss}] [%t/%level] [%c]: %msg%n" />
             <Policies>
                 <TimeBasedTriggeringPolicy />
                 <OnStartupTriggeringPolicy />
diff --git a/src/main/resources/log4j2.xml b/src/main/resources/log4j2.xml
index 4d156f225141165e5dca26becdde59f089e98649..a37eb8ec516cb291c30269eabdda1bbee0aa07f0 100644
--- a/src/main/resources/log4j2.xml
+++ b/src/main/resources/log4j2.xml
@@ -2,13 +2,13 @@
 <Configuration status="WARN" packages="com.mojang.util">
     <Appenders>
         <Console name="SysOut" target="SYSTEM_OUT">
-            <PatternLayout pattern="[%d{HH:mm:ss}] [%t/%level]: %msg%n" />
+            <PatternLayout pattern="[%d{HH:mm:ss}] [%t/%level] [%c]: %msg%n" />
         </Console>
         <Queue name="ServerGuiConsole">
-            <PatternLayout pattern="[%d{HH:mm:ss} %level]: %msg%n" />
+            <PatternLayout pattern="[%d{HH:mm:ss} %level] [%c]: %msg%n" />
         </Queue>
         <RollingRandomAccessFile name="File" fileName="logs/latest.log" filePattern="logs/%d{yyyy-MM-dd}-%i.log.gz">
-            <PatternLayout pattern="[%d{HH:mm:ss}] [%t/%level]: %msg%n" />
+            <PatternLayout pattern="[%d{HH:mm:ss}] [%t/%level] [%c]: %msg%n" />
             <Policies>
                 <TimeBasedTriggeringPolicy />
                 <OnStartupTriggeringPolicy />
